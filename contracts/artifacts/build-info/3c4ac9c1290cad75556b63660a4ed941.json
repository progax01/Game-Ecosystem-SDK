{
	"id": "3c4ac9c1290cad75556b63660a4ed941",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"XPToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title XPToken\n * @dev XP Token with controlled minting/burning for the game ecosystem\n * Only the authorized factory contract can mint new XP tokens when CRIDA is locked\n * XP tokens represent experience points that can be locked to create game tokens\n */\ncontract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {\n    \n    // ============ Constants ============\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    \n    // ============ State Variables ============\n    uint256 public totalMinted;\n    uint256 public totalBurnedAmount;\n    \n    // ============ Events ============\n    event TokensMinted(address indexed to, uint256 amount, address indexed minter);\n    event TokensBurned(address indexed from, uint256 amount, address indexed burner);\n    \n    // ============ Comprehensive Error Definitions ============\n    // Input Validation Errors\n    error ZeroAmount();\n    error ZeroAddress();\n    error InvalidAddress(address provided, string reason);\n    \n    // Access Control Errors  \n    error UnauthorizedMinter(address caller);\n    error UnauthorizedBurner(address caller);\n    error UnauthorizedPauser(address caller);\n    error RoleAlreadyGranted(address account, bytes32 role);\n    error RoleNotGranted(address account, bytes32 role);\n    \n    // Balance and Supply Errors\n    error InsufficientBalance(address account, uint256 required, uint256 available);\n    error ExcessiveMintRequest(uint256 requested, uint256 maxAllowed);\n    error ExcessiveBurnRequest(uint256 requested, uint256 available);\n    error TotalSupplyLimitExceeded(uint256 newTotal, uint256 maxSupply);\n    \n    // Contract State Errors\n    error ContractPaused();\n    error ContractNotPaused();\n    error InvalidContractState(string reason);\n    error ReentrancyDetected();\n    \n    // Mathematical Errors\n    error MathOverflow(string operation);\n    error MathUnderflow(string operation);\n    \n    // External Call Errors\n    error MintOperationFailed(address to, uint256 amount, string reason);\n    error BurnOperationFailed(address from, uint256 amount, string reason);\n    error TransferOperationFailed(address from, address to, uint256 amount);\n    \n    // Business Logic Errors\n    error MintingDisabled(string reason);\n    error BurningDisabled(string reason);\n    error DailyMintLimitExceeded(address minter, uint256 dailyLimit, uint256 currentMinted);\n    error SuspiciousActivity(address account, string reason);\n    \n    // ============ Constructor ============\n    constructor(\n        string memory name,\n        string memory symbol,\n        address admin,\n        address factory\n    ) ERC20(name, symbol) {\n        // Comprehensive input validation\n        if (bytes(name).length == 0) {\n            revert InvalidAddress(address(0), \"Token name cannot be empty\");\n        }\n        if (bytes(symbol).length == 0) {\n            revert InvalidAddress(address(0), \"Token symbol cannot be empty\");\n        }\n        if (admin == address(0)) {\n            revert ZeroAddress();\n        }\n        if (factory == address(0)) {\n            revert ZeroAddress();\n        }\n      \n        \n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(PAUSER_ROLE, admin);\n        \n        // Grant minter role to factory contract with validation\n        _grantRole(MINTER_ROLE, factory);\n        _grantRole(BURNER_ROLE, factory);\n    }\n    \n    // ============ Enhanced Minting Functions ============\n    /**\n     * @dev Mint XP tokens to user when CRIDA is locked\n     * @param to Address to mint tokens to\n     * @param amount Amount of tokens to mint\n     */\n    function mint(address to, uint256 amount) \n        external \n        onlyRole(MINTER_ROLE) \n        whenNotPaused \n        nonReentrant \n    {\n        // Enhanced input validation\n        if (to == address(0)) {\n            revert ZeroAddress();\n        }\n        if (amount == 0) {\n            revert ZeroAmount();\n        }\n        \n        // Prevent minting to contract itself (security measure)\n        if (to == address(this)) {\n            revert InvalidAddress(to, \"Cannot mint to contract itself\");\n        }\n        \n        // Check for potential overflow in total supply\n        uint256 newTotalSupply = totalSupply() + amount;\n        uint256 maxSupply = type(uint256).max / 2; // Reasonable max supply limit\n        if (newTotalSupply > maxSupply) {\n            revert TotalSupplyLimitExceeded(newTotalSupply, maxSupply);\n        }\n        \n        // Update statistics before minting (for atomicity)\n        totalMinted += amount;\n        \n        try this._performMint(to, amount) {\n            emit TokensMinted(to, amount, msg.sender);\n        } catch Error(string memory reason) {\n            // Revert statistics update if minting fails\n            totalMinted -= amount;\n            revert MintOperationFailed(to, amount, reason);\n        } catch {\n            // Revert statistics update if minting fails\n            totalMinted -= amount;\n            revert MintOperationFailed(to, amount, \"Unknown minting error\");\n        }\n    }\n    \n    /**\n     * @dev Internal mint function for error handling separation\n     */\n    function _performMint(address to, uint256 amount) external {\n        require(msg.sender == address(this), \"Only self-call allowed\");\n        _mint(to, amount);\n    }\n    \n    // ============ Burning Functions ============\n    /**\n     * @dev Burn XP tokens from user\n     * @param amount Amount of tokens to burn\n     */\n    function burn(uint256 amount) \n        external \n        whenNotPaused \n        nonReentrant \n    {\n        if (amount == 0) revert ZeroAmount();\n        if (balanceOf(msg.sender) < amount) revert InsufficientBalance(msg.sender, amount, balanceOf(msg.sender));\n        \n        totalBurnedAmount += amount;\n        _burn(msg.sender, amount);\n        \n        emit TokensBurned(msg.sender, amount, msg.sender);\n    }\n    \n    /**\n     * @dev Burn XP tokens from specific account (factory use)\n     * @param from Address to burn tokens from\n     * @param amount Amount of tokens to burn\n     */\n    function burnFrom(address from, uint256 amount) \n        external \n        onlyRole(BURNER_ROLE) \n        whenNotPaused \n        nonReentrant \n    {\n        if (amount == 0) revert ZeroAmount();\n        if (balanceOf(from) < amount) revert InsufficientBalance(from, amount, balanceOf(from));\n        \n        totalBurnedAmount += amount;\n        _burn(from, amount);\n        \n        emit TokensBurned(from, amount, msg.sender);\n    }\n    \n    // ============ Admin Functions ============\n    /**\n     * @dev Pause contract operations\n     */\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n    \n    /**\n     * @dev Unpause contract operations\n     */\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n    \n    // ============ View Functions ============\n    /**\n     * @dev Get total XP tokens in circulation\n     */\n    function totalInCirculation() external view returns (uint256) {\n        return totalSupply();\n    }\n    \n    /**\n     * @dev Get minting/burning statistics\n     */\n    function getStats() external view returns (\n        uint256 minted,\n        uint256 burned,\n        uint256 circulation\n    ) {\n        return (totalMinted, totalBurnedAmount, totalSupply());\n    }\n    \n    // ============ Override Functions ============\n    /**\n     * @dev Override transfer to add pause functionality\n     */\n    function _update(address from, address to, uint256 amount) \n        internal \n        override \n        whenNotPaused \n    {\n        super._update(from, to, amount);\n    }\n} "
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"inputs": [],
							"name": "AccessControlBadConfirmation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "neededRole",
									"type": "bytes32"
								}
							],
							"name": "AccessControlUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "callerConfirmation",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
						"errors": {
							"AccessControlBadConfirmation()": [
								{
									"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
								}
							],
							"AccessControlUnauthorizedAccount(address,bytes32)": [
								{
									"details": "The `account` is missing a role."
								}
							]
						},
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 26,
								"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)21_storage"
							},
							"t_struct(RoleData)21_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 18,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "hasRole",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 20,
										"contract": "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"inputs": [],
							"name": "AccessControlBadConfirmation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "neededRole",
									"type": "bytes32"
								}
							],
							"name": "AccessControlUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "callerConfirmation",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC-165 detection.",
						"errors": {
							"AccessControlBadConfirmation()": [
								{
									"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
								}
							],
							"AccessControlUnauthorizedAccount(address,bytes32)": [
								{
									"details": "The `account` is missing a role."
								}
							]
						},
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC-165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 538,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 544,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 546,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 548,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 550,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c\",\"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1173,
								"contract": "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1283,
								"contract": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"XPToken.sol": {
				"XPToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "factory",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "AccessControlBadConfirmation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "neededRole",
									"type": "bytes32"
								}
							],
							"name": "AccessControlUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "BurnOperationFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "BurningDisabled",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ContractNotPaused",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ContractPaused",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "minter",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "dailyLimit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "currentMinted",
									"type": "uint256"
								}
							],
							"name": "DailyMintLimitExceeded",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requested",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "available",
									"type": "uint256"
								}
							],
							"name": "ExcessiveBurnRequest",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requested",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxAllowed",
									"type": "uint256"
								}
							],
							"name": "ExcessiveMintRequest",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "required",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "available",
									"type": "uint256"
								}
							],
							"name": "InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "provided",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "InvalidAddress",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "InvalidContractState",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "operation",
									"type": "string"
								}
							],
							"name": "MathOverflow",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "operation",
									"type": "string"
								}
							],
							"name": "MathUnderflow",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "MintOperationFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "MintingDisabled",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyDetected",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "RoleAlreadyGranted",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "RoleNotGranted",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "reason",
									"type": "string"
								}
							],
							"name": "SuspiciousActivity",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newTotal",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxSupply",
									"type": "uint256"
								}
							],
							"name": "TotalSupplyLimitExceeded",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TransferOperationFailed",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "caller",
									"type": "address"
								}
							],
							"name": "UnauthorizedBurner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "caller",
									"type": "address"
								}
							],
							"name": "UnauthorizedMinter",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "caller",
									"type": "address"
								}
							],
							"name": "UnauthorizedPauser",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAmount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "burner",
									"type": "address"
								}
							],
							"name": "TokensBurned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "minter",
									"type": "address"
								}
							],
							"name": "TokensMinted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "BURNER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "MINTER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PAUSER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "_performMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getStats",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "minted",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "burned",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "circulation",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "callerConfirmation",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalBurnedAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalInCirculation",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalMinted",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "XP Token with controlled minting/burning for the game ecosystem Only the authorized factory contract can mint new XP tokens when CRIDA is locked XP tokens represent experience points that can be locked to create game tokens",
						"errors": {
							"AccessControlBadConfirmation()": [
								{
									"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
								}
							],
							"AccessControlUnauthorizedAccount(address,bytes32)": [
								{
									"details": "The `account` is missing a role."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"_performMint(address,uint256)": {
								"details": "Internal mint function for error handling separation"
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Burn XP tokens from user",
								"params": {
									"amount": "Amount of tokens to burn"
								}
							},
							"burnFrom(address,uint256)": {
								"details": "Burn XP tokens from specific account (factory use)",
								"params": {
									"amount": "Amount of tokens to burn",
									"from": "Address to burn tokens from"
								}
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"getStats()": {
								"details": "Get minting/burning statistics"
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"mint(address,uint256)": {
								"details": "Mint XP tokens to user when CRIDA is locked",
								"params": {
									"amount": "Amount of tokens to mint",
									"to": "Address to mint tokens to"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"pause()": {
								"details": "Pause contract operations"
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalInCirculation()": {
								"details": "Get total XP tokens in circulation"
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"unpause()": {
								"details": "Unpause contract operations"
							}
						},
						"title": "XPToken",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_16, callvalue)\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  dup1\n  tag_10\n  dup2\n  tag_1\n  jump\t// in\ntag_10:\n  swap3\n  dup4\n  codecopy\n  dup2\n  add\n  0x80\n  dup3\n  dup3\n  sub\n  slt\n  tag_16\n  jumpi\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_16\n  jumpi\n  dup2\n  tag_15\n  swap2\n  dup5\n  add\n  tag_2\n  jump\t// in\ntag_15:\n  0x20\n  dup4\n  add\n  mload\n  swap1\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  tag_16\n  jumpi\n  tag_18\n  swap2\n  dup5\n  add\n  tag_2\n  jump\t// in\ntag_18:\n  tag_19\n  0x60\n  tag_20\n  0x40\n  dup7\n  add\n  tag_3\n  jump\t// in\ntag_20:\n  swap5\n  add\n  tag_3\n  jump\t// in\ntag_19:\n  dup3\n  mload\n  swap1\n  swap3\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_34\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  sload\n  0x01\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_23\n  jumpi\ntag_24:\n  0x20\n  dup3\n  lt\n  eq\n  tag_38\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_27\n  jumpi\ntag_28:\n  pop\n  dup1\n  0x20\n  0x1f\n  dup3\n  gt\n  0x01\n  eq\n  tag_29\n  jumpi\n  0x00\n  swap2\n  tag_31\n  jumpi\ntag_32:\n  pop\n  dup2\n  0x01\n  shl\n  swap2\n  not(0x00)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  shl\n  shr\n  not\n  and\n  or\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  sstore\ntag_33:\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_34\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  sload\n  0x01\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_36\n  jumpi\ntag_37:\n  0x20\n  dup3\n  lt\n  eq\n  tag_38\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_40\n  jumpi\ntag_41:\n  pop\n  dup1\n  0x20\n  0x1f\n  dup3\n  gt\n  0x01\n  eq\n  tag_42\n  jumpi\n  0x00\n  swap2\n  tag_44\n  jumpi\ntag_45:\n  pop\n  dup2\n  0x01\n  shl\n  swap2\n  not(0x00)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  shl\n  shr\n  not\n  and\n  or\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  sstore\ntag_46:\n  0x01\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2061:2082  _status = NOT_ENTERED */\n  0x07\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1857:1858  1 */\n  sstore\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mload\n    /* \"XPToken.sol\":3126:3149  bytes(name).length == 0 */\n  iszero\n    /* \"XPToken.sol\":3122:3239  if (bytes(name).length == 0) {... */\n  tag_47\n  jumpi\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mload\n    /* \"XPToken.sol\":3252:3277  bytes(symbol).length == 0 */\n  iszero\n    /* \"XPToken.sol\":3248:3369  if (bytes(symbol).length == 0) {... */\n  tag_49\n  jumpi\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup3\n  and\n    /* \"XPToken.sol\":3382:3401  admin == address(0) */\n  iszero\n    /* \"XPToken.sol\":3378:3448  if (admin == address(0)) {... */\n  tag_53\n  jumpi\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup2\n  and\n    /* \"XPToken.sol\":3461:3482  factory == address(0) */\n  iszero\n    /* \"XPToken.sol\":3457:3529  if (factory == address(0)) {... */\n  tag_53\n  jumpi\n    /* \"XPToken.sol\":3601:3631  _grantRole(PAUSER_ROLE, admin) */\n  tag_55\n    /* \"XPToken.sol\":3554:3591  _grantRole(DEFAULT_ADMIN_ROLE, admin) */\n  dup3\n  tag_56\n    /* \"XPToken.sol\":3757:3789  _grantRole(BURNER_ROLE, factory) */\n  tag_57\n    /* \"XPToken.sol\":3554:3591  _grantRole(DEFAULT_ADMIN_ROLE, admin) */\n  swap5\n  tag_4\n  jump\t// in\ntag_56:\n  pop\n    /* \"XPToken.sol\":3601:3631  _grantRole(PAUSER_ROLE, admin) */\n  tag_5\n  jump\t// in\ntag_55:\n  pop\n    /* \"XPToken.sol\":3715:3747  _grantRole(MINTER_ROLE, factory) */\n  tag_58\n  dup2\n  tag_6\n  jump\t// in\ntag_58:\n  pop\n    /* \"XPToken.sol\":3757:3789  _grantRole(BURNER_ROLE, factory) */\n  tag_7\n  jump\t// in\ntag_57:\n  pop\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\n    /* \"XPToken.sol\":3457:3529  if (factory == address(0)) {... */\ntag_53:\n    /* \"XPToken.sol\":3424:3437  ZeroAddress() */\n  shl(0xe0, 0xd92e233d)\n  0x00\n    /* \"XPToken.sol\":3505:3518  ZeroAddress() */\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n  0x00\n    /* \"XPToken.sol\":3505:3518  ZeroAddress() */\n  revert\n    /* \"XPToken.sol\":3248:3369  if (bytes(symbol).length == 0) {... */\ntag_49:\n    /* \"XPToken.sol\":3300:3358  InvalidAddress(address(0), \"Token symbol cannot be empty\") */\n  0x84\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mload(0x40)\n    /* \"XPToken.sol\":3172:3228  InvalidAddress(address(0), \"Token name cannot be empty\") */\n  shl(0xe0, 0xf7693c3d)\n    /* \"XPToken.sol\":3300:3358  InvalidAddress(address(0), \"Token symbol cannot be empty\") */\n  dup2\n  mstore\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":3300:3358  InvalidAddress(address(0), \"Token symbol cannot be empty\") */\n  dup3\n  add\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore\n  0x40\n  0x24\n  dup3\n  add\n  mstore\n  0x1c\n  0x44\n  dup3\n  add\n  mstore\n  0x546f6b656e2073796d626f6c2063616e6e6f7420626520656d70747900000000\n  0x64\n  dup3\n  add\n  mstore\n    /* \"XPToken.sol\":3300:3358  InvalidAddress(address(0), \"Token symbol cannot be empty\") */\n  revert\n    /* \"XPToken.sol\":3122:3239  if (bytes(name).length == 0) {... */\ntag_47:\n    /* \"XPToken.sol\":3172:3228  InvalidAddress(address(0), \"Token name cannot be empty\") */\n  0x84\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mload(0x40)\n    /* \"XPToken.sol\":3172:3228  InvalidAddress(address(0), \"Token name cannot be empty\") */\n  shl(0xe0, 0xf7693c3d)\n  dup2\n  mstore\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":3172:3228  InvalidAddress(address(0), \"Token name cannot be empty\") */\n  dup3\n  add\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore\n  0x40\n  0x24\n  dup3\n  add\n  mstore\n  0x1a\n  0x44\n  dup3\n  add\n  mstore\n  0x546f6b656e206e616d652063616e6e6f7420626520656d707479000000000000\n  0x64\n  dup3\n  add\n  mstore\n    /* \"XPToken.sol\":3172:3228  InvalidAddress(address(0), \"Token name cannot be empty\") */\n  revert\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\ntag_44:\n  swap1\n  pop\n  dup4\n  add\n  mload\n  0x00\n  jump(tag_45)\ntag_42:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n  0x00\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  swap1\n  dup2\n  mstore\n  dup2\n  dup2\n  keccak256\n  swap3\n  pop\n  not(0x1f)\n  dup5\n  and\n  swap1\ntag_59:\n  dup2\n  dup2\n  lt\n  tag_60\n  jumpi\n  pop\n  swap1\n  dup4\n  0x01\n  swap5\n  swap4\n  swap3\n  lt\n  tag_62\n  jumpi\ntag_63:\n  pop\n  pop\n  dup2\n  shl\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  sstore\n  jump(tag_46)\ntag_62:\n  dup6\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  jump(tag_63)\ntag_60:\n  swap2\n  swap3\n  0x20\n  0x01\n  dup2\n  swap3\n  dup7\n  dup11\n  add\n  mload\n  dup2\n  sstore\n  add\n  swap5\n  add\n  swap3\n  add\n  jump(tag_59)\ntag_40:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n  0x00\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore\n  0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n  0x1f\n  dup4\n  add\n  0x05\n  shr\n  dup2\n  add\n  swap2\n  0x20\n  dup5\n  lt\n  tag_64\n  jumpi\ntag_65:\n  0x1f\n  add\n  0x05\n  shr\n  add\n  swap1\ntag_66:\n  dup2\n  dup2\n  lt\n  tag_67\n  jumpi\n  pop\n  jump(tag_41)\ntag_67:\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_66)\ntag_64:\n  swap1\n  swap2\n  pop\n  dup2\n  swap1\n  jump(tag_65)\ntag_38:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x22\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore\n  revert(0x00, 0x24)\ntag_36:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_37)\ntag_34:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x41\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore\n  revert(0x00, 0x24)\ntag_31:\n  swap1\n  pop\n  dup3\n  add\n  mload\n  0x00\n  jump(tag_32)\ntag_29:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n  0x00\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  swap1\n  dup2\n  mstore\n  dup2\n  dup2\n  keccak256\n  swap3\n  pop\n  not(0x1f)\n  dup5\n  and\n  swap1\ntag_69:\n  dup2\n  dup2\n  lt\n  tag_70\n  jumpi\n  pop\n  swap1\n  dup4\n  0x01\n  swap5\n  swap4\n  swap3\n  lt\n  tag_72\n  jumpi\ntag_73:\n  pop\n  pop\n  dup2\n  shl\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  sstore\n  jump(tag_33)\ntag_72:\n  dup5\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  jump(tag_73)\ntag_70:\n  swap2\n  swap3\n  0x20\n  0x01\n  dup2\n  swap3\n  dup7\n  dup10\n  add\n  mload\n  dup2\n  sstore\n  add\n  swap5\n  add\n  swap3\n  add\n  jump(tag_69)\ntag_27:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n  0x00\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  mstore\n  0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n  0x1f\n  dup4\n  add\n  0x05\n  shr\n  dup2\n  add\n  swap2\n  0x20\n  dup5\n  lt\n  tag_74\n  jumpi\ntag_75:\n  0x1f\n  add\n  0x05\n  shr\n  add\n  swap1\ntag_76:\n  dup2\n  dup2\n  lt\n  tag_77\n  jumpi\n  pop\n  jump(tag_28)\ntag_77:\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_76)\ntag_74:\n  swap1\n  swap2\n  pop\n  dup2\n  swap1\n  jump(tag_75)\ntag_23:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_24)\ntag_16:\n  0x00\n  dup1\n  revert\ntag_1:\n  mload(0x40)\n  swap2\n  swap1\n  0x1f\n  add\n  not(0x1f)\n  and\n  dup3\n  add\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  dup4\n  dup3\n  lt\n  or\n  tag_34\n  jumpi\n  0x40\n  mstore\n  jump\t// out\ntag_2:\n  dup2\n  0x1f\n  dup3\n  add\n  slt\n  iszero\n  tag_16\n  jumpi\n  dup1\n  mload\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  tag_34\n  jumpi\n  tag_85\n  0x1f\n  dup4\n  add\n  not(0x1f)\n  and\n  0x20\n  add\n  tag_1\n  jump\t// in\ntag_85:\n  swap3\n  dup3\n  dup5\n  mstore\n  0x20\n  dup4\n  dup4\n  add\n  add\n  gt\n  tag_16\n  jumpi\n  dup2\n  0x00\n  swap3\n  0x20\n  dup1\n  swap4\n  add\n  dup4\n  dup7\n  add\n  mcopy\n  dup4\n  add\n  add\n  mstore\n  swap1\n  jump\t// out\ntag_3:\n  mload\n  swap1\n  sub(shl(0xa0, 0x01), 0x01)\n  dup3\n  and\n  dup3\n  sub\n  tag_16\n  jumpi\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\ntag_4:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup2\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_d08c889a2b804c67887cd70e57ff036e6bc341281711f6587c117607d171d093, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n  tag_90\n  jumpi\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n  0x00\n  dup2\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_d08c889a2b804c67887cd70e57ff036e6bc341281711f6587c117607d171d093, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  dup1\n  sload\n  not(0xff)\n  and\n  0x01\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n  swap2\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  swap1\n  mload(0x00)\n  codecopy(0x00, data_01400fe2f234cf888b5e4c66700c7903f33f31bfc9675e51cb0119f915eb534d, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  dup2\n  dup1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6272:6489  if (!hasRole(role, account)) {... */\ntag_90:\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6466:6478  return false */\n  pop\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  0x00\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6466:6478  return false */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\ntag_5:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup2\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_d85980d215817c0b8e163b3ada55f1a92595fce2b7e9762f86dab2a6e2821760, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n  tag_90\n  jumpi\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n  0x00\n  dup2\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_d85980d215817c0b8e163b3ada55f1a92595fce2b7e9762f86dab2a6e2821760, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  dup1\n  sload\n  not(0xff)\n  and\n  0x01\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n  swap2\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  swap1\n    /* \"XPToken.sol\":779:803  keccak256(\"PAUSER_ROLE\") */\n  0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a\n  swap1\n  mload(0x00)\n  codecopy(0x00, data_01400fe2f234cf888b5e4c66700c7903f33f31bfc9675e51cb0119f915eb534d, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  swap1\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\ntag_6:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup2\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_014e9b15b95b23bb1237d5a4068b884f1a9e0fed3b2f5a7f00a00e8a8e130008, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n  tag_90\n  jumpi\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n  0x00\n  dup2\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_014e9b15b95b23bb1237d5a4068b884f1a9e0fed3b2f5a7f00a00e8a8e130008, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  dup1\n  sload\n  not(0xff)\n  and\n  0x01\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n  swap2\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  swap1\n    /* \"XPToken.sol\":711:735  keccak256(\"MINTER_ROLE\") */\n  0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\n  swap1\n  mload(0x00)\n  codecopy(0x00, data_01400fe2f234cf888b5e4c66700c7903f33f31bfc9675e51cb0119f915eb534d, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  swap1\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\ntag_7:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup2\n  and\n  0x00\n  swap1\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_2aa3fe5c7bf9c3d841807cf5fc1261067c392eab3054a316764bd8ba07e437f8, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n  0xff\n  and\n  tag_90\n  jumpi\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n  0x00\n  dup2\n  dup2\n  mstore\n  mload(0x00)\n  codecopy(0x00, data_2aa3fe5c7bf9c3d841807cf5fc1261067c392eab3054a316764bd8ba07e437f8, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n  0x20\n  mstore\n  0x40\n  dup2\n  keccak256\n  dup1\n  sload\n  not(0xff)\n  and\n  0x01\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n  caller\n  swap2\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  swap1\n    /* \"XPToken.sol\":847:871  keccak256(\"BURNER_ROLE\") */\n  0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\n  swap1\n  mload(0x00)\n  codecopy(0x00, data_01400fe2f234cf888b5e4c66700c7903f33f31bfc9675e51cb0119f915eb534d, 0x20)\n  mload(0x00)\n  swap1\n  0x00\n  mstore\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  swap1\n    /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n  dup1\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n  log4\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n  0x01\n    /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n  swap1\n  jump\t// out\nstop\ndata_01400fe2f234cf888b5e4c66700c7903f33f31bfc9675e51cb0119f915eb534d 2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\ndata_014e9b15b95b23bb1237d5a4068b884f1a9e0fed3b2f5a7f00a00e8a8e130008 15a28d26fa1bf736cf7edc9922607171ccb09c3c73b808e7772a3013e068a522\ndata_2aa3fe5c7bf9c3d841807cf5fc1261067c392eab3054a316764bd8ba07e437f8 847f481f687befb06ed3511f1a8dcef57e83007c0147ae5047583d7056170937\ndata_d08c889a2b804c67887cd70e57ff036e6bc341281711f6587c117607d171d093 05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc\ndata_d85980d215817c0b8e163b3ada55f1a92595fce2b7e9762f86dab2a6e2821760 99f2891db7a8db76249871a02b43b68c0bb8f22ef8a3bc1034ae9375ef6b7c3c\n\nsub_0: assembly {\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_17, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_17:\n      0x00\n      swap1\n      shr(0xe0, calldataload(0x00))\n      swap1\n      dup2\n      0x01ffc9a7\n      eq\n      tag_19\n      jumpi\n      pop\n      dup1\n      0x06fdde03\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_27\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x282c51f3\n      eq\n      tag_31\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_33\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_35\n      jumpi\n      dup1\n      0x35ab5f64\n      eq\n      tag_37\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_39\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_41\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_43\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_45\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_47\n      jumpi\n      dup1\n      0x5cb0c16f\n      eq\n      tag_49\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_51\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_53\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_55\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_57\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_59\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_61\n      jumpi\n      dup1\n      0xa2309ff8\n      eq\n      tag_63\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_65\n      jumpi\n      dup1\n      0xb028d807\n      eq\n      tag_67\n      jumpi\n      dup1\n      0xc59d4847\n      eq\n      tag_69\n      jumpi\n      dup1\n      0xd5391393\n      eq\n      tag_71\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_73\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_75\n      jumpi\n      0xe63ab1e9\n      eq\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x20\n      mload(0x40)\n        /* \"XPToken.sol\":779:803  keccak256(\"PAUSER_ROLE\") */\n      0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_81:\n      dup1\n      revert\n    tag_75:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x40))\n      0x40\n      tag_87\n      tag_2\n      jump\t// in\n    tag_87:\n      swap2\n      tag_88\n      tag_3\n      jump\t// in\n    tag_88:\n      swap3\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3649  _allowances */\n      0x01\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3638:3665  _allowances[owner][spender] */\n      swap1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_73:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x40))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4747:4773  _revokeRole(role, account) */\n      tag_93\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      calldataload(0x04)\n      tag_94\n      tag_3\n      jump\t// in\n    tag_94:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4717:4735  getRoleAdmin(role) */\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      tag_95\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4717:4735  getRoleAdmin(role) */\n      tag_96\n      dup3\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3907  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      0x01\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256(0x00, 0x40)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3810:3930  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4717:4735  getRoleAdmin(role) */\n    tag_96:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      tag_11\n      jump\t// in\n    tag_95:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4747:4773  _revokeRole(role, account) */\n      tag_13\n      jump\t// in\n    tag_93:\n      pop\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_71:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x20\n      mload(0x40)\n        /* \"XPToken.sol\":711:735  keccak256(\"MINTER_ROLE\") */\n      0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_69:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x60\n        /* \"XPToken.sol\":7690:7701  totalMinted */\n      0x08\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":7703:7720  totalBurnedAmount */\n      0x09\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      swap1\n      mload(0x40)\n      swap3\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      mstore\n      0x40\n      dup3\n      add\n      mstore\n      return\n    tag_67:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x40))\n      tag_109\n      tag_2\n      jump\t// in\n    tag_109:\n      calldataload(0x24)\n        /* \"XPToken.sol\":5671:5675  this */\n      swap1\n      address\n        /* \"XPToken.sol\":5649:5659  msg.sender */\n      caller\n        /* \"XPToken.sol\":5649:5676  msg.sender == address(this) */\n      sub\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      tag_110\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7509:7530  account == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n      tag_112\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      dup5\n      swap3\n      tag_114\n      tag_14\n      jump\t// in\n    tag_114:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      tag_115\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      tag_6\n      jump\t// in\n    tag_115:\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n      dup5\n      dup5\n      mstore\n      dup4\n      dup3\n      mstore\n      0x40\n      dup5\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      log3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n    tag_112:\n      shl(0xe0, 0xec442f05)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      dup4\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      dup4\n      swap1\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      dup4\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_110:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x16\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x52, 0x13db9b1e481cd95b198b58d85b1b08185b1b1bddd959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_65:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x40))\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3440:3445  value */\n      tag_120\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      tag_121\n      tag_2\n      jump\t// in\n    tag_121:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3440:3445  value */\n      tag_9\n      jump\t// in\n    tag_120:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n      return\n    tag_63:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x20\n        /* \"XPToken.sol\":931:957  uint256 public totalMinted */\n      0x08\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_61:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x20\n      swap1\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_59:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      mload(0x40)\n      swap1\n      dup1\n      sload(0x04)\n      swap1\n      dup2\n      0x01\n      shr\n      swap2\n      0x01\n      dup2\n      and\n      dup1\n      iszero\n      tag_134\n      jumpi\n    tag_135:\n      0x20\n      dup5\n      lt\n      dup2\n      eq\n      tag_136\n      jumpi\n      dup4\n      dup7\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_138\n      jumpi\n      pop\n      0x01\n      eq\n      tag_140\n      jumpi\n    tag_141:\n      tag_142\n      dup5\n      tag_143\n      dup2\n      dup7\n      sub\n      dup3\n      tag_4\n      jump\t// in\n    tag_143:\n      mload(0x40)\n      swap2\n      dup3\n      swap2\n      0x20\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap1\n      tag_1\n      jump\t// in\n    tag_142:\n      sub\n      swap1\n      return\n    tag_140:\n      0x04\n      dup2\n      mstore\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n      swap4\n      swap3\n      pop\n      swap1\n    tag_144:\n      dup1\n      dup3\n      lt\n      tag_145\n      jumpi\n      pop\n      swap1\n      swap2\n      pop\n      dup2\n      add\n      0x20\n      add\n      tag_143\n      dup3\n      jump(tag_141)\n    tag_145:\n      swap2\n      swap3\n      0x01\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup9\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap3\n      swap2\n      jump(tag_144)\n    tag_138:\n      not(0xff)\n      and\n      0x20\n      dup1\n      dup8\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap3\n      iszero\n      iszero\n      0x05\n      shl\n      dup6\n      add\n      swap1\n      swap3\n      add\n      swap3\n      pop\n      tag_143\n      swap2\n      pop\n      dup4\n      swap1\n      pop\n      jump(tag_141)\n    tag_136:\n      shl(0xe0, 0x4e487b71)\n      dup4\n      mstore\n      mstore(0x04, 0x22)\n      0x24\n      dup4\n      revert\n    tag_134:\n      swap3\n      0x7f\n      and\n      swap3\n      jump(tag_135)\n    tag_57:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x40))\n      0x40\n      tag_151\n      tag_3\n      jump\t// in\n    tag_151:\n      swap2\n      calldataload(0x04)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2983  _roles[role].hasRole[account] */\n      swap1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      0x20\n      and(sload(keccak256(0x00, 0x40)), 0xff)\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_55:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      tag_156\n      tag_10\n      jump\t// in\n    tag_156:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_157\n      tag_14\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2408:2412  true */\n      0x01\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      not(0xff)\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2398:2412  _paused = true */\n      0x06\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      and\n      or\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2398:2412  _paused = true */\n      0x06\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2427:2447  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2427:2447  Paused(_msgSender()) */\n      log1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup1\n      return\n    tag_53:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x40))\n      tag_162\n      tag_2\n      jump\t// in\n    tag_162:\n        /* \"XPToken.sol\":847:871  keccak256(\"BURNER_ROLE\") */\n      0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap1\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      calldataload(0x24)\n      swap2\n      swap1\n      0xff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3519:3542  !hasRole(role, account) */\n      iszero\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n      tag_163\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_165\n      tag_14\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2466:2569  modifier nonReentrant() {... */\n      tag_166\n      tag_15\n      jump\t// in\n    tag_166:\n        /* \"XPToken.sol\":6655:6666  amount == 0 */\n      dup2\n      iszero\n        /* \"XPToken.sol\":6651:6687  if (amount == 0) revert ZeroAmount() */\n      tag_167\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup2\n      and\n      swap1\n      dup2\n      dup5\n      mstore\n      dup4\n      0x20\n      mstore\n      dup3\n      0x40\n      dup6\n      keccak256\n      sload\n        /* \"XPToken.sol\":6701:6725  balanceOf(from) < amount */\n      lt\n        /* \"XPToken.sol\":6697:6784  if (balanceOf(from) < amount) revert InsufficientBalance(from, amount, balanceOf(from)) */\n      tag_169\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n        /* \"XPToken.sol\":6852:6858  amount */\n      tag_171\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap2\n        /* \"XPToken.sol\":6803:6830  totalBurnedAmount += amount */\n      tag_172\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n        /* \"XPToken.sol\":6803:6830  totalBurnedAmount += amount */\n      0x09\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":6803:6830  totalBurnedAmount += amount */\n      tag_6\n      jump\t// in\n    tag_172:\n      0x09\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"XPToken.sol\":6852:6858  amount */\n      tag_16\n      jump\t// in\n    tag_171:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n        /* \"XPToken.sol\":6883:6921  TokensBurned(from, amount, msg.sender) */\n      0x08009940fb138ae33fbb70c10b643e840c71f1654344cc173975a815e117e687\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":6883:6921  TokensBurned(from, amount, msg.sender) */\n      swap4\n      log3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":3068:3089  _status = NOT_ENTERED */\n      0x07\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n        /* \"XPToken.sol\":6697:6784  if (balanceOf(from) < amount) revert InsufficientBalance(from, amount, balanceOf(from)) */\n    tag_169:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      pop\n      dup3\n      swap2\n      dup2\n      0x64\n      swap5\n      mstore\n      dup3\n      0x20\n      mstore\n      0x40\n      dup4\n      keccak256\n      sload\n        /* \"XPToken.sol\":6094:6156  InsufficientBalance(msg.sender, amount, balanceOf(msg.sender)) */\n      swap2\n      shl(0xe0, 0xdb42144d)\n        /* \"XPToken.sol\":6734:6784  InsufficientBalance(from, amount, balanceOf(from)) */\n      dup5\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n        /* \"XPToken.sol\":6734:6784  InsufficientBalance(from, amount, balanceOf(from)) */\n      revert\n        /* \"XPToken.sol\":6651:6687  if (amount == 0) revert ZeroAmount() */\n    tag_167:\n      shl(0xe0, 0x1f2a2005)\n        /* \"XPToken.sol\":6675:6687  ZeroAmount() */\n      dup4\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"XPToken.sol\":4329:4341  ZeroAmount() */\n      dup4\n        /* \"XPToken.sol\":6675:6687  ZeroAmount() */\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n    tag_163:\n      shl(0xe0, 0xe2517d3f)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      dup4\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      mstore\n        /* \"XPToken.sol\":847:871  keccak256(\"BURNER_ROLE\") */\n      0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x24\n      mstore\n      0x44\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      dup4\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_51:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      swap1\n      0x40\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_177\n      tag_2\n      jump\t// in\n    tag_177:\n      and\n      dup2\n      mstore\n      dup1\n      dup4\n      mstore\n      keccak256\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_49:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_47:\n      pop\n      jumpi(tag_81, callvalue)\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_81\n      jumpi\n      0x20\n      0xff\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x06\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      and\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_45:\n      pop\n      jumpi(tag_81, callvalue)\n      jumpi(tag_81, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_190\n      tag_14\n      jump\t// in\n    tag_190:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2466:2569  modifier nonReentrant() {... */\n      tag_191\n      tag_15\n      jump\t// in\n    tag_191:\n        /* \"XPToken.sol\":6009:6020  amount == 0 */\n      dup1\n      iszero\n        /* \"XPToken.sol\":6005:6041  if (amount == 0) revert ZeroAmount() */\n      tag_192\n      jumpi\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      mstore\n      dup2\n      0x20\n      mstore\n      dup1\n      0x40\n      dup4\n      keccak256\n      sload\n        /* \"XPToken.sol\":6055:6085  balanceOf(msg.sender) < amount */\n      lt\n        /* \"XPToken.sol\":6051:6156  if (balanceOf(msg.sender) < amount) revert InsufficientBalance(msg.sender, amount, balanceOf(msg.sender)) */\n      tag_194\n      jumpi\n        /* \"XPToken.sol\":6175:6202  totalBurnedAmount += amount */\n      tag_196\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"XPToken.sol\":6175:6202  totalBurnedAmount += amount */\n      0x09\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":6175:6202  totalBurnedAmount += amount */\n      tag_6\n      jump\t// in\n    tag_196:\n      0x09\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"XPToken.sol\":6230:6236  amount */\n      tag_197\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      dup2\n      caller\n        /* \"XPToken.sol\":6230:6236  amount */\n      tag_16\n      jump\t// in\n    tag_197:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      caller\n      swap1\n        /* \"XPToken.sol\":6261:6305  TokensBurned(msg.sender, amount, msg.sender) */\n      0x08009940fb138ae33fbb70c10b643e840c71f1654344cc173975a815e117e687\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      caller\n        /* \"XPToken.sol\":6261:6305  TokensBurned(msg.sender, amount, msg.sender) */\n      swap3\n      log3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":3068:3089  _status = NOT_ENTERED */\n      0x07\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n        /* \"XPToken.sol\":6051:6156  if (balanceOf(msg.sender) < amount) revert InsufficientBalance(msg.sender, amount, balanceOf(msg.sender)) */\n    tag_194:\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      swap1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x64\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      swap2\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      mstore\n      dup2\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n      sload\n        /* \"XPToken.sol\":6094:6156  InsufficientBalance(msg.sender, amount, balanceOf(msg.sender)) */\n      swap1\n      shl(0xe0, 0xdb42144d)\n      dup4\n      mstore\n        /* \"XPToken.sol\":6065:6075  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n        /* \"XPToken.sol\":6094:6156  InsufficientBalance(msg.sender, amount, balanceOf(msg.sender)) */\n      revert\n        /* \"XPToken.sol\":6005:6041  if (amount == 0) revert ZeroAmount() */\n    tag_192:\n      shl(0xe0, 0x1f2a2005)\n        /* \"XPToken.sol\":6029:6041  ZeroAmount() */\n      dup3\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"XPToken.sol\":4329:4341  ZeroAmount() */\n      dup3\n        /* \"XPToken.sol\":6029:6041  ZeroAmount() */\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_43:\n      pop\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x40))\n      tag_202\n      tag_2\n      jump\t// in\n    tag_202:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n      swap1\n      dup2\n      mstore\n      mstore(0x20, 0x15a28d26fa1bf736cf7edc9922607171ccb09c3c73b808e7772a3013e068a522)\n      0x40\n      swap1\n      keccak256\n      sload\n      calldataload(0x24)\n      swap3\n      swap2\n      swap1\n      0xff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3519:3542  !hasRole(role, account) */\n      iszero\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n      tag_203\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_205\n      tag_14\n      jump\t// in\n    tag_205:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2466:2569  modifier nonReentrant() {... */\n      tag_206\n      tag_15\n      jump\t// in\n    tag_206:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      and\n      swap1\n        /* \"XPToken.sol\":4219:4235  to == address(0) */\n      dup2\n      iszero\n        /* \"XPToken.sol\":4215:4282  if (to == address(0)) {... */\n      tag_207\n      jumpi\n        /* \"XPToken.sol\":4295:4306  amount == 0 */\n      dup3\n      iszero\n        /* \"XPToken.sol\":4291:4352  if (amount == 0) {... */\n      tag_209\n      jumpi\n        /* \"XPToken.sol\":4453:4457  this */\n      address\n        /* \"XPToken.sol\":4439:4458  to == address(this) */\n      dup3\n      eq\n        /* \"XPToken.sol\":4435:4544  if (to == address(this)) {... */\n      tag_211\n      jumpi\n        /* \"XPToken.sol\":4643:4665  totalSupply() + amount */\n      tag_213\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":4643:4665  totalSupply() + amount */\n      tag_6\n      jump\t// in\n    tag_213:\n      sub(shl(0xff, 0x01), 0x01)\n        /* \"XPToken.sol\":4761:4787  newTotalSupply > maxSupply */\n      dup2\n      gt\n        /* \"XPToken.sol\":4757:4872  if (newTotalSupply > maxSupply) {... */\n      tag_214\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      pop\n        /* \"XPToken.sol\":4950:4971  totalMinted += amount */\n      tag_216\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup4\n        /* \"XPToken.sol\":4950:4971  totalMinted += amount */\n      0x08\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":4950:4971  totalMinted += amount */\n      tag_6\n      jump\t// in\n    tag_216:\n      0x08\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"XPToken.sol\":4453:4457  this */\n      address\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      extcodesize\n      iszero\n      tag_217\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0xb028d807)\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      dup2\n      mstore\n      dup3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      dup3\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      dup4\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n        /* \"XPToken.sol\":4453:4457  this */\n      dup2\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      0x44\n        /* \"XPToken.sol\":4453:4457  this */\n      dup2\n      dup4\n      address\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      gas\n      call\n      swap1\n      dup2\n      tag_219\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_220:\n      pop\n        /* \"XPToken.sol\":4990:5475  try this._performMint(to, amount) {... */\n      tag_221\n      jumpi\n      dup1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      jumpi(tag_223, gt(returndatasize, 0x03))\n        /* \"XPToken.sol\":4990:5475  try this._performMint(to, amount) {... */\n    tag_224:\n      pop\n      0x08c379a0\n      eq\n      tag_225\n      jumpi\n    tag_226:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"XPToken.sol\":5366:5387  totalMinted -= amount */\n      tag_227\n        /* \"XPToken.sol\":5408:5464  MintOperationFailed(to, amount, \"Unknown minting error\") */\n      0xa4\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap4\n        /* \"XPToken.sol\":4950:4971  totalMinted += amount */\n      0x08\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":5366:5387  totalMinted -= amount */\n      tag_8\n      jump\t// in\n    tag_227:\n      pop\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"XPToken.sol\":5238:5277  MintOperationFailed(to, amount, reason) */\n      swap2\n      shl(0xe0, 0xe6921fc1)\n        /* \"XPToken.sol\":5408:5464  MintOperationFailed(to, amount, \"Unknown minting error\") */\n      dup4\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"XPToken.sol\":5408:5464  MintOperationFailed(to, amount, \"Unknown minting error\") */\n      dup4\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x60\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      0x44\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n      0x15\n      0x64\n      dup3\n      add\n      mstore\n      shl(0x59, 0x2ab735b737bbb71036b4b73a34b7339032b93937b9)\n      0x84\n      dup3\n      add\n      mstore\n        /* \"XPToken.sol\":5408:5464  MintOperationFailed(to, amount, \"Unknown minting error\") */\n      revert\n        /* \"XPToken.sol\":4990:5475  try this._performMint(to, amount) {... */\n    tag_225:\n        /* \"XPToken.sol\":5091:5288  catch Error(string memory reason) {... */\n      tag_228\n      tag_7\n      jump\t// in\n    tag_228:\n      dup1\n      tag_229\n      jumpi\n        /* \"XPToken.sol\":4990:5475  try this._performMint(to, amount) {... */\n      pop\n      jump(tag_226)\n        /* \"XPToken.sol\":5091:5288  catch Error(string memory reason) {... */\n    tag_229:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      tag_231\n      swap1\n        /* \"XPToken.sol\":5196:5217  totalMinted -= amount */\n      tag_232\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup5\n        /* \"XPToken.sol\":4950:4971  totalMinted += amount */\n      0x08\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"XPToken.sol\":5196:5217  totalMinted -= amount */\n      tag_8\n      jump\t// in\n    tag_232:\n      pop\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mload(0x40)\n        /* \"XPToken.sol\":5238:5277  MintOperationFailed(to, amount, reason) */\n      swap4\n      dup5\n      swap4\n      shl(0xe0, 0xe6921fc1)\n      dup6\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"XPToken.sol\":5238:5277  MintOperationFailed(to, amount, reason) */\n      dup6\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup5\n      add\n      mstore\n      0x60\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      0x44\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup5\n      add\n      mstore\n      0x64\n      dup4\n      add\n      swap1\n      tag_1\n      jump\t// in\n    tag_231:\n        /* \"XPToken.sol\":5238:5277  MintOperationFailed(to, amount, reason) */\n      sub\n      swap1\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_223:\n      swap1\n      pop\n      0x04\n      dup2\n      dup1\n      returndatacopy\n      mload\n      0xe0\n      shr\n      0x00\n      jump(tag_224)\n        /* \"XPToken.sol\":4990:5475  try this._performMint(to, amount) {... */\n    tag_221:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap2\n      swap1\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n        /* \"XPToken.sol\":5043:5079  TokensMinted(to, amount, msg.sender) */\n      0x969cd201f68f120baff2bf3c59bc3b534434e08b69a71a14ab85cb79cd3b63e4\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":5043:5079  TokensMinted(to, amount, msg.sender) */\n      swap4\n      log3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":3068:3089  _status = NOT_ENTERED */\n      0x07\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n      dup1\n      return\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n    tag_219:\n      tag_233\n      swap2\n      swap3\n      pop\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      swap1\n      tag_4\n      jump\t// in\n    tag_233:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"XPToken.sol\":4994:5023  this._performMint(to, amount) */\n      swap1\n      0x00\n      jump(tag_220)\n    tag_217:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n      dup1\n      revert\n        /* \"XPToken.sol\":4757:4872  if (newTotalSupply > maxSupply) {... */\n    tag_214:\n      shl(0xe0, 0x594a20b7)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"XPToken.sol\":4810:4861  TotalSupplyLimitExceeded(newTotalSupply, maxSupply) */\n      swap1\n      dup2\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      swap2\n      swap1\n      swap2\n      mstore\n      mstore(0x24, sub(shl(0xff, 0x01), 0x01))\n      0x44\n      swap1\n        /* \"XPToken.sol\":4810:4861  TotalSupplyLimitExceeded(newTotalSupply, maxSupply) */\n      revert\n        /* \"XPToken.sol\":4435:4544  if (to == address(this)) {... */\n    tag_211:\n        /* \"XPToken.sol\":4481:4533  InvalidAddress(to, \"Cannot mint to contract itself\") */\n      0x84\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      mload(0x40)\n        /* \"XPToken.sol\":4481:4533  InvalidAddress(to, \"Cannot mint to contract itself\") */\n      swap1\n      shl(0xe0, 0xf7693c3d)\n      dup3\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n        /* \"XPToken.sol\":4481:4533  InvalidAddress(to, \"Cannot mint to contract itself\") */\n      dup3\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x40\n      0x24\n      dup3\n      add\n      mstore\n      0x1e\n      0x44\n      dup3\n      add\n      mstore\n      0x43616e6e6f74206d696e7420746f20636f6e747261637420697473656c660000\n      0x64\n      dup3\n      add\n      mstore\n        /* \"XPToken.sol\":4481:4533  InvalidAddress(to, \"Cannot mint to contract itself\") */\n      revert\n        /* \"XPToken.sol\":4291:4352  if (amount == 0) {... */\n    tag_209:\n        /* \"XPToken.sol\":4329:4341  ZeroAmount() */\n      shl(0xe0, 0x1f2a2005)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"XPToken.sol\":4329:4341  ZeroAmount() */\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      0x00\n        /* \"XPToken.sol\":4329:4341  ZeroAmount() */\n      revert\n        /* \"XPToken.sol\":4215:4282  if (to == address(0)) {... */\n    tag_207:\n        /* \"XPToken.sol\":4258:4271  ZeroAddress() */\n      shl(0xe0, 0xd92e233d)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"XPToken.sol\":4258:4271  ZeroAddress() */\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      0x00\n        /* \"XPToken.sol\":4258:4271  ZeroAddress() */\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n    tag_203:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      shl(0xe0, 0xe2517d3f)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      mstore\n        /* \"XPToken.sol\":711:735  keccak256(\"MINTER_ROLE\") */\n      0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x24\n      mstore\n      0x44\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_41:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      tag_238\n      tag_10\n      jump\t// in\n    tag_238:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x06\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      0xff\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2140:2149  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2136:2198  if (!paused()) {... */\n      tag_239\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x06\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2674:2696  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2674:2696  Unpaused(_msgSender()) */\n      log1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      stop\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2136:2198  if (!paused()) {... */\n    tag_239:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2172:2187  ExpectedPause() */\n      shl(0xe0, 0x8dfc202b)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2172:2187  ExpectedPause() */\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2172:2187  ExpectedPause() */\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_39:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x40))\n      tag_245\n      tag_3\n      jump\t// in\n    tag_245:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5421:5455  callerConfirmation != _msgSender() */\n      sub\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5417:5519  if (callerConfirmation != _msgSender()) {... */\n      tag_246\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5529:5566  _revokeRole(role, callerConfirmation) */\n      tag_248\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap1\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5529:5566  _revokeRole(role, callerConfirmation) */\n      tag_13\n      jump\t// in\n    tag_248:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      stop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5417:5519  if (callerConfirmation != _msgSender()) {... */\n    tag_246:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5478:5508  AccessControlBadConfirmation() */\n      shl(0xe1, 0x334bd919)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5478:5508  AccessControlBadConfirmation() */\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":5478:5508  AccessControlBadConfirmation() */\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_37:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"XPToken.sol\":963:995  uint256 public totalBurnedAmount */\n      0x09\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_35:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n      0x12\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_33:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x40))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4330:4355  _grantRole(role, account) */\n      tag_248\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      calldataload(0x04)\n      tag_262\n      tag_3\n      jump\t// in\n    tag_262:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4300:4318  getRoleAdmin(role) */\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n      tag_263\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4300:4318  getRoleAdmin(role) */\n      tag_96\n      dup3\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3907  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      0x01\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256(0x00, 0x40)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3810:3930  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2475:2479  role */\n    tag_263:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":4330:4355  _grantRole(role, account) */\n      tag_12\n      jump\t// in\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_31:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      mload(0x40)\n        /* \"XPToken.sol\":847:871  keccak256(\"BURNER_ROLE\") */\n      0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_29:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      tag_273\n      mstore(0x00, calldataload(0x04))\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3907  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      0x01\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256(0x00, 0x40)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3901:3923  _roles[role].adminRole */\n      add\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3810:3930  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {... */\n      swap1\n      jump\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_273:\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_27:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x60))\n      tag_278\n      tag_2\n      jump\t// in\n    tag_278:\n      tag_279\n      tag_3\n      jump\t// in\n    tag_279:\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n      0x01\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      swap1\n      swap3\n      calldataload(0x44)\n      swap3\n      swap2\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10561:10597  currentAllowance < type(uint256).max */\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n      tag_280\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_281:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4967:4972  value */\n      pop\n      tag_120\n      swap4\n      pop\n      tag_9\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n    tag_280:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10617:10641  currentAllowance < value */\n      dup4\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10613:10743  if (currentAllowance < value) {... */\n      tag_283\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9794:9813  owner == address(0) */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n      tag_285\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9892:9913  spender == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n      tag_287\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4967:4972  value */\n      tag_120\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap5\n      0x00\n      mstore\n      mstore(0x20, 0x01)\n      keccak256(0x00, 0x40)\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      dup4\n      keccak256(0x00, 0x40)\n      swap2\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n      dup5\n      jump(tag_281)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n    tag_287:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      shl(0xe1, 0x4a1406b1)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n    tag_285:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      shl(0xe0, 0xe602df05)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      mstore\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10613:10743  if (currentAllowance < value) {... */\n    tag_283:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      dup4\n      swap1\n      shl(0xe1, 0x7dc7a0d9)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      revert\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_25:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_23:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x40))\n      tag_297\n      tag_2\n      jump\t// in\n    tag_297:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9794:9813  owner == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n      tag_285\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      and\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9892:9913  spender == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n      tag_287\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n      mstore\n      mstore(0x20, 0x01)\n      keccak256(0x00, 0x40)\n      dup3\n      0x00\n      mstore\n      0x20\n      mstore\n      dup1\n      keccak256(0x00, 0x40)\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      swap3\n      log3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n      return\n    tag_21:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1837:1842  _name */\n      0x03\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      dup1\n      0x01\n      shr\n      swap1\n      0x01\n      dup2\n      and\n      dup1\n      iszero\n      tag_306\n      jumpi\n    tag_307:\n      0x20\n      dup4\n      lt\n      dup2\n      eq\n      tag_308\n      jumpi\n      dup3\n      dup6\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_310\n      jumpi\n      pop\n      0x01\n      eq\n      tag_312\n      jumpi\n    tag_313:\n      tag_142\n      dup4\n      tag_143\n      dup2\n      dup6\n      sub\n      dup3\n      tag_4\n      jump\t// in\n    tag_312:\n      swap2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1837:1842  _name */\n      0x03\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n      mstore\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n      swap2\n      0x00\n      swap1\n    tag_316:\n      dup1\n      dup3\n      lt\n      tag_317\n      jumpi\n      pop\n      swap1\n      swap2\n      pop\n      dup2\n      add\n      0x20\n      add\n      tag_143\n      jump(tag_313)\n    tag_317:\n      swap2\n      swap3\n      0x01\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup9\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap3\n      swap2\n      jump(tag_316)\n    tag_310:\n      not(0xff)\n      and\n      0x20\n      dup1\n      dup7\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap2\n      iszero\n      iszero\n      0x05\n      shl\n      dup5\n      add\n      swap1\n      swap2\n      add\n      swap2\n      pop\n      tag_143\n      swap1\n      pop\n      jump(tag_313)\n    tag_308:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x22)\n      revert(0x00, 0x24)\n    tag_306:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_307)\n    tag_19:\n      jumpi(tag_217, callvalue)\n      jumpi(tag_217, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n      swap1\n      shl(0xe0, 0xffffffff)\n      dup3\n      and\n      dup1\n      swap3\n      sub\n      tag_217\n      jumpi\n      0x20\n      swap2\n      shl(0xe0, 0x7965db0b)\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2720  interfaceId == type(IAccessControl).interfaceId */\n      dup2\n      eq\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2760  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      dup2\n      iszero\n      tag_325\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_326:\n      pop\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2760  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n    tag_325:\n      shl(0xe0, 0x01ffc9a7)\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":862:902  interfaceId == type(IERC165).interfaceId */\n      eq\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2673:2760  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      dup4\n      jump(tag_326)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n    tag_1:\n      dup1\n      mload\n      dup1\n      dup4\n      mstore\n      0x20\n      swap3\n      swap2\n      dup2\n      swap1\n      dup5\n      add\n      dup5\n      dup5\n      add\n      mcopy\n      0x00\n      dup3\n      dup3\n      add\n      dup5\n      add\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_217\n      jumpi\n      jump\t// out\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_217\n      jumpi\n      jump\t// out\n    tag_4:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_331\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_331:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_6:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_333\n      jumpi\n      jump\t// out\n    tag_333:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_7:\n      0x00\n      jumpi(tag_343, lt(returndatasize, 0x44))\n      mload(0x40)\n      add(not(0x03), returndatasize)\n      0x04\n      dup3\n      returndatacopy\n      dup1\n      mload\n      swap2\n      returndatasize\n      0x24\n      dup5\n      add\n      gt\n      0xffffffffffffffff\n      dup5\n      gt\n      or\n      tag_337\n      jumpi\n      dup3\n      dup3\n      add\n      swap3\n      dup4\n      mload\n      swap2\n      0xffffffffffffffff\n      dup4\n      gt\n      tag_341\n      jumpi\n      returndatasize\n      dup5\n      add\n      not(0x03)\n      add\n      dup6\n      dup5\n      add\n      0x20\n      add\n      gt\n      tag_341\n      jumpi\n      pop\n      tag_343\n      swap3\n      swap2\n      add\n      0x20\n      add\n      swap1\n      tag_4\n      jump\t// in\n    tag_343:\n      swap1\n      jump\t// out\n    tag_341:\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_337:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_8:\n      swap2\n      swap1\n      dup3\n      sub\n      swap2\n      dup3\n      gt\n      tag_333\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5374:5674  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_9:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      and\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5457:5475  from == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5453:5539  if (from == address(0)) {... */\n      tag_346\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5552:5568  to == address(0) */\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5548:5634  if (to == address(0)) {... */\n      tag_348\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_350\n      tag_14\n      jump\t// in\n    tag_350:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6321:6340  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n      tag_351\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap3\n      0x20\n      swap3\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup5\n      mstore\n      sub\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256\n      sstore\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup3\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5374:5674  function _transfer(address from, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n    tag_351:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      dup3\n      shl(0xe2, 0x391434e3)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      mstore\n      0x04\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5548:5634  if (to == address(0)) {... */\n    tag_348:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      shl(0xe0, 0xec442f05)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5591:5623  ERC20InvalidReceiver(address(0)) */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5591:5623  ERC20InvalidReceiver(address(0)) */\n      0x04\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5591:5623  ERC20InvalidReceiver(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5453:5539  if (from == address(0)) {... */\n    tag_346:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      shl(0xe1, 0x4b637e8f)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      0x04\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5498:5528  ERC20InvalidSender(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3199:3302  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_10:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap1\n      dup2\n      mstore\n      mstore(0x20, 0x99f2891db7a8db76249871a02b43b68c0bb8f22ef8a3bc1034ae9375ef6b7c3c)\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3519:3542  !hasRole(role, account) */\n      iszero\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n      tag_353\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3199:3302  function _checkRole(bytes32 role) internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n    tag_353:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      mstore(0x00, shl(0xe0, 0xe2517d3f))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      0x04\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"XPToken.sol\":779:803  keccak256(\"PAUSER_ROLE\") */\n      0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x24\n      mstore\n      0x44\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3199:3302  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_11:\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3519:3542  !hasRole(role, account) */\n      iszero\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n      tag_355\n      jumpi\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3199:3302  function _checkRole(bytes32 role) internal view virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3515:3623  if (!hasRole(role, account)) {... */\n    tag_355:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      mstore(0x00, shl(0xe0, 0xe2517d3f))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      0x04\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      mstore\n      0x44\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":3565:3612  AccessControlUnauthorizedAccount(account, role) */\n      revert\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6179:6495  function _grantRole(bytes32 role, address account) internal virtual returns (bool) {... */\n    tag_12:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      dup7\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      tag_357\n      jumpi\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      swap6\n      swap1\n      swap6\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      dup1\n      sload\n      not(0xff)\n      and\n      0x01\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      swap3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap2\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      swap1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6370:6410  RoleGranted(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6347:6351  true */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6424:6435  return true */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6272:6489  if (!hasRole(role, account)) {... */\n    tag_357:\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6466:6478  return false */\n      pop\n      pop\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6466:6478  return false */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6732:7049  function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {... */\n    tag_13:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      dup7\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      iszero\n      tag_357\n      jumpi\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":2954:2960  _roles */\n      0x05\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n      swap6\n      swap1\n      swap6\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      swap3\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap2\n      swap1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6924:6964  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      swap1\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6924:6964  RoleRevoked(role, account, _msgSender()) */\n      log4\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/access/AccessControl.sol\":6978:6989  return true */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1878:2006  function _requireNotPaused() internal view virtual {... */\n    tag_14:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0xff\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1796:1803  _paused */\n      0x06\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1939:2000  if (paused()) {... */\n      tag_361\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1878:2006  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1939:2000  if (paused()) {... */\n    tag_361:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1974:1989  EnforcedPause() */\n      mstore(0x00, shl(0xe0, 0xd93c0665))\n      revert(0x00, 0x04)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2575:2882  function _nonReentrantBefore() private {... */\n    tag_15:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2702:2709  _status */\n      0x07\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2702:2720  _status == ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2698:2784  if (_status == ENTERED) {... */\n      tag_363\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1899:1900  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2702:2709  _status */\n      0x07\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2575:2882  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2698:2784  if (_status == ENTERED) {... */\n    tag_363:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2743:2773  ReentrancyGuardReentrantCall() */\n      mstore(0x00, shl(0xe0, 0x3ee5aeb5))\n      revert(0x00, 0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7965:8171  function _burn(address account, uint256 value) internal {... */\n    tag_16:\n      swap1\n      swap2\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8035:8056  account == address(0) */\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8031:8120  if (account == address(0)) {... */\n      tag_346\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1315:1387  modifier whenNotPaused() {... */\n      tag_367\n      tag_14\n      jump\t// in\n    tag_367:\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8055  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8055  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8055  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6321:6340  fromBalance < value */\n      dup4\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n      tag_368\n      jumpi\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      0x20\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8055  0 */\n      0x00\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap5\n      swap6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      swap4\n      dup6\n      dup8\n      mstore\n      dup7\n      dup5\n      mstore\n      sub\n      0x40\n      dup7\n      keccak256\n      sstore\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6791:6812  _totalSupply -= value */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sload\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6791:6812  _totalSupply -= value */\n      0x02\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7965:8171  function _burn(address account, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n    tag_368:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      swap2\n      pop\n      shl(0xe2, 0x391434e3)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8055  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      mstore\n      0x04\n        /* \"XPToken.sol\":551:8051  contract XPToken is ERC20, AccessControl, Pausable, ReentrancyGuard {... */\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8054:8055  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      revert\n\n    auxdata: 0xa26469706673582212207f4ac477aa11445ca07f88e4daa0811c7d59d70062d5876f3f8659429ccd424464736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_address_fromMemory": {
									"entryPoint": 1181,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 1100,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 1063,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun__grantRole": {
									"entryPoint": 1319,
									"id": 256,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_grantRole": {
									"entryPoint": 1613,
									"id": 256,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_grantRole_5569": {
									"entryPoint": 1201,
									"id": 256,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_grantRole_5571": {
									"entryPoint": 1466,
									"id": 256,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040523461042357611b6f8038038061001981610427565b92833981016080828203126104235781516001600160401b038111610423578161004491840161044c565b602083015190916001600160401b0382116104235761006491840161044c565b61007c60606100756040860161049d565b940161049d565b82519092906001600160401b03811161033357600354600181811c91168015610419575b602082101461031557601f81116103b6575b50806020601f8211600114610352575f91610347575b508160011b915f199060031b1c1916176003555b81516001600160401b03811161033357600454600181811c91168015610329575b602082101461031557601f81116102b2575b50806020601f821160011461024e575f91610243575b508160011b915f199060031b1c1916176004555b600160075551156101f85751156101ad576001600160a01b0382161561019e576001600160a01b0381161561019e5761017e8261017861018e946104b1565b50610527565b50610188816105ba565b5061064d565b506040516113ee90816106e18239f35b63d92e233d60e01b5f5260045ffd5b608460405163f7693c3d60e01b81525f600482015260406024820152601c60448201527f546f6b656e2073796d626f6c2063616e6e6f7420626520656d707479000000006064820152fd5b608460405163f7693c3d60e01b81525f600482015260406024820152601a60448201527f546f6b656e206e616d652063616e6e6f7420626520656d7074790000000000006064820152fd5b90508301515f610125565b60045f9081528181209250601f198416905b81811061029a57509083600194939210610282575b5050811b01600455610139565b8501515f1960f88460031b161c191690555f80610275565b9192602060018192868a015181550194019201610260565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c8101916020841061030b575b601f0160051c01905b818110610300575061010f565b5f81556001016102f3565b90915081906102ea565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100fd565b634e487b7160e01b5f52604160045260245ffd5b90508201515f6100c8565b60035f9081528181209250601f198416905b81811061039e57509083600194939210610386575b5050811b016003556100dc565b8401515f1960f88460031b161c191690555f80610379565b91926020600181928689015181550194019201610364565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c8101916020841061040f575b601f0160051c01905b81811061040457506100b2565b5f81556001016103f7565b90915081906103ee565b90607f16906100a0565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761033357604052565b81601f82011215610423578051906001600160401b0382116103335761047b601f8301601f1916602001610427565b928284526020838301011161042357815f9260208093018386015e8301015290565b51906001600160a01b038216820361042357565b6001600160a01b0381165f9081525f516020611b2f5f395f51905f52602052604090205460ff16610522576001600160a01b03165f8181525f516020611b2f5f395f51905f5260205260408120805460ff191660011790553391905f516020611acf5f395f51905f528180a4600190565b505f90565b6001600160a01b0381165f9081525f516020611b4f5f395f51905f52602052604090205460ff16610522576001600160a01b03165f8181525f516020611b4f5f395f51905f5260205260408120805460ff191660011790553391907f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a905f516020611acf5f395f51905f529080a4600190565b6001600160a01b0381165f9081525f516020611aef5f395f51905f52602052604090205460ff16610522576001600160a01b03165f8181525f516020611aef5f395f51905f5260205260408120805460ff191660011790553391907f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6905f516020611acf5f395f51905f529080a4600190565b6001600160a01b0381165f9081525f516020611b0f5f395f51905f52602052604090205460ff16610522576001600160a01b03165f8181525f516020611b0f5f395f51905f5260205260408120805460ff191660011790553391907f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848905f516020611acf5f395f51905f529080a460019056fe6080806040526004361015610012575f80fd5b5f905f3560e01c90816301ffc9a714610ef55750806306fdde0314610e01578063095ea7b314610d7f57806318160ddd14610d6257806323b872dd14610c83578063248a9ca314610c50578063282c51f314610c165780632f2ff15d14610bd8578063313ce56714610bbd57806335ab5f6414610ba057806336568abe14610b5a5780633f4ba83a14610af457806340c10f191461083057806342966c681461076e5780635c975abb1461074b5780635cb0c16f1461072d57806370a08231146106f557806379cc6790146105a95780638456cb591461054e57806391d148541461050457806395d89b41146103f3578063a217fddf146103d7578063a2309ff8146103b9578063a9059cbb14610387578063b028d807146102aa578063c59d48471461027b578063d539139314610240578063d547741f146101f8578063dd62ed3e146101a55763e63ab1e914610168575f80fd5b346101a257806003193601126101a25760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b80fd5b50346101a25760403660031901126101a25760406101c1610f6c565b916101ca610f82565b9260018060a01b031681526001602052209060018060a01b03165f52602052602060405f2054604051908152f35b50346101a25760403660031901126101a25761023c600435610218610f82565b90610237610232825f526005602052600160405f20015490565b6111a7565b61126d565b5080f35b50346101a257806003193601126101a25760206040517f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68152f35b50346101a257806003193601126101a25760606008546009546002549060405192835260208301526040820152f35b50346101a25760403660031901126101a2576102c4610f6c565b60243590303303610349576001600160a01b0316908115610335577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020849261030c6112f1565b61031881600254610fce565b60025584845283825260408420818154019055604051908152a380f35b63ec442f0560e01b83526004839052602483fd5b60405162461bcd60e51b815260206004820152601660248201527513db9b1e481cd95b198b58d85b1b08185b1b1bddd95960521b6044820152606490fd5b50346101a25760403660031901126101a2576103ae6103a4610f6c565b6024359033611073565b602060405160018152f35b50346101a257806003193601126101a2576020600854604051908152f35b50346101a257806003193601126101a257602090604051908152f35b50346101a257806003193601126101a2576040519080600454908160011c916001811680156104fa575b6020841081146104e6578386529081156104bf5750600114610462575b61045e8461044a81860382610f98565b604051918291602083526020830190610f48565b0390f35b600481527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b939250905b8082106104a55750909150810160200161044a8261043a565b91926001816020925483858801015201910190929161048c565b60ff191660208087019190915292151560051b8501909201925061044a915083905061043a565b634e487b7160e01b83526022600452602483fd5b92607f169261041d565b50346101a25760403660031901126101a2576040610520610f82565b9160043581526005602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b50346101a257806003193601126101a257610567611138565b61056f6112f1565b600160ff1960065416176006557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b50346101a25760403660031901126101a2576105c3610f6c565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8488252600560209081526040808420335f9081529252902054602435919060ff16156106be576106116112f1565b61061961130c565b81156106af5760018060a01b03811690818452836020528260408520541061068857826106549161064c82600954610fce565b60095561132c565b6040519182527f08009940fb138ae33fbb70c10b643e840c71f1654344cc173975a815e117e68760203393a3600160075580f35b50829181606494528260205260408320549163db42144d60e01b8452600452602452604452fd5b631f2a200560e01b8352600483fd5b63e2517d3f60e01b8352336004527f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848602452604483fd5b50346101a25760203660031901126101a2576020906040906001600160a01b0361071d610f6c565b1681528083522054604051908152f35b50346101a257806003193601126101a2576020600254604051908152f35b50346101a257806003193601126101a257602060ff600654166040519015158152f35b50346101a25760203660031901126101a25760043561078b6112f1565b61079361130c565b80156108215733825281602052806040832054106107fa576107b781600954610fce565b6009556107c4813361132c565b60405190815233907f08009940fb138ae33fbb70c10b643e840c71f1654344cc173975a815e117e68760203392a3600160075580f35b906064913382528160205260408220549063db42144d60e01b835233600452602452604452fd5b631f2a200560e01b8252600482fd5b5034610a2d576040366003190112610a2d5761084a610f6c565b335f9081527f15a28d26fa1bf736cf7edc9922607171ccb09c3c73b808e7772a3013e068a522602052604090205460243592919060ff1615610abd5761088e6112f1565b61089661130c565b6001600160a01b0316908115610aae578215610a9f57308214610a53576108bf83600254610fce565b6001600160ff1b038111610a3157506108da83600854610fce565b600855303b15610a2d5760405163b028d80760e01b81528260048201528360248201525f8160448183305af19081610a18575b506109e2578060033d116109d1575b506308c379a01461097e575b8161093760a493600854611066565b506040519163e6921fc160e01b8352600483015260248201526060604482015260156064820152742ab735b737bbb71036b4b73a34b7339032b93937b960591b6084820152fd5b610986610fef565b806109915750610928565b6109cd906109a184600854611066565b5060405193849363e6921fc160e01b855260048501526024840152606060448401526064830190610f48565b0390fd5b9050600481803e5160e01c5f61091c565b91906040519182527f969cd201f68f120baff2bf3c59bc3b534434e08b69a71a14ab85cb79cd3b63e460203393a3600160075580f35b610a259192505f90610f98565b5f905f61090d565b5f80fd5b63594a20b760e01b5f9081526004919091526001600160ff1b03602452604490fd5b6084826040519063f7693c3d60e01b8252600482015260406024820152601e60448201527f43616e6e6f74206d696e7420746f20636f6e747261637420697473656c6600006064820152fd5b631f2a200560e01b5f5260045ffd5b63d92e233d60e01b5f5260045ffd5b63e2517d3f60e01b5f52336004527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660245260445ffd5b34610a2d575f366003190112610a2d57610b0c611138565b60065460ff811615610b4b5760ff19166006557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b638dfc202b60e01b5f5260045ffd5b34610a2d576040366003190112610a2d57610b73610f82565b336001600160a01b03821603610b9157610b8f9060043561126d565b005b63334bd91960e11b5f5260045ffd5b34610a2d575f366003190112610a2d576020600954604051908152f35b34610a2d575f366003190112610a2d57602060405160128152f35b34610a2d576040366003190112610a2d57610b8f600435610bf7610f82565b90610c11610232825f526005602052600160405f20015490565b6111e1565b34610a2d575f366003190112610a2d5760206040517f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8488152f35b34610a2d576020366003190112610a2d576020610c7b6004355f526005602052600160405f20015490565b604051908152f35b34610a2d576060366003190112610a2d57610c9c610f6c565b610ca4610f82565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f198110610ce2575b506103ae9350611073565b838110610d47578415610d34573315610d21576103ae945f52600160205260405f2060018060a01b0333165f526020528360405f209103905584610cd7565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b34610a2d575f366003190112610a2d576020600254604051908152f35b34610a2d576040366003190112610a2d57610d98610f6c565b602435903315610d34576001600160a01b0316908115610d2157335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b34610a2d575f366003190112610a2d576040515f6003548060011c90600181168015610eeb575b602083108114610ed757828552908115610eb35750600114610e55575b61045e8361044a81850382610f98565b91905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b915f905b808210610e995750909150810160200161044a610e45565b919260018160209254838588010152019101909291610e81565b60ff191660208086019190915291151560051b8401909101915061044a9050610e45565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610e28565b34610a2d576020366003190112610a2d576004359063ffffffff60e01b8216809203610a2d57602091637965db0b60e01b8114908115610f37575b5015158152f35b6301ffc9a760e01b14905083610f30565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b0382168203610a2d57565b602435906001600160a01b0382168203610a2d57565b90601f8019910116810190811067ffffffffffffffff821117610fba57604052565b634e487b7160e01b5f52604160045260245ffd5b91908201809211610fdb57565b634e487b7160e01b5f52601160045260245ffd5b5f60443d10611055576040513d600319016004823e8051913d602484011167ffffffffffffffff841117611060578282019283519167ffffffffffffffff8311611058573d84016003190185840160200111611058575061105592910160200190610f98565b90565b949350505050565b92915050565b91908203918211610fdb57565b6001600160a01b0316908115611125576001600160a01b03169182156111125761109b6112f1565b815f525f60205260405f20548181106110f957817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b335f9081527f99f2891db7a8db76249871a02b43b68c0bb8f22ef8a3bc1034ae9375ef6b7c3c602052604090205460ff161561117057565b63e2517d3f60e01b5f52336004527f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a60245260445ffd5b5f81815260056020908152604080832033845290915290205460ff16156111cb5750565b63e2517d3f60e01b5f523360045260245260445ffd5b5f8181526005602090815260408083206001600160a01b038616845290915290205460ff16611267575f8181526005602090815260408083206001600160a01b0395909516808452949091528120805460ff19166001179055339291907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9080a4600190565b50505f90565b5f8181526005602090815260408083206001600160a01b038616845290915290205460ff1615611267575f8181526005602090815260408083206001600160a01b0395909516808452949091528120805460ff19169055339291907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b60ff600654166112fd57565b63d93c066560e01b5f5260045ffd5b60026007541461131d576002600755565b633ee5aeb560e01b5f5260045ffd5b9091906001600160a01b03168015611125576113466112f1565b805f525f60205260405f205483811061139e576020845f94957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef938587528684520360408620558060025403600255604051908152a3565b915063391434e360e21b5f5260045260245260445260645ffdfea26469706673582212207f4ac477aa11445ca07f88e4daa0811c7d59d70062d5876f3f8659429ccd424464736f6c634300081e00332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d15a28d26fa1bf736cf7edc9922607171ccb09c3c73b808e7772a3013e068a522847f481f687befb06ed3511f1a8dcef57e83007c0147ae5047583d705617093705b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc99f2891db7a8db76249871a02b43b68c0bb8f22ef8a3bc1034ae9375ef6b7c3c",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x423 JUMPI PUSH2 0x1B6F DUP1 CODESIZE SUB DUP1 PUSH2 0x19 DUP2 PUSH2 0x427 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x423 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x423 JUMPI DUP2 PUSH2 0x44 SWAP2 DUP5 ADD PUSH2 0x44C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x423 JUMPI PUSH2 0x64 SWAP2 DUP5 ADD PUSH2 0x44C JUMP JUMPDEST PUSH2 0x7C PUSH1 0x60 PUSH2 0x75 PUSH1 0x40 DUP7 ADD PUSH2 0x49D JUMP JUMPDEST SWAP5 ADD PUSH2 0x49D JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x333 JUMPI PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x419 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x315 JUMPI PUSH1 0x1F DUP2 GT PUSH2 0x3B6 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x352 JUMPI PUSH0 SWAP2 PUSH2 0x347 JUMPI JUMPDEST POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x333 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x329 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x315 JUMPI PUSH1 0x1F DUP2 GT PUSH2 0x2B2 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x24E JUMPI PUSH0 SWAP2 PUSH2 0x243 JUMPI JUMPDEST POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x4 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x7 SSTORE MLOAD ISZERO PUSH2 0x1F8 JUMPI MLOAD ISZERO PUSH2 0x1AD JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x19E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x19E JUMPI PUSH2 0x17E DUP3 PUSH2 0x178 PUSH2 0x18E SWAP5 PUSH2 0x4B1 JUMP JUMPDEST POP PUSH2 0x527 JUMP JUMPDEST POP PUSH2 0x188 DUP2 PUSH2 0x5BA JUMP JUMPDEST POP PUSH2 0x64D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x13EE SWAP1 DUP2 PUSH2 0x6E1 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0xD92E233D PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH4 0xF7693C3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x546F6B656E2073796D626F6C2063616E6E6F7420626520656D70747900000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH4 0xF7693C3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x546F6B656E206E616D652063616E6E6F7420626520656D707479000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP4 ADD MLOAD PUSH0 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x4 PUSH0 SWAP1 DUP2 MSTORE DUP2 DUP2 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x29A JUMPI POP SWAP1 DUP4 PUSH1 0x1 SWAP5 SWAP4 SWAP3 LT PUSH2 0x282 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x4 SSTORE PUSH2 0x139 JUMP JUMPDEST DUP6 ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 PUSH2 0x275 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x260 JUMP JUMPDEST PUSH1 0x4 PUSH0 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x30B JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x300 JUMPI POP PUSH2 0x10F JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2F3 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x2EA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0xFD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 POP DUP3 ADD MLOAD PUSH0 PUSH2 0xC8 JUMP JUMPDEST PUSH1 0x3 PUSH0 SWAP1 DUP2 MSTORE DUP2 DUP2 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x39E JUMPI POP SWAP1 DUP4 PUSH1 0x1 SWAP5 SWAP4 SWAP3 LT PUSH2 0x386 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE PUSH2 0xDC JUMP JUMPDEST DUP5 ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 PUSH2 0x379 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x364 JUMP JUMPDEST PUSH1 0x3 PUSH0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x40F JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x404 JUMPI POP PUSH2 0xB2 JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3F7 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x3EE JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0xA0 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x333 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x423 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x333 JUMPI PUSH2 0x47B PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x427 JUMP JUMPDEST SWAP3 DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x423 JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x423 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1B2F PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x522 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1B2F PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1ACF PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP2 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1B4F PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x522 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1B4F PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1ACF PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1AEF PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x522 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1AEF PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1ACF PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1B0F PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x522 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1B0F PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP2 SWAP1 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 SWAP1 PUSH0 MLOAD PUSH1 0x20 PUSH2 0x1ACF PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF5 JUMPI POP DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE01 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD62 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC83 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xC50 JUMPI DUP1 PUSH4 0x282C51F3 EQ PUSH2 0xC16 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0xBD8 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xBBD JUMPI DUP1 PUSH4 0x35AB5F64 EQ PUSH2 0xBA0 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0xB5A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0xAF4 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x830 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x76E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x74B JUMPI DUP1 PUSH4 0x5CB0C16F EQ PUSH2 0x72D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6F5 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0xA2309FF8 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xB028D807 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xC59D4847 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1A5 JUMPI PUSH4 0xE63AB1E9 EQ PUSH2 0x168 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x40 PUSH2 0x1C1 PUSH2 0xF6C JUMP JUMPDEST SWAP2 PUSH2 0x1CA PUSH2 0xF82 JUMP JUMPDEST SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x23C PUSH1 0x4 CALLDATALOAD PUSH2 0x218 PUSH2 0xF82 JUMP JUMPDEST SWAP1 PUSH2 0x237 PUSH2 0x232 DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x126D JUMP JUMPDEST POP DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x60 PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x2 SLOAD SWAP1 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x2C4 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 ADDRESS CALLER SUB PUSH2 0x349 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x335 JUMPI PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP5 SWAP3 PUSH2 0x30C PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x318 DUP2 PUSH1 0x2 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x2 SSTORE DUP5 DUP5 MSTORE DUP4 DUP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x13DB9B1E481CD95B198B58D85B1B08185B1B1BDDD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x3AE PUSH2 0x3A4 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH1 0x4 SLOAD SWAP1 DUP2 PUSH1 0x1 SHR SWAP2 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0x4FA JUMPI JUMPDEST PUSH1 0x20 DUP5 LT DUP2 EQ PUSH2 0x4E6 JUMPI DUP4 DUP7 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x4BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x462 JUMPI JUMPDEST PUSH2 0x45E DUP5 PUSH2 0x44A DUP2 DUP7 SUB DUP3 PUSH2 0xF98 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xF48 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 DUP2 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x4A5 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x44A DUP3 PUSH2 0x43A JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x48C JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x44A SWAP2 POP DUP4 SWAP1 POP PUSH2 0x43A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x41D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x40 PUSH2 0x520 PUSH2 0xF82 JUMP JUMPDEST SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x567 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x56F PUSH2 0x12F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x6 SLOAD AND OR PUSH1 0x6 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x5C3 PUSH2 0xF6C JUMP JUMPDEST PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER PUSH0 SWAP1 DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x6BE JUMPI PUSH2 0x611 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x619 PUSH2 0x130C JUMP JUMPDEST DUP2 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 DUP6 KECCAK256 SLOAD LT PUSH2 0x688 JUMPI DUP3 PUSH2 0x654 SWAP2 PUSH2 0x64C DUP3 PUSH1 0x9 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x132C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x8009940FB138AE33FBB70C10B643E840C71F1654344CC173975A815E117E687 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH1 0x1 PUSH1 0x7 SSTORE DUP1 RETURN JUMPDEST POP DUP3 SWAP2 DUP2 PUSH1 0x64 SWAP5 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SLOAD SWAP2 PUSH4 0xDB42144D PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE REVERT JUMPDEST PUSH4 0x1F2A2005 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 REVERT JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 MSTORE PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 PUSH1 0x24 MSTORE PUSH1 0x44 DUP4 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x71D PUSH2 0xF6C JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x78B PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x793 PUSH2 0x130C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x821 JUMPI CALLER DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP4 KECCAK256 SLOAD LT PUSH2 0x7FA JUMPI PUSH2 0x7B7 DUP2 PUSH1 0x9 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x7C4 DUP2 CALLER PUSH2 0x132C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x8009940FB138AE33FBB70C10B643E840C71F1654344CC173975A815E117E687 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x7 SSTORE DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x64 SWAP2 CALLER DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 PUSH4 0xDB42144D PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE REVERT JUMPDEST PUSH4 0x1F2A2005 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0x84A PUSH2 0xF6C JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x15A28D26FA1BF736CF7EDC9922607171CCB09C3C73B808E7772A3013E068A522 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP3 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xABD JUMPI PUSH2 0x88E PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x896 PUSH2 0x130C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xAAE JUMPI DUP3 ISZERO PUSH2 0xA9F JUMPI ADDRESS DUP3 EQ PUSH2 0xA53 JUMPI PUSH2 0x8BF DUP4 PUSH1 0x2 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 GT PUSH2 0xA31 JUMPI POP PUSH2 0x8DA DUP4 PUSH1 0x8 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x8 SSTORE ADDRESS EXTCODESIZE ISZERO PUSH2 0xA2D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB028D807 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 PUSH1 0x4 DUP3 ADD MSTORE DUP4 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x44 DUP2 DUP4 ADDRESS GAS CALL SWAP1 DUP2 PUSH2 0xA18 JUMPI JUMPDEST POP PUSH2 0x9E2 JUMPI DUP1 PUSH1 0x3 RETURNDATASIZE GT PUSH2 0x9D1 JUMPI JUMPDEST POP PUSH4 0x8C379A0 EQ PUSH2 0x97E JUMPI JUMPDEST DUP2 PUSH2 0x937 PUSH1 0xA4 SWAP4 PUSH1 0x8 SLOAD PUSH2 0x1066 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xE6921FC1 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x64 DUP3 ADD MSTORE PUSH21 0x2AB735B737BBB71036B4B73A34B7339032B93937B9 PUSH1 0x59 SHL PUSH1 0x84 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x986 PUSH2 0xFEF JUMP JUMPDEST DUP1 PUSH2 0x991 JUMPI POP PUSH2 0x928 JUMP JUMPDEST PUSH2 0x9CD SWAP1 PUSH2 0x9A1 DUP5 PUSH1 0x8 SLOAD PUSH2 0x1066 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH4 0xE6921FC1 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0xF48 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP1 RETURNDATACOPY MLOAD PUSH1 0xE0 SHR PUSH0 PUSH2 0x91C JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x969CD201F68F120BAFF2BF3C59BC3B534434E08B69A71A14AB85CB79CD3B63E4 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH1 0x1 PUSH1 0x7 SSTORE DUP1 RETURN JUMPDEST PUSH2 0xA25 SWAP2 SWAP3 POP PUSH0 SWAP1 PUSH2 0xF98 JUMP JUMPDEST PUSH0 SWAP1 PUSH0 PUSH2 0x90D JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x594A20B7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB PUSH1 0x24 MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH1 0x84 DUP3 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xF7693C3D PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74206D696E7420746F20636F6E747261637420697473656C660000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x1F2A2005 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xD92E233D PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xB0C PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xB4B JUMPI PUSH1 0xFF NOT AND PUSH1 0x6 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0x8DFC202B PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xB73 PUSH2 0xF82 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0xB91 JUMPI PUSH2 0xB8F SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x126D JUMP JUMPDEST STOP JUMPDEST PUSH4 0x334BD919 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xB8F PUSH1 0x4 CALLDATALOAD PUSH2 0xBF7 PUSH2 0xF82 JUMP JUMPDEST SWAP1 PUSH2 0xC11 PUSH2 0x232 DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x11E1 JUMP JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH2 0xC7B PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xC9C PUSH2 0xF6C JUMP JUMPDEST PUSH2 0xCA4 PUSH2 0xF82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP3 SWAP2 PUSH0 NOT DUP2 LT PUSH2 0xCE2 JUMPI JUMPDEST POP PUSH2 0x3AE SWAP4 POP PUSH2 0x1073 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0xD47 JUMPI DUP5 ISZERO PUSH2 0xD34 JUMPI CALLER ISZERO PUSH2 0xD21 JUMPI PUSH2 0x3AE SWAP5 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP4 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 SUB SWAP1 SSTORE DUP5 PUSH2 0xCD7 JUMP JUMPDEST PUSH4 0x4A1406B1 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0xE602DF05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 SWAP1 PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xD98 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0xD34 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xD21 JUMPI CALLER PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x40 MLOAD PUSH0 PUSH1 0x3 SLOAD DUP1 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0xEEB JUMPI JUMPDEST PUSH1 0x20 DUP4 LT DUP2 EQ PUSH2 0xED7 JUMPI DUP3 DUP6 MSTORE SWAP1 DUP2 ISZERO PUSH2 0xEB3 JUMPI POP PUSH1 0x1 EQ PUSH2 0xE55 JUMPI JUMPDEST PUSH2 0x45E DUP4 PUSH2 0x44A DUP2 DUP6 SUB DUP3 PUSH2 0xF98 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH1 0x3 PUSH0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP2 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xE99 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x44A PUSH2 0xE45 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0xE81 JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x44A SWAP1 POP PUSH2 0xE45 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE28 JUMP JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0xA2D JUMPI PUSH1 0x20 SWAP2 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0xF37 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0xF30 JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA2D JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA2D JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xFDB JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x44 RETURNDATASIZE LT PUSH2 0x1055 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x3 NOT ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD SWAP2 RETURNDATASIZE PUSH1 0x24 DUP5 ADD GT PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT OR PUSH2 0x1060 JUMPI DUP3 DUP3 ADD SWAP3 DUP4 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1058 JUMPI RETURNDATASIZE DUP5 ADD PUSH1 0x3 NOT ADD DUP6 DUP5 ADD PUSH1 0x20 ADD GT PUSH2 0x1058 JUMPI POP PUSH2 0x1055 SWAP3 SWAP2 ADD PUSH1 0x20 ADD SWAP1 PUSH2 0xF98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xFDB JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x1125 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x1112 JUMPI PUSH2 0x109B PUSH2 0x12F1 JUMP JUMPDEST DUP2 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x10F9 JUMPI DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH0 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST DUP3 PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4B637E8F PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x99F2891DB7A8DB76249871A02B43B68C0BB8F22EF8A3BC1034AE9375EF6B7C3C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1170 JUMPI JUMP JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11CB JUMPI POP JUMP JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1267 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1267 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH2 0x12FD JUMPI JUMP JUMPDEST PUSH4 0xD93C0665 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x7 SLOAD EQ PUSH2 0x131D JUMPI PUSH1 0x2 PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x1125 JUMPI PUSH2 0x1346 PUSH2 0x12F1 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP4 DUP2 LT PUSH2 0x139E JUMPI PUSH1 0x20 DUP5 PUSH0 SWAP5 SWAP6 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 DUP6 DUP8 MSTORE DUP7 DUP5 MSTORE SUB PUSH1 0x40 DUP7 KECCAK256 SSTORE DUP1 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST SWAP2 POP PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x4AC477AA11445CA07F88E4DAA0811C7D59D70062D5876F3F8659429CCD424464 PUSH20 0x6F6C634300081E00332F8788117E7EFF1D82E926 EOFCREATE 0x79 BLOBHASH ADD DATALOADN 0x7C78 MUL BLOBBASEFEE POP 0x27 MULMOD BLOCKHASH ADDRESS GASLIMIT BLOCKHASH 0xA7 CALLER PUSH6 0x6F0D15A28D26 STATICCALL SHL 0xF7 CALLDATASIZE 0xCF PUSH31 0xDC9922607171CCB09C3C73B808E7772A3013E068A522847F481F687BEFB06E 0xD3 MLOAD 0x1F BYTE DUP14 0xCE CREATE2 PUSH31 0x83007C0147AE5047583D705617093705B8CCBB9D4D8FB16EA74CE3C29A41F1 0xB4 PUSH2 0xFBDA SELFDESTRUCT SELFBALANCE EQ LOG0 0xD9 0xA8 0xEB SDIV BLOBHASH SWAP8 CHAINID 0xBC SWAP10 CALLCODE DUP10 SAR 0xB7 0xA8 0xDB PUSH23 0x249871A02B43B68C0BB8F22EF8A3BC1034AE9375EF6B7C EXTCODECOPY ",
							"sourceMap": "551:7500:11:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;551:7500:11;;;;1648:13:3;551:7500:11;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;;1648:13:3;551:7500:11;;;;;1648:13:3;551:7500:11;;;;-1:-1:-1;;;;;551:7500:11;;;;1671:17:3;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;;1648:13:3;551:7500:11;;;;;1671:17:3;551:7500:11;;;2061:21:8;1857:1;551:7500:11;3126:23;3122:117;;551:7500;3252:25;3248:121;;-1:-1:-1;;;;;551:7500:11;;3382:19;3378:70;;-1:-1:-1;;;;;551:7500:11;;3461:21;3457:72;;3601:30;3554:37;;3757:32;3554:37;;:::i;:::-;;3601:30;:::i;:::-;;3715:32;;;:::i;:::-;;3757;:::i;:::-;;551:7500;;;;;;;;;3457:72;3424:13;;;-1:-1:-1;3505:13:11;1671:17:3;-1:-1:-1;3505:13:11;3248:121;3300:58;551:7500;;3172:56;;;3300:58;;-1:-1:-1;1671:17:3;3300:58:11;;551:7500;;;;;;;;;;;;;;;;3300:58;3122:117;3172:56;551:7500;;3172:56;;;;;-1:-1:-1;1671:17:3;3172:56:11;;551:7500;;;;;;;;;;;;;;;;3172:56;551:7500;;;;;;;;;;1671:17:3;-1:-1:-1;551:7500:11;;;;;;;-1:-1:-1;;;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;1671:17:3;551:7500:11;;;;;;;;;;;1648:13:3;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1671:17:3;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;-1:-1:-1;551:7500:11;;1671:17:3;551:7500:11;;-1:-1:-1;551:7500:11;;;;;;;;;;;;-1:-1:-1;551:7500:11;;1671:17:3;551:7500:11;;-1:-1:-1;551:7500:11;;;;;;;;;;;1648:13:3;-1:-1:-1;551:7500:11;;;;;;;-1:-1:-1;;;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;1648:13:3;551:7500:11;;;;;;;;;;;1648:13:3;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1648:13:3;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;-1:-1:-1;;551:7500:11;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;-1:-1:-1;;551:7500:11;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;551:7500:11;;;;;;:::o;6179:316:0:-;-1:-1:-1;;;;;551:7500:11;;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;-1:-1:-1;;551:7500:11;;;;;735:10:6;;551:7500:11;-1:-1:-1;;;;;;;;;;;551:7500:11;;6370:40:0;6347:4;6424:11;:::o;6272:217::-;6466:12;551:7500:11;6466:12:0;:::o;6179:316::-;-1:-1:-1;;;;;551:7500:11;;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;-1:-1:-1;;551:7500:11;;;;;735:10:6;;551:7500:11;779:24;;-1:-1:-1;;;;;;;;;;;6370:40:0;551:7500:11;6370:40:0;6347:4;6424:11;:::o;6179:316::-;-1:-1:-1;;;;;551:7500:11;;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;-1:-1:-1;;551:7500:11;;;;;735:10:6;;551:7500:11;711:24;;-1:-1:-1;;;;;;;;;;;6370:40:0;551:7500:11;6370:40:0;6347:4;6424:11;:::o;6179:316::-;-1:-1:-1;;;;;551:7500:11;;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;-1:-1:-1;;;;;;;;;;;551:7500:11;;;;;;;-1:-1:-1;;551:7500:11;;;;;735:10:6;;551:7500:11;847:24;;-1:-1:-1;;;;;;;;;;;6370:40:0;551:7500:11;6370:40:0;6347:4;6424:11;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 3970,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 3948,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 4046,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_uint256": {
									"entryPoint": 4198,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 3992,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun__checkRole": {
									"entryPoint": 4519,
									"id": 93,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_burn": {
									"entryPoint": 4908,
									"id": 903,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkRole": {
									"entryPoint": 4408,
									"id": 93,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_getRoleAdmin": {
									"entryPoint": null,
									"id": 128,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_grantRole": {
									"entryPoint": 4577,
									"id": 256,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 4876,
									"id": 1321,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_requireNotPaused": {
									"entryPoint": 4849,
									"id": 1226,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_revokeRole": {
									"entryPoint": 4717,
									"id": 294,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_transfer": {
									"entryPoint": 4211,
									"id": 760,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"try_decode_error_message": {
									"entryPoint": 4079,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP1 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF5 JUMPI POP DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE01 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD62 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC83 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xC50 JUMPI DUP1 PUSH4 0x282C51F3 EQ PUSH2 0xC16 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0xBD8 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xBBD JUMPI DUP1 PUSH4 0x35AB5F64 EQ PUSH2 0xBA0 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0xB5A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0xAF4 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x830 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x76E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x74B JUMPI DUP1 PUSH4 0x5CB0C16F EQ PUSH2 0x72D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6F5 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0xA2309FF8 EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xB028D807 EQ PUSH2 0x2AA JUMPI DUP1 PUSH4 0xC59D4847 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1A5 JUMPI PUSH4 0xE63AB1E9 EQ PUSH2 0x168 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x40 PUSH2 0x1C1 PUSH2 0xF6C JUMP JUMPDEST SWAP2 PUSH2 0x1CA PUSH2 0xF82 JUMP JUMPDEST SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x23C PUSH1 0x4 CALLDATALOAD PUSH2 0x218 PUSH2 0xF82 JUMP JUMPDEST SWAP1 PUSH2 0x237 PUSH2 0x232 DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x126D JUMP JUMPDEST POP DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x60 PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x2 SLOAD SWAP1 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x2C4 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 ADDRESS CALLER SUB PUSH2 0x349 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x335 JUMPI PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP5 SWAP3 PUSH2 0x30C PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x318 DUP2 PUSH1 0x2 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x2 SSTORE DUP5 DUP5 MSTORE DUP4 DUP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 SWAP1 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x13DB9B1E481CD95B198B58D85B1B08185B1B1BDDD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x3AE PUSH2 0x3A4 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x40 MLOAD SWAP1 DUP1 PUSH1 0x4 SLOAD SWAP1 DUP2 PUSH1 0x1 SHR SWAP2 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0x4FA JUMPI JUMPDEST PUSH1 0x20 DUP5 LT DUP2 EQ PUSH2 0x4E6 JUMPI DUP4 DUP7 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x4BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x462 JUMPI JUMPDEST PUSH2 0x45E DUP5 PUSH2 0x44A DUP2 DUP7 SUB DUP3 PUSH2 0xF98 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xF48 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 DUP2 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B SWAP4 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x4A5 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x44A DUP3 PUSH2 0x43A JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x48C JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x44A SWAP2 POP DUP4 SWAP1 POP PUSH2 0x43A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x41D JUMP JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x40 PUSH2 0x520 PUSH2 0xF82 JUMP JUMPDEST SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x567 PUSH2 0x1138 JUMP JUMPDEST PUSH2 0x56F PUSH2 0x12F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x6 SLOAD AND OR PUSH1 0x6 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH2 0x5C3 PUSH2 0xF6C JUMP JUMPDEST PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER PUSH0 SWAP1 DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x6BE JUMPI PUSH2 0x611 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x619 PUSH2 0x130C JUMP JUMPDEST DUP2 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 DUP6 KECCAK256 SLOAD LT PUSH2 0x688 JUMPI DUP3 PUSH2 0x654 SWAP2 PUSH2 0x64C DUP3 PUSH1 0x9 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x132C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x8009940FB138AE33FBB70C10B643E840C71F1654344CC173975A815E117E687 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH1 0x1 PUSH1 0x7 SSTORE DUP1 RETURN JUMPDEST POP DUP3 SWAP2 DUP2 PUSH1 0x64 SWAP5 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SLOAD SWAP2 PUSH4 0xDB42144D PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE REVERT JUMPDEST PUSH4 0x1F2A2005 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 REVERT JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 MSTORE PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 PUSH1 0x24 MSTORE PUSH1 0x44 DUP4 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x71D PUSH2 0xF6C JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1A2 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A2 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x78B PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x793 PUSH2 0x130C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x821 JUMPI CALLER DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP4 KECCAK256 SLOAD LT PUSH2 0x7FA JUMPI PUSH2 0x7B7 DUP2 PUSH1 0x9 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x7C4 DUP2 CALLER PUSH2 0x132C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x8009940FB138AE33FBB70C10B643E840C71F1654344CC173975A815E117E687 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x1 PUSH1 0x7 SSTORE DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x64 SWAP2 CALLER DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 PUSH4 0xDB42144D PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE REVERT JUMPDEST PUSH4 0x1F2A2005 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0x84A PUSH2 0xF6C JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x15A28D26FA1BF736CF7EDC9922607171CCB09C3C73B808E7772A3013E068A522 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP3 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xABD JUMPI PUSH2 0x88E PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x896 PUSH2 0x130C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xAAE JUMPI DUP3 ISZERO PUSH2 0xA9F JUMPI ADDRESS DUP3 EQ PUSH2 0xA53 JUMPI PUSH2 0x8BF DUP4 PUSH1 0x2 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 GT PUSH2 0xA31 JUMPI POP PUSH2 0x8DA DUP4 PUSH1 0x8 SLOAD PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x8 SSTORE ADDRESS EXTCODESIZE ISZERO PUSH2 0xA2D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB028D807 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 PUSH1 0x4 DUP3 ADD MSTORE DUP4 PUSH1 0x24 DUP3 ADD MSTORE PUSH0 DUP2 PUSH1 0x44 DUP2 DUP4 ADDRESS GAS CALL SWAP1 DUP2 PUSH2 0xA18 JUMPI JUMPDEST POP PUSH2 0x9E2 JUMPI DUP1 PUSH1 0x3 RETURNDATASIZE GT PUSH2 0x9D1 JUMPI JUMPDEST POP PUSH4 0x8C379A0 EQ PUSH2 0x97E JUMPI JUMPDEST DUP2 PUSH2 0x937 PUSH1 0xA4 SWAP4 PUSH1 0x8 SLOAD PUSH2 0x1066 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xE6921FC1 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x64 DUP3 ADD MSTORE PUSH21 0x2AB735B737BBB71036B4B73A34B7339032B93937B9 PUSH1 0x59 SHL PUSH1 0x84 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x986 PUSH2 0xFEF JUMP JUMPDEST DUP1 PUSH2 0x991 JUMPI POP PUSH2 0x928 JUMP JUMPDEST PUSH2 0x9CD SWAP1 PUSH2 0x9A1 DUP5 PUSH1 0x8 SLOAD PUSH2 0x1066 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH4 0xE6921FC1 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD SWAP1 PUSH2 0xF48 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP1 RETURNDATACOPY MLOAD PUSH1 0xE0 SHR PUSH0 PUSH2 0x91C JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x969CD201F68F120BAFF2BF3C59BC3B534434E08B69A71A14AB85CB79CD3B63E4 PUSH1 0x20 CALLER SWAP4 LOG3 PUSH1 0x1 PUSH1 0x7 SSTORE DUP1 RETURN JUMPDEST PUSH2 0xA25 SWAP2 SWAP3 POP PUSH0 SWAP1 PUSH2 0xF98 JUMP JUMPDEST PUSH0 SWAP1 PUSH0 PUSH2 0x90D JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x594A20B7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB PUSH1 0x24 MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH1 0x84 DUP3 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xF7693C3D PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74206D696E7420746F20636F6E747261637420697473656C660000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x1F2A2005 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xD92E233D PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xB0C PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xB4B JUMPI PUSH1 0xFF NOT AND PUSH1 0x6 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0x8DFC202B PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xB73 PUSH2 0xF82 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0xB91 JUMPI PUSH2 0xB8F SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x126D JUMP JUMPDEST STOP JUMPDEST PUSH4 0x334BD919 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xB8F PUSH1 0x4 CALLDATALOAD PUSH2 0xBF7 PUSH2 0xF82 JUMP JUMPDEST SWAP1 PUSH2 0xC11 PUSH2 0x232 DUP3 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x11E1 JUMP JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH2 0xC7B PUSH1 0x4 CALLDATALOAD PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xC9C PUSH2 0xF6C JUMP JUMPDEST PUSH2 0xCA4 PUSH2 0xF82 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP3 SWAP2 PUSH0 NOT DUP2 LT PUSH2 0xCE2 JUMPI JUMPDEST POP PUSH2 0x3AE SWAP4 POP PUSH2 0x1073 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0xD47 JUMPI DUP5 ISZERO PUSH2 0xD34 JUMPI CALLER ISZERO PUSH2 0xD21 JUMPI PUSH2 0x3AE SWAP5 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP4 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 SUB SWAP1 SSTORE DUP5 PUSH2 0xCD7 JUMP JUMPDEST PUSH4 0x4A1406B1 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0xE602DF05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 SWAP1 PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH2 0xD98 PUSH2 0xF6C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0xD34 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xD21 JUMPI CALLER PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x40 MLOAD PUSH0 PUSH1 0x3 SLOAD DUP1 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0xEEB JUMPI JUMPDEST PUSH1 0x20 DUP4 LT DUP2 EQ PUSH2 0xED7 JUMPI DUP3 DUP6 MSTORE SWAP1 DUP2 ISZERO PUSH2 0xEB3 JUMPI POP PUSH1 0x1 EQ PUSH2 0xE55 JUMPI JUMPDEST PUSH2 0x45E DUP4 PUSH2 0x44A DUP2 DUP6 SUB DUP3 PUSH2 0xF98 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH1 0x3 PUSH0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP2 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xE99 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x44A PUSH2 0xE45 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0xE81 JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x44A SWAP1 POP PUSH2 0xE45 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE28 JUMP JUMPDEST CALLVALUE PUSH2 0xA2D JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA2D JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0xA2D JUMPI PUSH1 0x20 SWAP2 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0xF37 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0xF30 JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 SWAP2 DUP2 SWAP1 DUP5 ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA2D JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA2D JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xFDB JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x44 RETURNDATASIZE LT PUSH2 0x1055 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x3 NOT ADD PUSH1 0x4 DUP3 RETURNDATACOPY DUP1 MLOAD SWAP2 RETURNDATASIZE PUSH1 0x24 DUP5 ADD GT PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT OR PUSH2 0x1060 JUMPI DUP3 DUP3 ADD SWAP3 DUP4 MLOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1058 JUMPI RETURNDATASIZE DUP5 ADD PUSH1 0x3 NOT ADD DUP6 DUP5 ADD PUSH1 0x20 ADD GT PUSH2 0x1058 JUMPI POP PUSH2 0x1055 SWAP3 SWAP2 ADD PUSH1 0x20 ADD SWAP1 PUSH2 0xF98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xFDB JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x1125 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x1112 JUMPI PUSH2 0x109B PUSH2 0x12F1 JUMP JUMPDEST DUP2 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x10F9 JUMPI DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH0 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST DUP3 PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4B637E8F PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x99F2891DB7A8DB76249871A02B43B68C0BB8F22EF8A3BC1034AE9375EF6B7C3C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1170 JUMPI JUMP JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH32 0x65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11CB JUMPI POP JUMP JUMPDEST PUSH4 0xE2517D3F PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1267 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1267 JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLER SWAP3 SWAP2 SWAP1 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 SLOAD AND PUSH2 0x12FD JUMPI JUMP JUMPDEST PUSH4 0xD93C0665 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x7 SLOAD EQ PUSH2 0x131D JUMPI PUSH1 0x2 PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x1125 JUMPI PUSH2 0x1346 PUSH2 0x12F1 JUMP JUMPDEST DUP1 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP4 DUP2 LT PUSH2 0x139E JUMPI PUSH1 0x20 DUP5 PUSH0 SWAP5 SWAP6 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 DUP6 DUP8 MSTORE DUP7 DUP5 MSTORE SUB PUSH1 0x40 DUP7 KECCAK256 SSTORE DUP1 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST SWAP2 POP PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x4AC477AA11445CA07F88E4DAA0811C7D59D70062D5876F3F8659429CCD424464 PUSH20 0x6F6C634300081E00330000000000000000000000 ",
							"sourceMap": "551:7500:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;779:24;551:7500;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;3638:11:3;551:7500:11;;;3638:27:3;551:7500:11;;;;;;-1:-1:-1;551:7500:11;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;4747:26:0;551:7500:11;;;;:::i;:::-;4717:18:0;2475:4;4717:18;;-1:-1:-1;551:7500:11;3901:6:0;551:7500:11;;3901:22:0;551:7500:11;-1:-1:-1;551:7500:11;3901:22:0;551:7500:11;3810:120:0;;4717:18;2475:4;:::i;:::-;4747:26;:::i;:::-;;551:7500:11;;;;;;;;;;;;;;;;;;711:24;551:7500;;;;;;;;;;;;;;;;;7690:11;551:7500;7703:17;551:7500;2908:12:3;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;:::i;:::-;;;5671:4;;5649:10;:27;551:7500;;-1:-1:-1;;;;;551:7500:11;;7509:21:3;;7505:91;;7064:25;551:7500:11;1315:72:7;;;;:::i;:::-;6214:21:3;551:7500:11;6214:21:3;551:7500:11;6214:21:3;:::i;:::-;;551:7500:11;;;;;;;;;;;;;;;;;;;;;7064:25:3;551:7500:11;;7505:91:3;-1:-1:-1;;;7553:32:3;;551:7500:11;;;;;7553:32:3;;551:7500:11;;;-1:-1:-1;;;551:7500:11;;;;;;;;;;;;-1:-1:-1;;;551:7500:11;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;3440:5:3;551:7500:11;;:::i;:::-;;;735:10:6;;3440:5:3;:::i;:::-;551:7500:11;;;;;;;;;;;;;;;;;;;;;931:26;551:7500;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;-1:-1:-1;551:7500:11;;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;-1:-1:-1;551:7500:11;;-1:-1:-1;551:7500:11;;;-1:-1:-1;;;551:7500:11;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;:::i;:::-;;;;;;2954:6:0;551:7500:11;;;2954:29:0;551:7500:11;;;;;;-1:-1:-1;551:7500:11;;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;2475:4:0;;:::i;:::-;1315:72:7;;:::i;:::-;2408:4;551:7500:11;;2398:14:7;551:7500:11;;;2398:14:7;551:7500:11;2427:20:7;551:7500:11;;;735:10:6;551:7500:11;;2427:20:7;551:7500:11;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;:::i;:::-;847:24;551:7500;;2954:6:0;551:7500:11;;;;;;;;735:10:6;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;3519:23:0;3515:108;;1315:72:7;;:::i;:::-;2466:103:8;;:::i;:::-;6655:11:11;;6651:36;;551:7500;;;;;;;;;;;;;;;;;;;6701:24;6697:87;;551:7500;6852:6;551:7500;6803:27;551:7500;6803:27;551:7500;6803:27;:::i;:::-;;551:7500;6852:6;:::i;:::-;551:7500;;;;;6883:38;551:7500;735:10:6;6883:38:11;;551:7500;3068:21:8;551:7500:11;;;6697:87;551:7500;;;;;;;;;;;;;;6094:62;;;;6734:50;;551:7500;;;;;;6734:50;6651:36;-1:-1:-1;;;6675:12:11;;551:7500;4329:12;6675;3515:108:0;-1:-1:-1;;;3565:47:0;;735:10:6;551:7500:11;;847:24;551:7500;;;3565:47:0;;551:7500:11;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;-1:-1:-1;;;;;551:7500:11;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2908:12:3;551:7500:11;;;;;;;;;;;;;;;;;;;;;;1796:7:7;551:7500:11;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;1315:72:7;;:::i;:::-;2466:103:8;;:::i;:::-;6009:11:11;;6005:36;;6065:10;551:7500;;;;;;;;;;6055:30;6051:105;;6175:27;551:7500;6175:27;551:7500;6175:27;:::i;:::-;;551:7500;6230:6;6065:10;;6230:6;:::i;:::-;551:7500;;;;;6065:10;;6261:44;551:7500;6065:10;6261:44;;551:7500;3068:21:8;551:7500:11;;;6051:105;6065:10;551:7500;6065:10;;551:7500;;;;;;;;;6094:62;;;;;;6065:10;551:7500;;;;;;6094:62;6005:36;-1:-1:-1;;;6029:12:11;;551:7500;4329:12;6029;551:7500;;;;;;;-1:-1:-1;;551:7500:11;;;;;;:::i;:::-;735:10:6;551:7500:11;;;;;;;;;;;;;;;;;;3519:23:0;3515:108;;1315:72:7;;:::i;:::-;2466:103:8;;:::i;:::-;-1:-1:-1;;;;;551:7500:11;;4219:16;;4215:67;;4295:11;;4291:61;;4453:4;4439:19;;4435:109;;4643:22;551:7500;2908:12:3;551:7500:11;4643:22;:::i;:::-;-1:-1:-1;;;;;4761:26:11;;4757:115;;551:7500;4950:21;551:7500;4950:21;551:7500;4950:21;:::i;:::-;;551:7500;4453:4;4994:29;;;;551:7500;;;;;4994:29;;;551:7500;4994:29;;551:7500;;;;;;;4453:4;4994:29;4453:4;;;4994:29;;;;;;551:7500;-1:-1:-1;4990:485:11;;;551:7500;;;;;4990:485;;;;;;;551:7500;5366:21;5408:56;551:7500;4950:21;551:7500;5366:21;:::i;:::-;;551:7500;;5238:39;;;;5408:56;;551:7500;5408:56;;551:7500;;;;;;4994:29;551:7500;;;;;;;;-1:-1:-1;;;551:7500:11;;;;5408:56;4990:485;5091:197;;:::i;:::-;;;;4990:485;;;5091:197;551:7500;;5196:21;551:7500;4950:21;551:7500;5196:21;:::i;:::-;;551:7500;;5238:39;;;;;;;;551:7500;5238:39;;551:7500;;;;;;4994:29;551:7500;;;;;;;;:::i;:::-;5238:39;;;551:7500;;;;;;;;;;;;;4990:485;551:7500;;;;;;;5043:36;551:7500;735:10:6;5043:36:11;;551:7500;3068:21:8;551:7500:11;;;4994:29;;;;;551:7500;4994:29;;:::i;:::-;551:7500;4994:29;;;;;551:7500;;;4757:115;-1:-1:-1;;;551:7500:11;4810:51;;;551:7500;;;;;-1:-1:-1;;;;;551:7500:11;;;;4810:51;4435:109;4481:52;551:7500;;;4481:52;;;;;;551:7500;4481:52;;551:7500;;;;;;;;;;;;;;;;4481:52;4291:61;4329:12;;;551:7500;4329:12;551:7500;;4329:12;4215:67;4258:13;;;551:7500;4258:13;551:7500;;4258:13;3515:108:0;3565:47;;;551:7500:11;3565:47:0;735:10:6;551:7500:11;;711:24;551:7500;;;;3565:47:0;551:7500:11;;;;;;-1:-1:-1;;551:7500:11;;;;2475:4:0;;:::i;:::-;1796:7:7;551:7500:11;;;;2140:9:7;2136:62;;551:7500:11;;;1796:7:7;551:7500:11;2674:22:7;551:7500:11;;;735:10:6;551:7500:11;;2674:22:7;551:7500:11;2136:62:7;2172:15;;;551:7500:11;2172:15:7;551:7500:11;;2172:15:7;551:7500:11;;;;;;-1:-1:-1;;551:7500:11;;;;;;:::i;:::-;735:10:6;-1:-1:-1;;;;;551:7500:11;;5421:34:0;5417:102;;5529:37;551:7500:11;;;5529:37:0;:::i;:::-;551:7500:11;5417:102:0;5478:30;;;551:7500:11;5478:30:0;551:7500:11;;5478:30:0;551:7500:11;;;;;;-1:-1:-1;;551:7500:11;;;;;963:32;551:7500;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;2761:2:3;551:7500:11;;;;;;;;;-1:-1:-1;;551:7500:11;;;;4330:25:0;551:7500:11;;;;:::i;:::-;4300:18:0;2475:4;4300:18;;-1:-1:-1;551:7500:11;3901:6:0;551:7500:11;;3901:22:0;551:7500:11;-1:-1:-1;551:7500:11;3901:22:0;551:7500:11;3810:120:0;;2475:4;4330:25;:::i;551:7500:11:-;;;;;;-1:-1:-1;;551:7500:11;;;;;;;847:24;551:7500;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;-1:-1:-1;551:7500:11;3901:6:0;551:7500:11;;3901:22:0;551:7500:11;-1:-1:-1;551:7500:11;3901:22:0;551:7500:11;3810:120:0;;551:7500:11;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;;;;;;735:10:6;551:7500:11;;;;;;;;;;;;;;-1:-1:-1;;10561:36:3;;10557:309;;551:7500:11;4967:5:3;;;;;:::i;10557:309::-;10617:24;;;10613:130;;9794:19;;9790:89;;735:10:6;9892:21:3;9888:90;;4967:5;551:7500:11;;;;;;;;;;;;;;735:10:6;551:7500:11;;;;;;;;;;;;;10557:309:3;;;9888:90;9936:31;;;551:7500:11;9936:31:3;551:7500:11;;;;;9936:31:3;9790:89;9836:32;;;551:7500:11;9836:32:3;551:7500:11;;;;;9836:32:3;10613:130;10668:60;;;;;551:7500:11;10668:60:3;735:10:6;551:7500:11;;;;;;;;10668:60:3;551:7500:11;;;;;;-1:-1:-1;;551:7500:11;;;;;2908:12:3;551:7500:11;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;:::i;:::-;;;735:10:6;;9794:19:3;9790:89;;-1:-1:-1;;;;;551:7500:11;;9892:21:3;;9888:90;;735:10:6;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;10066:31:3;551:7500:11;735:10:6;10066:31:3;;551:7500:11;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;1837:5:3;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1837:5:3;551:7500:11;;;;;;;;;;;;-1:-1:-1;551:7500:11;;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;-1:-1:-1;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2673:47:0;;;:87;;;;551:7500:11;;;;;;;2673:87:0;-1:-1:-1;;;862:40:9;;-1:-1:-1;2673:87:0;;;551:7500:11;;;;;;;;;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;-1:-1:-1;;551:7500:11;;;;:::o;:::-;;;;-1:-1:-1;;;;;551:7500:11;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;551:7500:11;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;551:7500:11;;;;;-1:-1:-1;551:7500:11;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;;;;;-1:-1:-1;551:7500:11;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;:::o;:::-;;;;;;;;;;:::o;5374:300:3:-;-1:-1:-1;;;;;551:7500:11;;5457:18:3;;5453:86;;-1:-1:-1;;;;;551:7500:11;;5552:16:3;;5548:86;;1315:72:7;;:::i;:::-;551:7500:11;5473:1:3;551:7500:11;5473:1:3;551:7500:11;;;5473:1:3;551:7500:11;;6321:19:3;;;6317:115;;551:7500:11;7064:25:3;551:7500:11;;;;5473:1:3;551:7500:11;5473:1:3;551:7500:11;;;;5473:1:3;551:7500:11;;;5473:1:3;551:7500:11;5473:1:3;551:7500:11;;;5473:1:3;551:7500:11;;;;;;;;;;;;7064:25:3;5374:300::o;6317:115::-;6367:50;;;;5473:1;6367:50;;551:7500:11;;;;;;5473:1:3;6367:50;5548:86;7553:32;;;5473:1;5591:32;5473:1;5591:32;551:7500:11;;5473:1:3;5591:32;5453:86;5498:30;;;5473:1;5498:30;5473:1;5498:30;551:7500:11;;5473:1:3;5498:30;3199:103:0;735:10:6;-1:-1:-1;551:7500:11;;;;;;;;;;;;3519:23:0;3515:108;;3199:103::o;3515:108::-;3565:47;;;-1:-1:-1;3565:47:0;735:10:6;3565:47:0;551:7500:11;779:24;551:7500;;;-1:-1:-1;3565:47:0;3199:103;-1:-1:-1;551:7500:11;;;2954:6:0;551:7500:11;;;;;;;;735:10:6;551:7500:11;;;;;;;;;;3519:23:0;3515:108;;3199:103;:::o;3515:108::-;3565:47;;;-1:-1:-1;3565:47:0;735:10:6;3565:47:0;551:7500:11;;;;-1:-1:-1;3565:47:0;6179:316;551:7500:11;;;;2954:6:0;551:7500:11;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;;;;;;;;;2954:6:0;551:7500:11;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;;;735:10:6;;551:7500:11;;6370:40:0;;551:7500:11;6370:40:0;6347:4;6424:11;:::o;6272:217::-;6466:12;;551:7500:11;6466:12:0;:::o;6732:317::-;551:7500:11;;;;2954:6:0;551:7500:11;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;;;;;;;;;;2954:6:0;551:7500:11;;;;;;;;-1:-1:-1;;;;;551:7500:11;;;;;;;;;;;;;;;-1:-1:-1;;551:7500:11;;;735:10:6;;551:7500:11;;6924:40:0;;551:7500:11;6924:40:0;551:7500:11;6978:11:0;:::o;1878:128:7:-;551:7500:11;1796:7:7;551:7500:11;;1939:61:7;;1878:128::o;1939:61::-;1974:15;;;-1:-1:-1;1974:15:7;;-1:-1:-1;1974:15:7;2575:307:8;1899:1;2702:7;551:7500:11;2702:18:8;2698:86;;1899:1;2702:7;551:7500:11;2575:307:8:o;2698:86::-;2743:30;;;-1:-1:-1;2743:30:8;;-1:-1:-1;2743:30:8;7965:206:3;;;;-1:-1:-1;;;;;551:7500:11;8035:21:3;;8031:89;;1315:72:7;;:::i;:::-;551:7500:11;8054:1:3;551:7500:11;8054:1:3;551:7500:11;;;8054:1:3;551:7500:11;;6321:19:3;;;6317:115;;551:7500:11;;8054:1:3;551:7500:11;;7064:25:3;551:7500:11;;;;;;;;;;;;;6791:21:3;551:7500:11;;6791:21:3;551:7500:11;;;;;;7064:25:3;7965:206::o;6317:115::-;6367:50;;;;;8054:1;6367:50;;551:7500:11;;;;;;8054:1:3;6367:50"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1020400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"BURNER_ROLE()": "290",
								"DEFAULT_ADMIN_ROLE()": "626",
								"MINTER_ROLE()": "733",
								"PAUSER_ROLE()": "794",
								"_performMint(address,uint256)": "53290",
								"allowance(address,address)": "3186",
								"approve(address,uint256)": "24352",
								"balanceOf(address)": "2770",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "334",
								"getRoleAdmin(bytes32)": "2457",
								"getStats()": "7053",
								"grantRole(bytes32,address)": "33436",
								"hasRole(bytes32,address)": "2912",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"pause()": "30151",
								"paused()": "2584",
								"renounceRole(bytes32,address)": "29066",
								"revokeRole(bytes32,address)": "33880",
								"supportsInterface(bytes4)": "275",
								"symbol()": "infinite",
								"totalBurnedAmount()": "2459",
								"totalInCirculation()": "2594",
								"totalMinted()": "2748",
								"totalSupply()": "2327",
								"transfer(address,uint256)": "53413",
								"transferFrom(address,address,uint256)": "77696",
								"unpause()": "27864"
							},
							"internal": {
								"_update(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "CODESIZE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "28"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "36"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "42"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "44"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "45"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "46"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 2061,
									"end": 2082,
									"name": "PUSH",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3126,
									"end": 3149,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3122,
									"end": 3239,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "47"
								},
								{
									"begin": 3122,
									"end": 3239,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3252,
									"end": 3277,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3248,
									"end": 3369,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "49"
								},
								{
									"begin": 3248,
									"end": 3369,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3382,
									"end": 3401,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3378,
									"end": 3448,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "53"
								},
								{
									"begin": 3378,
									"end": 3448,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3461,
									"end": 3482,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3457,
									"end": 3529,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "53"
								},
								{
									"begin": 3457,
									"end": 3529,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 3601,
									"end": 3631,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "55"
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "56"
								},
								{
									"begin": 3757,
									"end": 3789,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "57"
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 3554,
									"end": 3591,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "tag",
									"source": 11,
									"value": "56"
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3554,
									"end": 3591,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3601,
									"end": 3631,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 3601,
									"end": 3631,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3601,
									"end": 3631,
									"name": "tag",
									"source": 11,
									"value": "55"
								},
								{
									"begin": 3601,
									"end": 3631,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3601,
									"end": 3631,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3715,
									"end": 3747,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "58"
								},
								{
									"begin": 3715,
									"end": 3747,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3715,
									"end": 3747,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "6"
								},
								{
									"begin": 3715,
									"end": 3747,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3715,
									"end": 3747,
									"name": "tag",
									"source": 11,
									"value": "58"
								},
								{
									"begin": 3715,
									"end": 3747,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3715,
									"end": 3747,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3757,
									"end": 3789,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 3757,
									"end": 3789,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3757,
									"end": 3789,
									"name": "tag",
									"source": 11,
									"value": "57"
								},
								{
									"begin": 3757,
									"end": 3789,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3757,
									"end": 3789,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "RETURN",
									"source": 11
								},
								{
									"begin": 3457,
									"end": 3529,
									"name": "tag",
									"source": 11,
									"value": "53"
								},
								{
									"begin": 3457,
									"end": 3529,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3424,
									"end": 3437,
									"name": "PUSH",
									"source": 11,
									"value": "D92E233D"
								},
								{
									"begin": 3424,
									"end": 3437,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 3424,
									"end": 3437,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 3505,
									"end": 3518,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 3505,
									"end": 3518,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 3248,
									"end": 3369,
									"name": "tag",
									"source": 11,
									"value": "49"
								},
								{
									"begin": 3248,
									"end": 3369,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3300,
									"end": 3358,
									"name": "PUSH",
									"source": 11,
									"value": "84"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "PUSH",
									"source": 11,
									"value": "F7693C3D"
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 3300,
									"end": 3358,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3300,
									"end": 3358,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 3300,
									"end": 3358,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3300,
									"end": 3358,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1C"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "44"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "546F6B656E2073796D626F6C2063616E6E6F7420626520656D70747900000000"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "64"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3300,
									"end": 3358,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 3122,
									"end": 3239,
									"name": "tag",
									"source": 11,
									"value": "47"
								},
								{
									"begin": 3122,
									"end": 3239,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "PUSH",
									"source": 11,
									"value": "84"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "PUSH",
									"source": 11,
									"value": "F7693C3D"
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1A"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "44"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "546F6B656E206E616D652063616E6E6F7420626520656D707479000000000000"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "64"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3172,
									"end": 3228,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "44"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "45"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "42"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "59"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "62"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "63"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "46"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "62"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "F8"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "63"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP11",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "59"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "64"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "65"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "66"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "67"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "67"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "66"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "64"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "65"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B71"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "36"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "7F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B71"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "69"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "70"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "72"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "72"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "F8"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "70"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP10",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "69"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "74"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "75"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "76"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "77"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "77"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "76"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "74"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "75"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "7F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "85"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "85"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MCOPY",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "tag",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "D08C889A2B804C67887CD70E57FF036E6BC341281711F6587C117607D171D093"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "90"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "D08C889A2B804C67887CD70E57FF036E6BC341281711F6587C117607D171D093"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 735,
									"end": 745,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "1400FE2F234CF888B5E4C66700C7903F33F31BFC9675E51CB0119F915EB534D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 6347,
									"end": 6351,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6424,
									"end": 6435,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 6272,
									"end": 6489,
									"name": "tag",
									"source": 0,
									"value": "90"
								},
								{
									"begin": 6272,
									"end": 6489,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 6466,
									"end": 6478,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 6466,
									"end": 6478,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6466,
									"end": 6478,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "tag",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "D85980D215817C0B8E163B3ADA55F1A92595FCE2B7E9762F86DAB2A6E2821760"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "90"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "D85980D215817C0B8E163B3ADA55F1A92595FCE2B7E9762F86DAB2A6E2821760"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 735,
									"end": 745,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 779,
									"end": 803,
									"name": "PUSH",
									"source": 11,
									"value": "65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A"
								},
								{
									"begin": 779,
									"end": 803,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "1400FE2F234CF888B5E4C66700C7903F33F31BFC9675E51CB0119F915EB534D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 6347,
									"end": 6351,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6424,
									"end": 6435,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "14E9B15B95B23BB1237D5A4068B884F1A9E0FED3B2F5A7F00A00E8A8E130008"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "90"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "14E9B15B95B23BB1237D5A4068B884F1A9E0FED3B2F5A7F00A00E8A8E130008"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 735,
									"end": 745,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 711,
									"end": 735,
									"name": "PUSH",
									"source": 11,
									"value": "9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
								},
								{
									"begin": 711,
									"end": 735,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "1400FE2F234CF888B5E4C66700C7903F33F31BFC9675E51CB0119F915EB534D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 6347,
									"end": 6351,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6424,
									"end": 6435,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 6179,
									"end": 6495,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "2AA3FE5C7BF9C3D841807CF5FC1261067C392EAB3054A316764BD8BA07E437F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "90"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "2AA3FE5C7BF9C3D841807CF5FC1261067C392EAB3054A316764BD8BA07E437F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 735,
									"end": 745,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 735,
									"end": 745,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 847,
									"end": 871,
									"name": "PUSH",
									"source": 11,
									"value": "3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848"
								},
								{
									"begin": 847,
									"end": 871,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "1400FE2F234CF888B5E4C66700C7903F33F31BFC9675E51CB0119F915EB534D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 551,
									"end": 8051,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 6370,
									"end": 6410,
									"name": "LOG4",
									"source": 0
								},
								{
									"begin": 6347,
									"end": 6351,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 6424,
									"end": 6435,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 6424,
									"end": 6435,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207f4ac477aa11445ca07f88e4daa0811c7d59d70062d5876f3f8659429ccd424464736f6c634300081e0033",
									".code": [
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1FFC9A7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "6FDDE03"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "95EA7B3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "18160DDD"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "248A9CA3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "282C51F3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "2F2FF15D"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "313CE567"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "35AB5F64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "36568ABE"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3F4BA83A"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40C10F19"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "42966C68"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "5C975ABB"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "5CB0C16F"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "79CC6790"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "8456CB59"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "91D14854"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A217FDDF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A2309FF8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A9059CBB"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "B028D807"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "C59D4847"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "D5391393"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "71"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "D547741F"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "DD62ED3E"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E63AB1E9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 779,
											"end": 803,
											"name": "PUSH",
											"source": 11,
											"value": "65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "75"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3638,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3638,
											"end": 3665,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "73"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4747,
											"end": 4773,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3907,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2475,
											"end": 2479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4747,
											"end": 4773,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 4747,
											"end": 4773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4747,
											"end": 4773,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 4747,
											"end": 4773,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4747,
											"end": 4773,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "71"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 711,
											"end": 735,
											"name": "PUSH",
											"source": 11,
											"value": "9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "69"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7690,
											"end": 7701,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 7703,
											"end": 7720,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "67"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "109"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 5671,
											"end": 5675,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5671,
											"end": 5675,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5659,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7509,
											"end": 7530,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7509,
											"end": 7530,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 6214,
											"end": 6235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "tag",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "tag",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "110"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "13DB9B1E481CD95B198B58D85B1B08185B1B1BDDD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "52"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 3440,
											"end": 3445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "tag",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "63"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 931,
											"end": 957,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "61"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "59"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "145"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "7F"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2983,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2475,
											"end": 2479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2408,
											"end": 2412,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2412,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2412,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2427,
											"end": 2447,
											"name": "PUSH",
											"source": 7,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2427,
											"end": 2447,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 847,
											"end": 871,
											"name": "PUSH",
											"source": 11,
											"value": "3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3519,
											"end": 3542,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 2466,
											"end": 2569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "tag",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6655,
											"end": 6666,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6655,
											"end": 6666,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6651,
											"end": 6687,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 6651,
											"end": 6687,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6701,
											"end": 6725,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 6697,
											"end": 6784,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "169"
										},
										{
											"begin": 6697,
											"end": 6784,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6852,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6803,
											"end": 6830,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6803,
											"end": 6830,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6803,
											"end": 6830,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 6803,
											"end": 6830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6803,
											"end": 6830,
											"name": "tag",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 6803,
											"end": 6830,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6803,
											"end": 6830,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 6852,
											"end": 6858,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 6852,
											"end": 6858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6852,
											"end": 6858,
											"name": "tag",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 6852,
											"end": 6858,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6883,
											"end": 6921,
											"name": "PUSH",
											"source": 11,
											"value": "8009940FB138AE33FBB70C10B643E840C71F1654344CC173975A815E117E687"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6883,
											"end": 6921,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6883,
											"end": 6921,
											"name": "LOG3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3068,
											"end": 3089,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 6697,
											"end": 6784,
											"name": "tag",
											"source": 11,
											"value": "169"
										},
										{
											"begin": 6697,
											"end": 6784,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "PUSH",
											"source": 11,
											"value": "DB42144D"
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 6734,
											"end": 6784,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6734,
											"end": 6784,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6734,
											"end": 6784,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 6651,
											"end": 6687,
											"name": "tag",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 6651,
											"end": 6687,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F2A2005"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6675,
											"end": 6687,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6675,
											"end": 6687,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6675,
											"end": 6687,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2517D3F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 847,
											"end": 871,
											"name": "PUSH",
											"source": 11,
											"value": "3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "51"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "49"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "47"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 2466,
											"end": 2569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "tag",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6009,
											"end": 6020,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6009,
											"end": 6020,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6005,
											"end": 6041,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 6005,
											"end": 6041,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6055,
											"end": 6085,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 6051,
											"end": 6156,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 6051,
											"end": 6156,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6175,
											"end": 6202,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6175,
											"end": 6202,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6175,
											"end": 6202,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 6175,
											"end": 6202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6175,
											"end": 6202,
											"name": "tag",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 6175,
											"end": 6202,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6175,
											"end": 6202,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 6230,
											"end": 6236,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 6230,
											"end": 6236,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 6230,
											"end": 6236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6230,
											"end": 6236,
											"name": "tag",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 6230,
											"end": 6236,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6261,
											"end": 6305,
											"name": "PUSH",
											"source": 11,
											"value": "8009940FB138AE33FBB70C10B643E840C71F1654344CC173975A815E117E687"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 6261,
											"end": 6305,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6261,
											"end": 6305,
											"name": "LOG3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3068,
											"end": 3089,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 6051,
											"end": 6156,
											"name": "tag",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 6051,
											"end": 6156,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "PUSH",
											"source": 11,
											"value": "DB42144D"
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6065,
											"end": 6075,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6094,
											"end": 6156,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 6005,
											"end": 6041,
											"name": "tag",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 6005,
											"end": 6041,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F2A2005"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "15A28D26FA1BF736CF7EDC9922607171CCB09C3C73B808E7772A3013E068A522"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3519,
											"end": 3542,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "205"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "205"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 2466,
											"end": 2569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 2466,
											"end": 2569,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4219,
											"end": 4235,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4219,
											"end": 4235,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4215,
											"end": 4282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 4215,
											"end": 4282,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4295,
											"end": 4306,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4295,
											"end": 4306,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4291,
											"end": 4352,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 4291,
											"end": 4352,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 4439,
											"end": 4458,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4439,
											"end": 4458,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4435,
											"end": 4544,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 4435,
											"end": 4544,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4643,
											"end": 4665,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4643,
											"end": 4665,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 4643,
											"end": 4665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4643,
											"end": 4665,
											"name": "tag",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 4643,
											"end": 4665,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4761,
											"end": 4787,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4761,
											"end": 4787,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 4757,
											"end": 4872,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 4757,
											"end": 4872,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 4950,
											"end": 4971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "EXTCODESIZE",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "B028D807"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4453,
											"end": 4457,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A0"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "tag",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 5408,
											"end": 5464,
											"name": "PUSH",
											"source": 11,
											"value": "A4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 5366,
											"end": 5387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "tag",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5366,
											"end": 5387,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "PUSH",
											"source": 11,
											"value": "E6921FC1"
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 5408,
											"end": 5464,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5408,
											"end": 5464,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5408,
											"end": 5464,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5408,
											"end": 5464,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2AB735B737BBB71036B4B73A34B7339032B93937B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "59"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5408,
											"end": 5464,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 5091,
											"end": 5288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "tag",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "tag",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 5091,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "231"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5196,
											"end": 5217,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4950,
											"end": 4971,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 5196,
											"end": 5217,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 5196,
											"end": 5217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5196,
											"end": 5217,
											"name": "tag",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 5196,
											"end": 5217,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5196,
											"end": 5217,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "PUSH",
											"source": 11,
											"value": "E6921FC1"
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "231"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5238,
											"end": 5277,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "tag",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 4990,
											"end": 5475,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5043,
											"end": 5079,
											"name": "PUSH",
											"source": 11,
											"value": "969CD201F68F120BAFF2BF3C59BC3B534434E08B69A71A14AB85CB79CD3B63E4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5043,
											"end": 5079,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5043,
											"end": 5079,
											"name": "LOG3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3068,
											"end": 3089,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "tag",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4994,
											"end": 5023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "tag",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "tag",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 4994,
											"end": 5023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4757,
											"end": 4872,
											"name": "tag",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 4757,
											"end": 4872,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "594A20B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4810,
											"end": 4861,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4810,
											"end": 4861,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4810,
											"end": 4861,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4810,
											"end": 4861,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4435,
											"end": 4544,
											"name": "tag",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 4435,
											"end": 4544,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "PUSH",
											"source": 11,
											"value": "F7693C3D"
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1E"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "43616E6E6F74206D696E7420746F20636F6E747261637420697473656C660000"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4533,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4291,
											"end": 4352,
											"name": "tag",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 4291,
											"end": 4352,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "PUSH",
											"source": 11,
											"value": "1F2A2005"
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4215,
											"end": 4282,
											"name": "tag",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 4215,
											"end": 4282,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4258,
											"end": 4271,
											"name": "PUSH",
											"source": 11,
											"value": "D92E233D"
										},
										{
											"begin": 4258,
											"end": 4271,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 4258,
											"end": 4271,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4258,
											"end": 4271,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4258,
											"end": 4271,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "E2517D3F"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 711,
											"end": 735,
											"name": "PUSH",
											"source": 11,
											"value": "9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2475,
											"end": 2479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "tag",
											"source": 0,
											"value": "238"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2140,
											"end": 2149,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2696,
											"name": "PUSH",
											"source": 7,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2696,
											"name": "LOG1",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "tag",
											"source": 7,
											"value": "239"
										},
										{
											"begin": 2136,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "PUSH",
											"source": 7,
											"value": "8DFC202B"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2172,
											"end": 2187,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5421,
											"end": 5455,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "248"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 5529,
											"end": 5566,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "tag",
											"source": 0,
											"value": "248"
										},
										{
											"begin": 5529,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "tag",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 5417,
											"end": 5519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "334BD919"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "PUSH",
											"source": 0,
											"value": "E1"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5478,
											"end": 5508,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 963,
											"end": 995,
											"name": "PUSH",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4330,
											"end": 4355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "248"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "262"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "262"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4300,
											"end": 4318,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3907,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "tag",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 2475,
											"end": 2479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4330,
											"end": 4355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4330,
											"end": 4355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 847,
											"end": 871,
											"name": "PUSH",
											"source": 11,
											"value": "3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3907,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3901,
											"end": 3923,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3810,
											"end": 3930,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "278"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "278"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "279"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "279"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10561,
											"end": 10597,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10561,
											"end": 10597,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "281"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 4967,
											"end": 4972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "tag",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "tag",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH",
											"source": 3,
											"value": "4A1406B1"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH",
											"source": 3,
											"value": "E1"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "tag",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH",
											"source": 3,
											"value": "E602DF05"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "tag",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH",
											"source": 3,
											"value": "7DC7A0D9"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH",
											"source": 3,
											"value": "E1"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "287"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1837,
											"end": 1842,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1837,
											"end": 1842,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "7F"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7965DB0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2720,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "tag",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 862,
											"end": 902,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 862,
											"end": 902,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "326"
										},
										{
											"begin": 2673,
											"end": 2760,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MCOPY",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "333"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5374,
											"end": 5674,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 5374,
											"end": 5674,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5457,
											"end": 5475,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5457,
											"end": 5475,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "346"
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "348"
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "350"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "350"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "351"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 5374,
											"end": 5674,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "tag",
											"source": 3,
											"value": "351"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 3,
											"value": "391434E3"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 3,
											"value": "E2"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "tag",
											"source": 3,
											"value": "348"
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F05"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5591,
											"end": 5623,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "tag",
											"source": 3,
											"value": "346"
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "PUSH",
											"source": 3,
											"value": "4B637E8F"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "PUSH",
											"source": 3,
											"value": "E1"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "99F2891DB7A8DB76249871A02B43B68C0BB8F22EF8A3BC1034AE9375EF6B7C3C"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3519,
											"end": 3542,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3302,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "tag",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "E2517D3F"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 779,
											"end": 803,
											"name": "PUSH",
											"source": 11,
											"value": "65D7A28E3265B37A6474929F336521B332C1681B933F6CB9F3376673440D862A"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3519,
											"end": 3542,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3302,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3199,
											"end": 3302,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "tag",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 3515,
											"end": 3623,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "E2517D3F"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3565,
											"end": 3612,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 6179,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "357"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "PUSH",
											"source": 0,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6370,
											"end": 6410,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 6347,
											"end": 6351,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6424,
											"end": 6435,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6424,
											"end": 6435,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6272,
											"end": 6489,
											"name": "tag",
											"source": 0,
											"value": "357"
										},
										{
											"begin": 6272,
											"end": 6489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6466,
											"end": 6478,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6466,
											"end": 6478,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6466,
											"end": 6478,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6466,
											"end": 6478,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6732,
											"end": 7049,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 6732,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "357"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2954,
											"end": 2960,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6924,
											"end": 6964,
											"name": "PUSH",
											"source": 0,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 6924,
											"end": 6964,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6924,
											"end": 6964,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 6978,
											"end": 6989,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6978,
											"end": 6989,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1878,
											"end": 2006,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1878,
											"end": 2006,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1878,
											"end": 2006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "tag",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 1939,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "PUSH",
											"source": 7,
											"value": "D93C0665"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1974,
											"end": 1989,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2575,
											"end": 2882,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 2575,
											"end": 2882,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 2702,
											"end": 2709,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2702,
											"end": 2720,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 2702,
											"end": 2709,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2575,
											"end": 2882,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "tag",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 2698,
											"end": 2784,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 8,
											"value": "3EE5AEB5"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2743,
											"end": 2773,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7965,
											"end": 8171,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8035,
											"end": 8056,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8035,
											"end": 8056,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "346"
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "367"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1315,
											"end": 1387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "tag",
											"source": 7,
											"value": "367"
										},
										{
											"begin": 1315,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8054,
											"end": 8055,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8054,
											"end": 8055,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8054,
											"end": 8055,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "368"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8054,
											"end": 8055,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 6791,
											"end": 6812,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 7965,
											"end": 8171,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "tag",
											"source": 3,
											"value": "368"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 3,
											"value": "391434E3"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 3,
											"value": "E2"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 8054,
											"end": 8055,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 551,
											"end": 8051,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 8054,
											"end": 8055,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "REVERT",
											"source": 3
										}
									]
								},
								"01400FE2F234CF888B5E4C66700C7903F33F31BFC9675E51CB0119F915EB534D": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
								"014E9B15B95B23BB1237D5A4068B884F1A9E0FED3B2F5A7F00A00E8A8E130008": "15a28d26fa1bf736cf7edc9922607171ccb09c3c73b808e7772a3013e068a522",
								"2AA3FE5C7BF9C3D841807CF5FC1261067C392EAB3054A316764BD8BA07E437F8": "847f481f687befb06ed3511f1a8dcef57e83007c0147ae5047583d7056170937",
								"D08C889A2B804C67887CD70E57FF036E6BC341281711F6587C117607D171D093": "05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc",
								"D85980D215817C0B8E163B3ADA55F1A92595FCE2B7E9762F86DAB2A6E2821760": "99f2891db7a8db76249871a02b43b68c0bb8f22ef8a3bc1034ae9375ef6b7c3c"
							},
							"sourceList": [
								"@openzeppelin/contracts/access/AccessControl.sol",
								"@openzeppelin/contracts/access/IAccessControl.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ReentrancyGuard.sol",
								"@openzeppelin/contracts/utils/introspection/ERC165.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"XPToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"BURNER_ROLE()": "282c51f3",
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"MINTER_ROLE()": "d5391393",
							"PAUSER_ROLE()": "e63ab1e9",
							"_performMint(address,uint256)": "b028d807",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getStats()": "c59d4847",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"totalBurnedAmount()": "35ab5f64",
							"totalInCirculation()": "5cb0c16f",
							"totalMinted()": "a2309ff8",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BurnOperationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BurningDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentMinted\",\"type\":\"uint256\"}],\"name\":\"DailyMintLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"ExcessiveBurnRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"name\":\"ExcessiveMintRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provided\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidContractState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"}],\"name\":\"MathOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"}],\"name\":\"MathUnderflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MintOperationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MintingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleAlreadyGranted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleNotGranted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"SuspiciousActivity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferOperationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedBurner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedMinter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_performMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"XP Token with controlled minting/burning for the game ecosystem Only the authorized factory contract can mint new XP tokens when CRIDA is locked XP tokens represent experience points that can be locked to create game tokens\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"_performMint(address,uint256)\":{\"details\":\"Internal mint function for error handling separation\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burn XP tokens from user\",\"params\":{\"amount\":\"Amount of tokens to burn\"}},\"burnFrom(address,uint256)\":{\"details\":\"Burn XP tokens from specific account (factory use)\",\"params\":{\"amount\":\"Amount of tokens to burn\",\"from\":\"Address to burn tokens from\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStats()\":{\"details\":\"Get minting/burning statistics\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mint(address,uint256)\":{\"details\":\"Mint XP tokens to user when CRIDA is locked\",\"params\":{\"amount\":\"Amount of tokens to mint\",\"to\":\"Address to mint tokens to\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pause contract operations\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalInCirculation()\":{\"details\":\"Get total XP tokens in circulation\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"unpause()\":{\"details\":\"Unpause contract operations\"}},\"title\":\"XPToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"XPToken.sol\":\"XPToken\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67\",\"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0\",\"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c\",\"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"XPToken.sol\":{\"keccak256\":\"0x03393a7aed2f208824c821110821df1b5cd32620bdfcf80a5aef0ce665636d8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://beb002b9e25bd86149b53d5e6c9491a074c33730a1af116c9a26aa19e66e12c9\",\"dweb:/ipfs/QmfLK5QpK9swm9YSaAkEgpGg1EMJiceeHoVnuyqWDkCg3Y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 538,
								"contract": "XPToken.sol:XPToken",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 544,
								"contract": "XPToken.sol:XPToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 546,
								"contract": "XPToken.sol:XPToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 548,
								"contract": "XPToken.sol:XPToken",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 550,
								"contract": "XPToken.sol:XPToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 26,
								"contract": "XPToken.sol:XPToken",
								"label": "_roles",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
							},
							{
								"astId": 1173,
								"contract": "XPToken.sol:XPToken",
								"label": "_paused",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 1283,
								"contract": "XPToken.sol:XPToken",
								"label": "_status",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 1409,
								"contract": "XPToken.sol:XPToken",
								"label": "totalMinted",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 1411,
								"contract": "XPToken.sol:XPToken",
								"label": "totalBurnedAmount",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)21_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(RoleData)21_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 18,
										"contract": "XPToken.sol:XPToken",
										"label": "hasRole",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 20,
										"contract": "XPToken.sol:XPToken",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							295
						],
						"Context": [
							1164
						],
						"ERC165": [
							1365
						],
						"IAccessControl": [
							378
						]
					},
					"id": 296,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 296,
							"sourceUnit": 379,
							"src": "134:52:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IAccessControl",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 378,
										"src": "142:14:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 296,
							"sourceUnit": 1165,
							"src": "187:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1164,
										"src": "195:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 7,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 296,
							"sourceUnit": 1366,
							"src": "233:57:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 6,
										"name": "ERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1365,
										"src": "241:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 9,
										"name": "Context",
										"nameLocations": [
											"1988:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1164,
										"src": "1988:7:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:7:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "IAccessControl",
										"nameLocations": [
											"1997:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 378,
										"src": "1997:14:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1997:14:0"
								},
								{
									"baseName": {
										"id": 13,
										"name": "ERC165",
										"nameLocations": [
											"2013:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1365,
										"src": "2013:6:0"
									},
									"id": 14,
									"nodeType": "InheritanceSpecifier",
									"src": "2013:6:0"
								}
							],
							"canonicalName": "AccessControl",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 8,
								"nodeType": "StructuredDocumentation",
								"src": "292:1660:0",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."
							},
							"fullyImplemented": true,
							"id": 295,
							"linearizedBaseContracts": [
								295,
								1365,
								1377,
								378,
								1164
							],
							"name": "AccessControl",
							"nameLocation": "1971:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 21,
									"members": [
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "hasRole",
											"nameLocation": "2085:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 21,
											"src": "2052:40:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 17,
												"keyName": "account",
												"keyNameLocation": "2068:7:0",
												"keyType": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2060:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "2052:32:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 16,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2079:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 20,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "2110:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 21,
											"src": "2102:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 19,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "2102:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "2033:8:0",
									"nodeType": "StructDefinition",
									"scope": 295,
									"src": "2026:100:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 26,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2174:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 295,
									"src": "2132:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 25,
										"keyName": "role",
										"keyNameLocation": "2148:4:0",
										"keyType": {
											"id": 22,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "2140:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "2132:33:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 24,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 23,
												"name": "RoleData",
												"nameLocations": [
													"2156:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 21,
												"src": "2156:8:0"
											},
											"referencedDeclaration": 21,
											"src": "2156:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$21_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 29,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2211:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 295,
									"src": "2187:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 27,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2187:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 28,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2232:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "2454:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 35,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "2475:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 34,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															93,
															114
														],
														"referencedDeclaration": 93,
														"src": "2464:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2464:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "2464:16:0"
											},
											{
												"id": 38,
												"nodeType": "PlaceholderStatement",
												"src": "2490:1:0"
											}
										]
									},
									"documentation": {
										"id": 30,
										"nodeType": "StructuredDocumentation",
										"src": "2243:174:0",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."
									},
									"id": 40,
									"name": "onlyRole",
									"nameLocation": "2431:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2448:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2440:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 31,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:14:0"
									},
									"src": "2422:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1364
									],
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "2656:111:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 54,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 49,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 43,
															"src": "2673:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 51,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 378,
																		"src": "2693:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$378_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$378_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 50,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2688:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2688:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$378",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "2709:11:0",
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2688:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2673:47:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 57,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 43,
																"src": "2748:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 55,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2724:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$295_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2730:17:0",
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1364,
															"src": "2724:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 58,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2724:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2673:87:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 48,
												"id": 60,
												"nodeType": "Return",
												"src": "2666:94:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "2504:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2574:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 45,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2632:8:0"
									},
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2599:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "2592:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 42,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2592:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2591:20:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "2650:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 46,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2650:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2649:6:0"
									},
									"scope": 295,
									"src": "2565:202:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										345
									],
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "2937:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 72,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "2954:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 74,
															"indexExpression": {
																"id": 73,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "2961:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2954:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$21_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 75,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2967:7:0",
														"memberName": "hasRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 18,
														"src": "2954:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 77,
													"indexExpression": {
														"id": 76,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "2975:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2954:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 71,
												"id": 78,
												"nodeType": "Return",
												"src": "2947:36:0"
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "2773:76:0",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2863:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2879:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2871:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 64,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2871:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2893:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2885:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2885:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2870:31:0"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "2931:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 69,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2931:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2930:6:0"
									},
									"scope": 295,
									"src": "2854:136:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 92,
										"nodeType": "Block",
										"src": "3255:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 83,
															"src": "3276:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 88,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1146,
																"src": "3282:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3282:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															93,
															114
														],
														"referencedDeclaration": 114,
														"src": "3265:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "3265:30:0"
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "2996:198:0",
										"text": " @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."
									},
									"id": 93,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3208:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3227:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "3219:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 82,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3219:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3218:14:0"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:0:0"
									},
									"scope": 295,
									"src": "3199:103:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 113,
										"nodeType": "Block",
										"src": "3505:124:0",
										"statements": [
											{
												"condition": {
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3519:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 102,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 96,
																"src": "3528:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 103,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 98,
																"src": "3534:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 101,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "3520:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 104,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3520:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 112,
												"nodeType": "IfStatement",
												"src": "3515:108:0",
												"trueBody": {
													"id": 111,
													"nodeType": "Block",
													"src": "3544:79:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 107,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 98,
																		"src": "3598:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 108,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 96,
																		"src": "3607:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 106,
																	"name": "AccessControlUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 305,
																	"src": "3565:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_bytes32_$returns$_t_error_$",
																		"typeString": "function (address,bytes32) pure returns (error)"
																	}
																},
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3565:47:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 110,
															"nodeType": "RevertStatement",
															"src": "3558:54:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "3308:119:0",
										"text": " @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."
									},
									"id": 114,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3441:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3460:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "3452:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 95,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3452:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 98,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3474:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "3466:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 97,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3466:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3451:31:0"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3505:0:0"
									},
									"scope": 295,
									"src": "3432:197:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										353
									],
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "3884:46:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 122,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 26,
															"src": "3901:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 124,
														"indexExpression": {
															"id": 123,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 117,
															"src": "3908:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3901:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$21_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3914:9:0",
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 20,
													"src": "3901:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 121,
												"id": 126,
												"nodeType": "Return",
												"src": "3894:29:0"
											}
										]
									},
									"documentation": {
										"id": 115,
										"nodeType": "StructuredDocumentation",
										"src": "3635:170:0",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "3819:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3840:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "3832:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 116,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3832:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3831:14:0"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "3875:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 119,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3875:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3874:9:0"
									},
									"scope": 295,
									"src": "3810:120:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										361
									],
									"body": {
										"id": 146,
										"nodeType": "Block",
										"src": "4320:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 142,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 131,
															"src": "4341:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 143,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "4347:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 141,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "4330:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4330:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 145,
												"nodeType": "ExpressionStatement",
												"src": "4330:25:0"
											}
										]
									},
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "3936:285:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."
									},
									"functionSelector": "2f2ff15d",
									"id": 147,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 137,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 131,
															"src": "4313:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 136,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "4300:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4300:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 139,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 135,
												"name": "onlyRole",
												"nameLocations": [
													"4291:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "4291:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4291:28:0"
										}
									],
									"name": "grantRole",
									"nameLocation": "4235:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4253:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "4245:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 130,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4245:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4267:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "4259:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4259:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4244:31:0"
									},
									"returnParameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4320:0:0"
									},
									"scope": 295,
									"src": "4226:136:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										369
									],
									"body": {
										"id": 165,
										"nodeType": "Block",
										"src": "4737:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 161,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "4759:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 162,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 152,
															"src": "4765:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 160,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "4747:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4747:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 164,
												"nodeType": "ExpressionStatement",
												"src": "4747:26:0"
											}
										]
									},
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "4368:269:0",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "d547741f",
									"id": 166,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 156,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "4730:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 155,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "4717:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4717:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 158,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 154,
												"name": "onlyRole",
												"nameLocations": [
													"4708:8:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "4708:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4708:28:0"
										}
									],
									"name": "revokeRole",
									"nameLocation": "4651:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4670:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4662:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 149,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4662:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4684:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "4676:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4676:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4661:31:0"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4737:0:0"
									},
									"scope": 295,
									"src": "4642:138:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										377
									],
									"body": {
										"id": 188,
										"nodeType": "Block",
										"src": "5407:166:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 174,
														"name": "callerConfirmation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 171,
														"src": "5421:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 175,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "5443:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 176,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5443:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5421:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 182,
												"nodeType": "IfStatement",
												"src": "5417:102:0",
												"trueBody": {
													"id": 181,
													"nodeType": "Block",
													"src": "5457:62:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 178,
																	"name": "AccessControlBadConfirmation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 308,
																	"src": "5478:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 179,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5478:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 180,
															"nodeType": "RevertStatement",
															"src": "5471:37:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 184,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5541:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 185,
															"name": "callerConfirmation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "5547:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 183,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "5529:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5529:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 187,
												"nodeType": "ExpressionStatement",
												"src": "5529:37:0"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4786:537:0",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."
									},
									"functionSelector": "36568abe",
									"id": 189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5337:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5358:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "5350:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 168,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5350:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "callerConfirmation",
												"nameLocation": "5372:18:0",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "5364:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5364:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5349:42:0"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5407:0:0"
									},
									"scope": 295,
									"src": "5328:245:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 216,
										"nodeType": "Block",
										"src": "5771:174:0",
										"statements": [
											{
												"assignments": [
													198
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "5789:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 216,
														"src": "5781:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 197,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5781:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 202,
												"initialValue": {
													"arguments": [
														{
															"id": 200,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 192,
															"src": "5822:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 199,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "5809:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5809:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5781:46:0"
											},
											{
												"expression": {
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 203,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "5837:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 205,
															"indexExpression": {
																"id": 204,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 192,
																"src": "5844:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5837:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$21_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 206,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "5850:9:0",
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 20,
														"src": "5837:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 207,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "5862:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5837:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "5837:34:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 211,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 192,
															"src": "5903:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 212,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 198,
															"src": "5909:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 213,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 194,
															"src": "5928:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 210,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "5886:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5886:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "EmitStatement",
												"src": "5881:57:0"
											}
										]
									},
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "5579:114:0",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "5707:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5729:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "5721:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 191,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "5743:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "5735:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 193,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5735:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:33:0"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5771:0:0"
									},
									"scope": 295,
									"src": "5698:247:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 255,
										"nodeType": "Block",
										"src": "6262:233:0",
										"statements": [
											{
												"condition": {
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "6276:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 228,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 220,
																"src": "6285:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 229,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "6291:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 227,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "6277:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 230,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6277:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 253,
													"nodeType": "Block",
													"src": "6452:37:0",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6473:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 226,
															"id": 252,
															"nodeType": "Return",
															"src": "6466:12:0"
														}
													]
												},
												"id": 254,
												"nodeType": "IfStatement",
												"src": "6272:217:0",
												"trueBody": {
													"id": 250,
													"nodeType": "Block",
													"src": "6301:145:0",
													"statements": [
														{
															"expression": {
																"id": 239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 232,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 26,
																				"src": "6315:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 234,
																			"indexExpression": {
																				"id": 233,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 220,
																				"src": "6322:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6315:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$21_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 235,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6328:7:0",
																		"memberName": "hasRole",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 18,
																		"src": "6315:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 237,
																	"indexExpression": {
																		"id": 236,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 222,
																		"src": "6336:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6315:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6347:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "6315:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 240,
															"nodeType": "ExpressionStatement",
															"src": "6315:36:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 242,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 220,
																		"src": "6382:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 243,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 222,
																		"src": "6388:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 244,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1146,
																			"src": "6397:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6397:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 241,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 326,
																	"src": "6370:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 246,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6370:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 247,
															"nodeType": "EmitStatement",
															"src": "6365:45:0"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6431:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 226,
															"id": 249,
															"nodeType": "Return",
															"src": "6424:11:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "5951:223:0",
										"text": " @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."
									},
									"id": 256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "6188:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6207:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "6199:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6199:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6221:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "6213:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6213:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6198:31:0"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "6256:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 224,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6256:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6255:6:0"
									},
									"scope": 295,
									"src": "6179:316:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 293,
										"nodeType": "Block",
										"src": "6816:233:0",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 267,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "6838:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 268,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "6844:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 266,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 80,
														"src": "6830:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6830:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 291,
													"nodeType": "Block",
													"src": "7006:37:0",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 289,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7027:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 265,
															"id": 290,
															"nodeType": "Return",
															"src": "7020:12:0"
														}
													]
												},
												"id": 292,
												"nodeType": "IfStatement",
												"src": "6826:217:0",
												"trueBody": {
													"id": 288,
													"nodeType": "Block",
													"src": "6854:146:0",
													"statements": [
														{
															"expression": {
																"id": 277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 270,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 26,
																				"src": "6868:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$21_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 272,
																			"indexExpression": {
																				"id": 271,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 259,
																				"src": "6875:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6868:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$21_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 273,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6881:7:0",
																		"memberName": "hasRole",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 18,
																		"src": "6868:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 275,
																	"indexExpression": {
																		"id": 274,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 261,
																		"src": "6889:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6868:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6900:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "6868:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 278,
															"nodeType": "ExpressionStatement",
															"src": "6868:37:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 280,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 259,
																		"src": "6936:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 281,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 261,
																		"src": "6942:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 282,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1146,
																			"src": "6951:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6951:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 279,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 335,
																	"src": "6924:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6924:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 285,
															"nodeType": "EmitStatement",
															"src": "6919:45:0"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 286,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6985:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 265,
															"id": 287,
															"nodeType": "Return",
															"src": "6978:11:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "6501:226:0",
										"text": " @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."
									},
									"id": 294,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "6741:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6761:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "6753:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 258,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6753:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6775:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "6767:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6767:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6752:31:0"
									},
									"returnParameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "6810:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 263,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6810:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6809:6:0"
									},
									"scope": 295,
									"src": "6732:317:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 296,
							"src": "1953:5098:0",
							"usedErrors": [
								305,
								308
							],
							"usedEvents": [
								317,
								326,
								335
							]
						}
					],
					"src": "108:6944:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							378
						]
					},
					"id": 379,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 297,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAccessControl",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 298,
								"nodeType": "StructuredDocumentation",
								"src": "135:90:1",
								"text": " @dev External interface of AccessControl declared to support ERC-165 detection."
							},
							"fullyImplemented": false,
							"id": 378,
							"linearizedBaseContracts": [
								378
							],
							"name": "IAccessControl",
							"nameLocation": "236:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "257:56:1",
										"text": " @dev The `account` is missing a role."
									},
									"errorSelector": "e2517d3f",
									"id": 305,
									"name": "AccessControlUnauthorizedAccount",
									"nameLocation": "324:32:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "365:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "357:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "357:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "neededRole",
												"nameLocation": "382:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "374:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 302,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "374:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "356:37:1"
									},
									"src": "318:76:1"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "400:148:1",
										"text": " @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
									},
									"errorSelector": "6697b232",
									"id": 308,
									"name": "AccessControlBadConfirmation",
									"nameLocation": "559:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "587:2:1"
									},
									"src": "553:37:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "596:254:1",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted to signal this."
									},
									"eventSelector": "bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
									"id": 317,
									"name": "RoleAdminChanged",
									"nameLocation": "861:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "894:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "878:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 310,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "916:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "900:33:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 312,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "900:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 315,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "951:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "935:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 314,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:87:1"
									},
									"src": "855:110:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "971:295:1",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
									},
									"eventSelector": "2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
									"id": 326,
									"name": "RoleGranted",
									"nameLocation": "1277:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1305:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "1289:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 319,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1289:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1327:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "1311:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1352:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "1336:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1336:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:71:1"
									},
									"src": "1271:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 327,
										"nodeType": "StructuredDocumentation",
										"src": "1366:275:1",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"eventSelector": "f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
									"id": 335,
									"name": "RoleRevoked",
									"nameLocation": "1652:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1680:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "1664:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 328,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1702:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "1686:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1686:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "1711:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:71:1"
									},
									"src": "1646:89:1"
								},
								{
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "1741:76:1",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1831:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1847:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "1839:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 337,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1861:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "1853:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1853:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:31:1"
									},
									"returnParameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "1893:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 342,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1893:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1892:6:1"
									},
									"scope": 378,
									"src": "1822:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "1905:184:1",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "2103:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2124:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "2116:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 347,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2116:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2115:14:1"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "2153:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 350,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2153:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2152:9:1"
									},
									"scope": 378,
									"src": "2094:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "2168:239:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 361,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2421:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2439:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "2431:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 355,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2431:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2453:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "2445:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:31:1"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2470:0:1"
									},
									"scope": 378,
									"src": "2412:59:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "2477:223:1",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 369,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2714:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2733:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2725:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 363,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2747:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "2739:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2724:31:1"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2764:0:1"
									},
									"scope": 378,
									"src": "2705:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "2771:491:1",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."
									},
									"functionSelector": "36568abe",
									"id": 377,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "3276:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3297:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "3289:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 371,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3289:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "callerConfirmation",
												"nameLocation": "3311:18:1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "3303:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3303:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3288:42:1"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3339:0:1"
									},
									"scope": 378,
									"src": "3267:73:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 379,
							"src": "226:3116:1",
							"usedErrors": [
								305,
								308
							],
							"usedEvents": [
								317,
								326,
								335
							]
						}
					],
					"src": "109:3234:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							515
						],
						"IERC20Errors": [
							420
						],
						"IERC721Errors": [
							468
						]
					},
					"id": 516,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 380,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 381,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:2",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 420,
							"linearizedBaseContracts": [
								420
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 390,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "654:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "670:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "687:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:2"
									},
									"src": "623:80:2"
								},
								{
									"documentation": {
										"id": 391,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 395,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "891:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:2"
									},
									"src": "866:41:2"
								},
								{
									"documentation": {
										"id": 396,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 400,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "1104:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:2"
									},
									"src": "1077:45:2"
								},
								{
									"documentation": {
										"id": 401,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:2",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 409,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "1511:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "1528:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "1547:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:2"
									},
									"src": "1478:85:2"
								},
								{
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 414,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "1775:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:2"
									},
									"src": "1748:45:2"
								},
								{
									"documentation": {
										"id": 415,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 419,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "2025:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:2"
									},
									"src": "1999:43:2"
								}
							],
							"scope": 516,
							"src": "280:1764:2",
							"usedErrors": [
								390,
								395,
								400,
								409,
								414,
								419
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 421,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:2",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 468,
							"linearizedBaseContracts": [
								468
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 422,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 426,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "2469:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 423,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:2"
									},
									"src": "2444:40:2"
								},
								{
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 431,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "2656:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:2"
									},
									"src": "2627:46:2"
								},
								{
									"documentation": {
										"id": 432,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 440,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "3000:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "3016:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "3033:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 437,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:2"
									},
									"src": "2973:75:2"
								},
								{
									"documentation": {
										"id": 441,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 445,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3237:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:2"
									},
									"src": "3211:42:2"
								},
								{
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 450,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "3451:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:2"
									},
									"src": "3423:46:2"
								},
								{
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 457,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "3760:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "3778:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:2"
									},
									"src": "3727:68:2"
								},
								{
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 462,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "4008:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:2"
									},
									"src": "3980:46:2"
								},
								{
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 467,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "4262:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 464,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:2"
									},
									"src": "4234:46:2"
								}
							],
							"scope": 516,
							"src": "2190:2092:2",
							"usedErrors": [
								426,
								431,
								440,
								445,
								450,
								457,
								462,
								467
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 469,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:2",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 515,
							"linearizedBaseContracts": [
								515
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 480,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "4860:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "4876:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "4893:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "4909:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:2"
									},
									"src": "4827:99:2"
								},
								{
									"documentation": {
										"id": 481,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 485,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 485,
												"src": "5116:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:2"
									},
									"src": "5089:43:2"
								},
								{
									"documentation": {
										"id": 486,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 490,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "5331:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 487,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:2"
									},
									"src": "5302:47:2"
								},
								{
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 497,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "5651:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 492,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "5669:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:2"
									},
									"src": "5616:68:2"
								},
								{
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 502,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5898:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:2"
									},
									"src": "5869:47:2"
								},
								{
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 507,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6153:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:2"
									},
									"src": "6124:47:2"
								},
								{
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 514,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "6494:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 509,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "6513:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:2"
									},
									"src": "6462:73:2"
								}
							],
							"scope": 516,
							"src": "4430:2107:2",
							"usedErrors": [
								480,
								485,
								490,
								497,
								502,
								507,
								514
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1164
						],
						"ERC20": [
							1030
						],
						"IERC20": [
							1108
						],
						"IERC20Errors": [
							420
						],
						"IERC20Metadata": [
							1134
						]
					},
					"id": 1031,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 517,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 519,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1031,
							"sourceUnit": 1109,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 518,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1108,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 521,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1031,
							"sourceUnit": 1135,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 520,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1134,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 523,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1031,
							"sourceUnit": 1165,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 522,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1164,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 525,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1031,
							"sourceUnit": 516,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 524,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 420,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 527,
										"name": "Context",
										"nameLocations": [
											"1133:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1164,
										"src": "1133:7:3"
									},
									"id": 528,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:3"
								},
								{
									"baseName": {
										"id": 529,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1108,
										"src": "1142:6:3"
									},
									"id": 530,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:3"
								},
								{
									"baseName": {
										"id": 531,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1134,
										"src": "1150:14:3"
									},
									"id": 532,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:3"
								},
								{
									"baseName": {
										"id": 533,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 420,
										"src": "1166:12:3"
									},
									"id": 534,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 526,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 1030,
							"linearizedBaseContracts": [
								1030,
								420,
								1134,
								1108,
								1164
							],
							"name": "ERC20",
							"nameLocation": "1124:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 538,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1030,
									"src": "1185:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 537,
										"keyName": "account",
										"keyNameLocation": "1201:7:3",
										"keyType": {
											"id": 535,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 536,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 544,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 1030,
									"src": "1245:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 543,
										"keyName": "account",
										"keyNameLocation": "1261:7:3",
										"keyType": {
											"id": 539,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 542,
											"keyName": "spender",
											"keyNameLocation": "1288:7:3",
											"keyType": {
												"id": 540,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 541,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 546,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 1030,
									"src": "1335:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 545,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 548,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 1030,
									"src": "1370:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 547,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 550,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 1030,
									"src": "1396:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 549,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "1638:57:3",
										"statements": [
											{
												"expression": {
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 558,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "1648:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 559,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 553,
														"src": "1656:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1648:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 561,
												"nodeType": "ExpressionStatement",
												"src": "1648:13:3"
											},
											{
												"expression": {
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 562,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 550,
														"src": "1671:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 563,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 555,
														"src": "1681:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1671:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "1671:17:3"
											}
										]
									},
									"documentation": {
										"id": 551,
										"nodeType": "StructuredDocumentation",
										"src": "1425:152:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
									},
									"id": 567,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1608:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "1594:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 552,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1594:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1629:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "1615:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 554,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1615:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1593:44:3"
									},
									"returnParameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1638:0:3"
									},
									"scope": 1030,
									"src": "1582:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1121
									],
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "1820:29:3",
										"statements": [
											{
												"expression": {
													"id": 573,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 548,
													"src": "1837:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 572,
												"id": 574,
												"nodeType": "Return",
												"src": "1830:12:3"
											}
										]
									},
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "1701:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1769:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:3"
									},
									"returnParameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "1805:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 570,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1805:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:15:3"
									},
									"scope": 1030,
									"src": "1760:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1127
									],
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "2024:31:3",
										"statements": [
											{
												"expression": {
													"id": 582,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 550,
													"src": "2041:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 581,
												"id": 583,
												"nodeType": "Return",
												"src": "2034:14:3"
											}
										]
									},
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "1855:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1971:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1977:2:3"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2009:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 579,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2008:15:3"
									},
									"scope": 1030,
									"src": "1962:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1133
									],
									"body": {
										"id": 593,
										"nodeType": "Block",
										"src": "2744:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2761:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 590,
												"id": 592,
												"nodeType": "Return",
												"src": "2754:9:3"
											}
										]
									},
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "2061:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 594,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2697:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2705:2:3"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "2737:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 588,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2737:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2736:7:3"
									},
									"scope": 1030,
									"src": "2688:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1057
									],
									"body": {
										"id": 602,
										"nodeType": "Block",
										"src": "2891:36:3",
										"statements": [
											{
												"expression": {
													"id": 600,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 546,
													"src": "2908:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 599,
												"id": 601,
												"nodeType": "Return",
												"src": "2901:19:3"
											}
										]
									},
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "2776:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 603,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2839:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2850:2:3"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 603,
												"src": "2882:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 597,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2881:9:3"
									},
									"scope": 1030,
									"src": "2830:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1065
									],
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "3059:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 611,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 538,
														"src": "3076:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 613,
													"indexExpression": {
														"id": 612,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "3086:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3076:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 610,
												"id": 614,
												"nodeType": "Return",
												"src": "3069:25:3"
											}
										]
									},
									"documentation": {
										"id": 604,
										"nodeType": "StructuredDocumentation",
										"src": "2933:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2994:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3012:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "3004:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 605,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3004:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3003:17:3"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "3050:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:9:3"
									},
									"scope": 1030,
									"src": "2985:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1075
									],
									"body": {
										"id": 639,
										"nodeType": "Block",
										"src": "3371:103:3",
										"statements": [
											{
												"assignments": [
													627
												],
												"declarations": [
													{
														"constant": false,
														"id": 627,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3389:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 639,
														"src": "3381:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 626,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3381:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 630,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 628,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1146,
														"src": "3397:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3397:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3381:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 632,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "3429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 633,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 619,
															"src": "3436:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 634,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 621,
															"src": "3440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 631,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 760,
														"src": "3419:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3419:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 636,
												"nodeType": "ExpressionStatement",
												"src": "3419:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3463:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 625,
												"id": 638,
												"nodeType": "Return",
												"src": "3456:11:3"
											}
										]
									},
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "3107:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3305:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3322:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "3314:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 618,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3314:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3334:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "3326:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3326:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3313:27:3"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "3365:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 623,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3365:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3364:6:3"
									},
									"scope": 1030,
									"src": "3296:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1085
									],
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "3621:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 650,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "3638:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 652,
														"indexExpression": {
															"id": 651,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 643,
															"src": "3650:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3638:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 654,
													"indexExpression": {
														"id": 653,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 645,
														"src": "3657:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3638:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 649,
												"id": 655,
												"nodeType": "Return",
												"src": "3631:34:3"
											}
										]
									},
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "3480:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3541:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3559:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "3551:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3574:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "3566:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:32:3"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "3612:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3611:9:3"
									},
									"scope": 1030,
									"src": "3532:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1095
									],
									"body": {
										"id": 680,
										"nodeType": "Block",
										"src": "4058:107:3",
										"statements": [
											{
												"assignments": [
													668
												],
												"declarations": [
													{
														"constant": false,
														"id": 668,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4076:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 680,
														"src": "4068:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 667,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4068:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 671,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 669,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1146,
														"src": "4084:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4084:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4068:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 673,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 668,
															"src": "4115:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 674,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "4122:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 675,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "4131:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 672,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															921,
															981
														],
														"referencedDeclaration": 921,
														"src": "4106:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4106:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 677,
												"nodeType": "ExpressionStatement",
												"src": "4106:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4154:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 666,
												"id": 679,
												"nodeType": "Return",
												"src": "4147:11:3"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "3678:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 681,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3988:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4004:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "3996:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3996:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4021:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "4013:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4013:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:32:3"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "4052:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 664,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4052:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4051:6:3"
									},
									"scope": 1030,
									"src": "3979:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1107
									],
									"body": {
										"id": 712,
										"nodeType": "Block",
										"src": "4850:151:3",
										"statements": [
											{
												"assignments": [
													694
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4868:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 712,
														"src": "4860:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 693,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4860:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 697,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 695,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1146,
														"src": "4878:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4878:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4860:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 699,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "4916:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 700,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "4922:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "4931:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 698,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "4900:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4900:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "ExpressionStatement",
												"src": "4900:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 705,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "4957:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 706,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "4963:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 707,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "4967:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 704,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 760,
														"src": "4947:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4947:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 709,
												"nodeType": "ExpressionStatement",
												"src": "4947:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4990:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 692,
												"id": 711,
												"nodeType": "Return",
												"src": "4983:11:3"
											}
										]
									},
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "4171:581:3",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4766:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4787:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "4779:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4779:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4801:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "4793:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4793:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4813:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "4805:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4805:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4778:41:3"
									},
									"returnParameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "4844:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 690,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4844:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:6:3"
									},
									"scope": 1030,
									"src": "4757:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 759,
										"nodeType": "Block",
										"src": "5443:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 723,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "5457:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 726,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5473:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5465:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 724,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5465:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 727,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5465:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5457:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 737,
												"nodeType": "IfStatement",
												"src": "5453:86:3",
												"trueBody": {
													"id": 736,
													"nodeType": "Block",
													"src": "5477:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 732,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5525:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 731,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5517:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 730,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5517:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 733,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5517:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 729,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 395,
																	"src": "5498:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5498:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 735,
															"nodeType": "RevertStatement",
															"src": "5491:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 738,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "5552:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 741,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5566:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5558:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 739,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5558:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 742,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5558:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5552:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 752,
												"nodeType": "IfStatement",
												"src": "5548:86:3",
												"trueBody": {
													"id": 751,
													"nodeType": "Block",
													"src": "5570:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 747,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5620:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 746,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5612:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 745,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5612:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 748,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5612:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 744,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 400,
																	"src": "5591:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 749,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5591:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 750,
															"nodeType": "RevertStatement",
															"src": "5584:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 754,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "5651:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 755,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 718,
															"src": "5657:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 756,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "5661:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 753,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 837,
														"src": "5643:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5643:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 758,
												"nodeType": "ExpressionStatement",
												"src": "5643:24:3"
											}
										]
									},
									"documentation": {
										"id": 714,
										"nodeType": "StructuredDocumentation",
										"src": "5007:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 760,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5383:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5401:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 760,
												"src": "5393:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5415:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 760,
												"src": "5407:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5407:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5427:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 760,
												"src": "5419:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5392:41:3"
									},
									"returnParameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5443:0:3"
									},
									"scope": 1030,
									"src": "5374:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 836,
										"nodeType": "Block",
										"src": "6064:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 770,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 763,
														"src": "6078:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 773,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6094:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 772,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6086:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 771,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6086:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 774,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6086:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6078:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 807,
													"nodeType": "Block",
													"src": "6252:362:3",
													"statements": [
														{
															"assignments": [
																782
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 782,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6274:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 807,
																	"src": "6266:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 781,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6266:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 786,
															"initialValue": {
																"baseExpression": {
																	"id": 783,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 538,
																	"src": "6288:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 785,
																"indexExpression": {
																	"id": 784,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 763,
																	"src": "6298:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6288:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6266:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 787,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "6321:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 788,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 767,
																	"src": "6335:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6321:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 797,
															"nodeType": "IfStatement",
															"src": "6317:115:3",
															"trueBody": {
																"id": 796,
																"nodeType": "Block",
																"src": "6342:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 791,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 763,
																					"src": "6392:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 792,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "6398:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 793,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 767,
																					"src": "6411:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 790,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 390,
																				"src": "6367:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6367:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 795,
																		"nodeType": "RevertStatement",
																		"src": "6360:57:3"
																	}
																]
															}
														},
														{
															"id": 806,
															"nodeType": "UncheckedBlock",
															"src": "6445:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 804,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 798,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 538,
																				"src": "6552:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 800,
																			"indexExpression": {
																				"id": 799,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 763,
																				"src": "6562:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6552:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 803,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 801,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 782,
																				"src": "6570:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 802,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 767,
																				"src": "6584:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6570:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6552:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 805,
																	"nodeType": "ExpressionStatement",
																	"src": "6552:37:3"
																}
															]
														}
													]
												},
												"id": 808,
												"nodeType": "IfStatement",
												"src": "6074:540:3",
												"trueBody": {
													"id": 780,
													"nodeType": "Block",
													"src": "6098:148:3",
													"statements": [
														{
															"expression": {
																"id": 778,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 776,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 546,
																	"src": "6214:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 777,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 767,
																	"src": "6230:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6214:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 779,
															"nodeType": "ExpressionStatement",
															"src": "6214:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 809,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "6628:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 812,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6642:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 811,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6634:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 810,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6634:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 813,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6634:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6628:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 828,
													"nodeType": "Block",
													"src": "6843:206:3",
													"statements": [
														{
															"id": 827,
															"nodeType": "UncheckedBlock",
															"src": "6857:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 821,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 538,
																				"src": "7002:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 823,
																			"indexExpression": {
																				"id": 822,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 765,
																				"src": "7012:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7002:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 824,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 767,
																			"src": "7019:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7002:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 826,
																	"nodeType": "ExpressionStatement",
																	"src": "7002:22:3"
																}
															]
														}
													]
												},
												"id": 829,
												"nodeType": "IfStatement",
												"src": "6624:425:3",
												"trueBody": {
													"id": 820,
													"nodeType": "Block",
													"src": "6646:191:3",
													"statements": [
														{
															"id": 819,
															"nodeType": "UncheckedBlock",
															"src": "6660:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 817,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 815,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 546,
																			"src": "6791:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 816,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 767,
																			"src": "6807:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6791:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 818,
																	"nodeType": "ExpressionStatement",
																	"src": "6791:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 831,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 763,
															"src": "7073:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 832,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "7079:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 833,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "7083:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 830,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "7064:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7064:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 835,
												"nodeType": "EmitStatement",
												"src": "7059:30:3"
											}
										]
									},
									"documentation": {
										"id": 761,
										"nodeType": "StructuredDocumentation",
										"src": "5680:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 837,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "5998:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6014:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "6006:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6006:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6028:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "6020:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6040:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "6032:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6032:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6005:41:3"
									},
									"returnParameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6064:0:3"
									},
									"scope": 1030,
									"src": "5989:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 869,
										"nodeType": "Block",
										"src": "7495:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 845,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "7509:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 848,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7528:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 847,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7520:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 846,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7520:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 849,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7520:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7509:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 859,
												"nodeType": "IfStatement",
												"src": "7505:91:3",
												"trueBody": {
													"id": 858,
													"nodeType": "Block",
													"src": "7532:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 854,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7582:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 853,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7574:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 852,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7574:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7574:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 851,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 400,
																	"src": "7553:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7553:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 857,
															"nodeType": "RevertStatement",
															"src": "7546:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7621:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7613:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 861,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7613:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 864,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7613:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 865,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "7625:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "7634:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 860,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 837,
														"src": "7605:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7605:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 868,
												"nodeType": "ExpressionStatement",
												"src": "7605:35:3"
											}
										]
									},
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "7102:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 870,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7448:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7462:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "7454:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7454:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "7471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7471:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:32:3"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7495:0:3"
									},
									"scope": 1030,
									"src": "7439:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 902,
										"nodeType": "Block",
										"src": "8021:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 878,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "8035:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 881,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8054:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 880,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8046:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 879,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8046:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8046:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8035:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 892,
												"nodeType": "IfStatement",
												"src": "8031:89:3",
												"trueBody": {
													"id": 891,
													"nodeType": "Block",
													"src": "8058:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 887,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8106:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 886,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8098:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 885,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8098:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 888,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8098:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 884,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 395,
																	"src": "8079:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 889,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8079:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 890,
															"nodeType": "RevertStatement",
															"src": "8072:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 894,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "8137:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 897,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8154:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 896,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8146:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 895,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8146:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8146:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 899,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "8158:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 893,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 837,
														"src": "8129:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8129:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 901,
												"nodeType": "ExpressionStatement",
												"src": "8129:35:3"
											}
										]
									},
									"documentation": {
										"id": 871,
										"nodeType": "StructuredDocumentation",
										"src": "7653:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 903,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7974:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7988:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "7980:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7980:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 903,
												"src": "7997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7979:32:3"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8021:0:3"
									},
									"scope": 1030,
									"src": "7965:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 920,
										"nodeType": "Block",
										"src": "8781:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 914,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "8800:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 915,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 908,
															"src": "8807:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 916,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 910,
															"src": "8816:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 917,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8823:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 913,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															921,
															981
														],
														"referencedDeclaration": 981,
														"src": "8791:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8791:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 919,
												"nodeType": "ExpressionStatement",
												"src": "8791:37:3"
											}
										]
									},
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "8177:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 921,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8716:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8733:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "8725:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8748:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "8740:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8740:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8765:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "8757:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8757:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8724:47:3"
									},
									"returnParameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8781:0:3"
									},
									"scope": 1030,
									"src": "8707:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 980,
										"nodeType": "Block",
										"src": "9780:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 933,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "9794:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9811:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9803:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 934,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9803:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 937,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9803:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9794:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 947,
												"nodeType": "IfStatement",
												"src": "9790:89:3",
												"trueBody": {
													"id": 946,
													"nodeType": "Block",
													"src": "9815:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 942,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9865:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 941,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9857:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 940,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9857:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 943,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9857:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 939,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "9836:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 944,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9836:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 945,
															"nodeType": "RevertStatement",
															"src": "9829:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 948,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 926,
														"src": "9892:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9911:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9903:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 949,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9903:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 952,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9903:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9892:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 962,
												"nodeType": "IfStatement",
												"src": "9888:90:3",
												"trueBody": {
													"id": 961,
													"nodeType": "Block",
													"src": "9915:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 957,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9964:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9956:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 955,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9956:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 958,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9956:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 954,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 419,
																	"src": "9936:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 959,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9936:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 960,
															"nodeType": "RevertStatement",
															"src": "9929:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 963,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "9987:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 966,
															"indexExpression": {
																"id": 964,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 924,
																"src": "9999:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9987:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 967,
														"indexExpression": {
															"id": 965,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 926,
															"src": "10006:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9987:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 968,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "10017:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9987:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 970,
												"nodeType": "ExpressionStatement",
												"src": "9987:35:3"
											},
											{
												"condition": {
													"id": 971,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 930,
													"src": "10036:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 979,
												"nodeType": "IfStatement",
												"src": "10032:76:3",
												"trueBody": {
													"id": 978,
													"nodeType": "Block",
													"src": "10047:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 973,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 924,
																		"src": "10075:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 974,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 926,
																		"src": "10082:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 975,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 928,
																		"src": "10091:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 972,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1051,
																	"src": "10066:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 976,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10066:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 977,
															"nodeType": "EmitStatement",
															"src": "10061:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 922,
										"nodeType": "StructuredDocumentation",
										"src": "8841:836:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 981,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9691:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9708:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "9700:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9700:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9723:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "9715:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 925,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9715:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9740:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "9732:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9732:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9752:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "9747:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 929,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9747:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9699:63:3"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9780:0:3"
									},
									"scope": 1030,
									"src": "9682:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1028,
										"nodeType": "Block",
										"src": "10485:387:3",
										"statements": [
											{
												"assignments": [
													992
												],
												"declarations": [
													{
														"constant": false,
														"id": 992,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10503:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 1028,
														"src": "10495:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 991,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10495:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 997,
												"initialValue": {
													"arguments": [
														{
															"id": 994,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 984,
															"src": "10532:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 995,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "10539:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 993,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 657,
														"src": "10522:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10522:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10495:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 998,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 992,
														"src": "10561:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10585:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1000,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10585:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 999,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10580:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10580:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1003,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10594:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10580:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10561:36:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1027,
												"nodeType": "IfStatement",
												"src": "10557:309:3",
												"trueBody": {
													"id": 1026,
													"nodeType": "Block",
													"src": "10599:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1007,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1005,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 992,
																	"src": "10617:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1006,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 988,
																	"src": "10636:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10617:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1015,
															"nodeType": "IfStatement",
															"src": "10613:130:3",
															"trueBody": {
																"id": 1014,
																"nodeType": "Block",
																"src": "10643:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1009,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 986,
																					"src": "10695:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1010,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 992,
																					"src": "10704:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1011,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 988,
																					"src": "10722:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1008,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 409,
																				"src": "10668:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 1012,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10668:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1013,
																		"nodeType": "RevertStatement",
																		"src": "10661:67:3"
																	}
																]
															}
														},
														{
															"id": 1025,
															"nodeType": "UncheckedBlock",
															"src": "10756:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1017,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 984,
																				"src": "10793:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1018,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 986,
																				"src": "10800:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1021,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1019,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 992,
																					"src": "10809:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1020,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 988,
																					"src": "10828:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10809:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1022,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10835:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1016,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				921,
																				981
																			],
																			"referencedDeclaration": 981,
																			"src": "10784:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1023,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10784:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1024,
																	"nodeType": "ExpressionStatement",
																	"src": "10784:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "10120:271:3",
										"text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1029,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10405:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10429:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "10421:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10421:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10444:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "10436:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10436:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10461:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "10453:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10453:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10420:47:3"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10485:0:3"
									},
									"scope": 1030,
									"src": "10396:476:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1031,
							"src": "1106:9768:3",
							"usedErrors": [
								390,
								395,
								400,
								409,
								414,
								419
							],
							"usedEvents": [
								1042,
								1051
							]
						}
					],
					"src": "105:10770:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1108
						]
					},
					"id": 1109,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1032,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1033,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:4",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 1108,
							"linearizedBaseContracts": [
								1108
							],
							"name": "IERC20",
							"nameLocation": "214:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1042,
									"name": "Transfer",
									"nameLocation": "396:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "405:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "427:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "447:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1039,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:4"
									},
									"src": "390:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1043,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1051,
									"name": "Approval",
									"nameLocation": "627:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "636:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1047,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "659:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1046,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1049,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "684:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:4"
									},
									"src": "621:78:4"
								},
								{
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1057,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:4"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "821:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:4"
									},
									"scope": 1108,
									"src": "775:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1058,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1065,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1060,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "931:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1059,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:4"
									},
									"returnParameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "971:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1062,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:4"
									},
									"scope": 1108,
									"src": "912:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1075,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "1222:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "1234:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1069,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:4"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "1267:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1072,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:4"
									},
									"scope": 1108,
									"src": "1204:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "1567:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "1582:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1079,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:4"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "1622:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:4"
									},
									"scope": 1108,
									"src": "1548:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1095,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2326:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2343:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:4"
									},
									"returnParameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2376:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1092,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:4"
									},
									"scope": 1108,
									"src": "2309:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1096,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1107,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "2712:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "2726:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "2738:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:4"
									},
									"returnParameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "2771:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1104,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:4"
									},
									"scope": 1108,
									"src": "2690:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1109,
							"src": "204:2575:4",
							"usedErrors": [],
							"usedEvents": [
								1042,
								1051
							]
						}
					],
					"src": "106:2674:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1108
						],
						"IERC20Metadata": [
							1134
						]
					},
					"id": 1135,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1110,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1112,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1135,
							"sourceUnit": 1109,
							"src": "151:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1111,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1108,
										"src": "159:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1114,
										"name": "IERC20",
										"nameLocations": [
											"306:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1108,
										"src": "306:6:5"
									},
									"id": 1115,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:5"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1113,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:5",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 1134,
							"linearizedBaseContracts": [
								1134,
								1108
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1116,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:5"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "417:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1118,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:5"
									},
									"scope": 1134,
									"src": "378:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1127,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:5"
									},
									"returnParameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "540:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:5"
									},
									"scope": 1134,
									"src": "499:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1128,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1133,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:5"
									},
									"returnParameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "674:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1130,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:5"
									},
									"scope": 1134,
									"src": "631:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1135,
							"src": "278:405:5",
							"usedErrors": [],
							"usedEvents": [
								1042,
								1051
							]
						}
					],
					"src": "125:559:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1164
						]
					},
					"id": 1165,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1136,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1137,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1164,
							"linearizedBaseContracts": [
								1164
							],
							"name": "Context",
							"nameLocation": "642:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1145,
										"nodeType": "Block",
										"src": "718:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1142,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1141,
												"id": 1144,
												"nodeType": "Return",
												"src": "728:17:6"
											}
										]
									},
									"id": 1146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:6"
									},
									"returnParameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "709:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:6"
									},
									"scope": 1164,
									"src": "656:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1154,
										"nodeType": "Block",
										"src": "825:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1151,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1150,
												"id": 1153,
												"nodeType": "Return",
												"src": "835:15:6"
											}
										]
									},
									"id": 1155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:6"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "809:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1148,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:6"
									},
									"scope": 1164,
									"src": "758:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1162,
										"nodeType": "Block",
										"src": "935:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1160,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1159,
												"id": 1161,
												"nodeType": "Return",
												"src": "945:8:6"
											}
										]
									},
									"id": 1163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:6"
									},
									"returnParameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "926:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:6"
									},
									"scope": 1164,
									"src": "863:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1165,
							"src": "624:338:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							1164
						],
						"Pausable": [
							1272
						]
					},
					"id": 1273,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1166,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 1168,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1273,
							"sourceUnit": 1165,
							"src": "128:45:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1167,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1164,
										"src": "136:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1170,
										"name": "Context",
										"nameLocations": [
											"645:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1164,
										"src": "645:7:7"
									},
									"id": 1171,
									"nodeType": "InheritanceSpecifier",
									"src": "645:7:7"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1169,
								"nodeType": "StructuredDocumentation",
								"src": "175:439:7",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 1272,
							"linearizedBaseContracts": [
								1272,
								1164
							],
							"name": "Pausable",
							"nameLocation": "633:8:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1173,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "672:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1272,
									"src": "659:20:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1172,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "659:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1174,
										"nodeType": "StructuredDocumentation",
										"src": "686:73:7",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 1178,
									"name": "Paused",
									"nameLocation": "770:6:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "785:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1178,
												"src": "777:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "777:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:17:7"
									},
									"src": "764:30:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1179,
										"nodeType": "StructuredDocumentation",
										"src": "800:70:7",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 1183,
									"name": "Unpaused",
									"nameLocation": "881:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1181,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "898:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "890:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:17:7"
									},
									"src": "875:32:7"
								},
								{
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "913:76:7",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 1186,
									"name": "EnforcedPause",
									"nameLocation": "1000:13:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:2:7"
									},
									"src": "994:22:7"
								},
								{
									"documentation": {
										"id": 1187,
										"nodeType": "StructuredDocumentation",
										"src": "1022:80:7",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 1189,
									"name": "ExpectedPause",
									"nameLocation": "1113:13:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:2:7"
									},
									"src": "1107:22:7"
								},
								{
									"body": {
										"id": 1196,
										"nodeType": "Block",
										"src": "1340:47:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1192,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "1350:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1350:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1194,
												"nodeType": "ExpressionStatement",
												"src": "1350:19:7"
											},
											{
												"id": 1195,
												"nodeType": "PlaceholderStatement",
												"src": "1379:1:7"
											}
										]
									},
									"documentation": {
										"id": 1190,
										"nodeType": "StructuredDocumentation",
										"src": "1135:175:7",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1197,
									"name": "whenNotPaused",
									"nameLocation": "1324:13:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1337:2:7"
									},
									"src": "1315:72:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1204,
										"nodeType": "Block",
										"src": "1587:44:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1200,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1239,
														"src": "1597:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1597:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1202,
												"nodeType": "ExpressionStatement",
												"src": "1597:16:7"
											},
											{
												"id": 1203,
												"nodeType": "PlaceholderStatement",
												"src": "1623:1:7"
											}
										]
									},
									"documentation": {
										"id": 1198,
										"nodeType": "StructuredDocumentation",
										"src": "1393:167:7",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 1205,
									"name": "whenPaused",
									"nameLocation": "1574:10:7",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1584:2:7"
									},
									"src": "1565:66:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1213,
										"nodeType": "Block",
										"src": "1779:31:7",
										"statements": [
											{
												"expression": {
													"id": 1211,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1173,
													"src": "1796:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1210,
												"id": 1212,
												"nodeType": "Return",
												"src": "1789:14:7"
											}
										]
									},
									"documentation": {
										"id": 1206,
										"nodeType": "StructuredDocumentation",
										"src": "1637:84:7",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 1214,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1735:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1741:2:7"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "1773:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1208,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1773:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:6:7"
									},
									"scope": 1272,
									"src": "1726:84:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1225,
										"nodeType": "Block",
										"src": "1929:77:7",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1218,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1214,
														"src": "1943:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 1219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1943:8:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1224,
												"nodeType": "IfStatement",
												"src": "1939:61:7",
												"trueBody": {
													"id": 1223,
													"nodeType": "Block",
													"src": "1953:47:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1220,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1186,
																	"src": "1974:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1974:15:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1222,
															"nodeType": "RevertStatement",
															"src": "1967:22:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1215,
										"nodeType": "StructuredDocumentation",
										"src": "1816:57:7",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 1226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "1887:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1904:2:7"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1929:0:7"
									},
									"scope": 1272,
									"src": "1878:128:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1238,
										"nodeType": "Block",
										"src": "2126:78:7",
										"statements": [
											{
												"condition": {
													"id": 1232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2140:9:7",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1230,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1214,
															"src": "2141:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2141:8:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1237,
												"nodeType": "IfStatement",
												"src": "2136:62:7",
												"trueBody": {
													"id": 1236,
													"nodeType": "Block",
													"src": "2151:47:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1233,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1189,
																	"src": "2172:13:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1234,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2172:15:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1235,
															"nodeType": "RevertStatement",
															"src": "2165:22:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1227,
										"nodeType": "StructuredDocumentation",
										"src": "2012:61:7",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 1239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2087:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2101:2:7"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2126:0:7"
									},
									"scope": 1272,
									"src": "2078:126:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "2388:66:7",
										"statements": [
											{
												"expression": {
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1245,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "2398:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1246,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2408:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2398:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1248,
												"nodeType": "ExpressionStatement",
												"src": "2398:14:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1250,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1146,
																"src": "2434:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2434:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1249,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1178,
														"src": "2427:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2427:20:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1253,
												"nodeType": "EmitStatement",
												"src": "2422:25:7"
											}
										]
									},
									"documentation": {
										"id": 1240,
										"nodeType": "StructuredDocumentation",
										"src": "2210:124:7",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1255,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1243,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1242,
												"name": "whenNotPaused",
												"nameLocations": [
													"2374:13:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1197,
												"src": "2374:13:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2374:13:7"
										}
									],
									"name": "_pause",
									"nameLocation": "2348:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2354:2:7"
									},
									"returnParameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2388:0:7"
									},
									"scope": 1272,
									"src": "2339:115:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1270,
										"nodeType": "Block",
										"src": "2634:69:7",
										"statements": [
											{
												"expression": {
													"id": 1263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1261,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "2644:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1262,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2654:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2644:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1264,
												"nodeType": "ExpressionStatement",
												"src": "2644:15:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1266,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1146,
																"src": "2683:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2683:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1265,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1183,
														"src": "2674:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2674:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1269,
												"nodeType": "EmitStatement",
												"src": "2669:27:7"
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "2460:121:7",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 1271,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1259,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1258,
												"name": "whenPaused",
												"nameLocations": [
													"2623:10:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1205,
												"src": "2623:10:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2623:10:7"
										}
									],
									"name": "_unpause",
									"nameLocation": "2595:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2603:2:7"
									},
									"returnParameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2634:0:7"
									},
									"scope": 1272,
									"src": "2586:117:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1273,
							"src": "615:2090:7",
							"usedErrors": [
								1186,
								1189
							],
							"usedEvents": [
								1178,
								1183
							]
						}
					],
					"src": "102:2604:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							1341
						]
					},
					"id": 1342,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1274,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1275,
								"nodeType": "StructuredDocumentation",
								"src": "135:894:8",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 1341,
							"linearizedBaseContracts": [
								1341
							],
							"name": "ReentrancyGuard",
							"nameLocation": "1048:15:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1278,
									"mutability": "constant",
									"name": "NOT_ENTERED",
									"nameLocation": "1843:11:8",
									"nodeType": "VariableDeclaration",
									"scope": 1341,
									"src": "1818:40:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1276,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1818:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1277,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1857:1:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1281,
									"mutability": "constant",
									"name": "ENTERED",
									"nameLocation": "1889:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 1341,
									"src": "1864:36:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1279,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1864:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1280,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1899:1:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1283,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1923:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 1341,
									"src": "1907:23:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1282,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1907:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "1937:52:8",
										"text": " @dev Unauthorized reentrant call."
									},
									"errorSelector": "3ee5aeb5",
									"id": 1286,
									"name": "ReentrancyGuardReentrantCall",
									"nameLocation": "2000:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:8"
									},
									"src": "1994:37:8"
								},
								{
									"body": {
										"id": 1293,
										"nodeType": "Block",
										"src": "2051:38:8",
										"statements": [
											{
												"expression": {
													"id": 1291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1289,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1283,
														"src": "2061:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1290,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1278,
														"src": "2071:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2061:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1292,
												"nodeType": "ExpressionStatement",
												"src": "2061:21:8"
											}
										]
									},
									"id": 1294,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2048:2:8"
									},
									"returnParameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:0:8"
									},
									"scope": 1341,
									"src": "2037:52:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1304,
										"nodeType": "Block",
										"src": "2490:79:8",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1297,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "2500:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2500:21:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1299,
												"nodeType": "ExpressionStatement",
												"src": "2500:21:8"
											},
											{
												"id": 1300,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:8"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1301,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1329,
														"src": "2542:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2542:20:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1303,
												"nodeType": "ExpressionStatement",
												"src": "2542:20:8"
											}
										]
									},
									"documentation": {
										"id": 1295,
										"nodeType": "StructuredDocumentation",
										"src": "2095:366:8",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 1305,
									"name": "nonReentrant",
									"nameLocation": "2475:12:8",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2487:2:8"
									},
									"src": "2466:103:8",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "2614:268:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1308,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1283,
														"src": "2702:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1309,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1281,
														"src": "2713:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2702:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1315,
												"nodeType": "IfStatement",
												"src": "2698:86:8",
												"trueBody": {
													"id": 1314,
													"nodeType": "Block",
													"src": "2722:62:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1311,
																	"name": "ReentrancyGuardReentrantCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1286,
																	"src": "2743:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1312,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2743:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1313,
															"nodeType": "RevertStatement",
															"src": "2736:37:8"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1316,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1283,
														"src": "2858:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1317,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1281,
														"src": "2868:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2858:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1319,
												"nodeType": "ExpressionStatement",
												"src": "2858:17:8"
											}
										]
									},
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2584:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2603:2:8"
									},
									"returnParameters": {
										"id": 1307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2614:0:8"
									},
									"scope": 1341,
									"src": "2575:307:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1328,
										"nodeType": "Block",
										"src": "2926:170:8",
										"statements": [
											{
												"expression": {
													"id": 1326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1324,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1283,
														"src": "3068:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1325,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1278,
														"src": "3078:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3068:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1327,
												"nodeType": "ExpressionStatement",
												"src": "3068:21:8"
											}
										]
									},
									"id": 1329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2897:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2915:2:8"
									},
									"returnParameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2926:0:8"
									},
									"scope": 1341,
									"src": "2888:208:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1339,
										"nodeType": "Block",
										"src": "3339:42:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1335,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1283,
														"src": "3356:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1336,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1281,
														"src": "3367:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3356:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1334,
												"id": 1338,
												"nodeType": "Return",
												"src": "3349:25:8"
											}
										]
									},
									"documentation": {
										"id": 1330,
										"nodeType": "StructuredDocumentation",
										"src": "3102:168:8",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 1340,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3284:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3307:2:8"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1340,
												"src": "3333:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1332,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3333:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:6:8"
									},
									"scope": 1341,
									"src": "3275:106:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1342,
							"src": "1030:2353:8",
							"usedErrors": [
								1286
							],
							"usedEvents": []
						}
					],
					"src": "109:3275:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							1365
						],
						"IERC165": [
							1377
						]
					},
					"id": 1366,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1343,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "114:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 1345,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1366,
							"sourceUnit": 1378,
							"src": "140:38:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1344,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1377,
										"src": "148:7:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1347,
										"name": "IERC165",
										"nameLocations": [
											"688:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1377,
										"src": "688:7:9"
									},
									"id": 1348,
									"nodeType": "InheritanceSpecifier",
									"src": "688:7:9"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1346,
								"nodeType": "StructuredDocumentation",
								"src": "180:479:9",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1365,
							"linearizedBaseContracts": [
								1365,
								1377
							],
							"name": "ERC165",
							"nameLocation": "678:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1376
									],
									"body": {
										"id": 1363,
										"nodeType": "Block",
										"src": "845:64:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1356,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "862:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1358,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1377,
																	"src": "882:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1377_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1377_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1357,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "877:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1359,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "877:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1377",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1360,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "891:11:9",
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "877:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "862:40:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1355,
												"id": 1362,
												"nodeType": "Return",
												"src": "855:47:9"
											}
										]
									},
									"documentation": {
										"id": 1349,
										"nodeType": "StructuredDocumentation",
										"src": "702:56:9",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "772:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "797:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "790:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1350,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "790:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "789:20:9"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "839:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1353,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "839:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "838:6:9"
									},
									"scope": 1365,
									"src": "763:146:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1366,
							"src": "660:251:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "114:798:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1377
						]
					},
					"id": 1378,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1367,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1368,
								"nodeType": "StructuredDocumentation",
								"src": "141:280:10",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1377,
							"linearizedBaseContracts": [
								1377
							],
							"name": "IERC165",
							"nameLocation": "432:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1369,
										"nodeType": "StructuredDocumentation",
										"src": "446:340:10",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1376,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "800:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "825:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "818:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1370,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "818:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:20:10"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "861:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "861:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:6:10"
									},
									"scope": 1377,
									"src": "791:76:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1378,
							"src": "422:447:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:755:10"
				},
				"id": 10
			},
			"XPToken.sol": {
				"ast": {
					"absolutePath": "XPToken.sol",
					"exportedSymbols": {
						"AccessControl": [
							295
						],
						"Context": [
							1164
						],
						"ERC165": [
							1365
						],
						"ERC20": [
							1030
						],
						"IAccessControl": [
							378
						],
						"IERC20": [
							1108
						],
						"IERC20Errors": [
							420
						],
						"IERC20Metadata": [
							1134
						],
						"Pausable": [
							1272
						],
						"ReentrancyGuard": [
							1341
						],
						"XPToken": [
							1967
						]
					},
					"id": 1968,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1379,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1380,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1968,
							"sourceUnit": 1031,
							"src": "58:55:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/AccessControl.sol",
							"file": "@openzeppelin/contracts/access/AccessControl.sol",
							"id": 1381,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1968,
							"sourceUnit": 296,
							"src": "114:58:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
							"file": "@openzeppelin/contracts/utils/Pausable.sol",
							"id": 1382,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1968,
							"sourceUnit": 1273,
							"src": "173:52:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 1383,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1968,
							"sourceUnit": 1342,
							"src": "226:59:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1385,
										"name": "ERC20",
										"nameLocations": [
											"571:5:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1030,
										"src": "571:5:11"
									},
									"id": 1386,
									"nodeType": "InheritanceSpecifier",
									"src": "571:5:11"
								},
								{
									"baseName": {
										"id": 1387,
										"name": "AccessControl",
										"nameLocations": [
											"578:13:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 295,
										"src": "578:13:11"
									},
									"id": 1388,
									"nodeType": "InheritanceSpecifier",
									"src": "578:13:11"
								},
								{
									"baseName": {
										"id": 1389,
										"name": "Pausable",
										"nameLocations": [
											"593:8:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1272,
										"src": "593:8:11"
									},
									"id": 1390,
									"nodeType": "InheritanceSpecifier",
									"src": "593:8:11"
								},
								{
									"baseName": {
										"id": 1391,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"603:15:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1341,
										"src": "603:15:11"
									},
									"id": 1392,
									"nodeType": "InheritanceSpecifier",
									"src": "603:15:11"
								}
							],
							"canonicalName": "XPToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1384,
								"nodeType": "StructuredDocumentation",
								"src": "287:263:11",
								"text": " @title XPToken\n @dev XP Token with controlled minting/burning for the game ecosystem\n Only the authorized factory contract can mint new XP tokens when CRIDA is locked\n XP tokens represent experience points that can be locked to create game tokens"
							},
							"fullyImplemented": true,
							"id": 1967,
							"linearizedBaseContracts": [
								1967,
								1341,
								1272,
								295,
								1365,
								1377,
								378,
								1030,
								420,
								1134,
								1108,
								1164
							],
							"name": "XPToken",
							"nameLocation": "560:7:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "d5391393",
									"id": 1397,
									"mutability": "constant",
									"name": "MINTER_ROLE",
									"nameLocation": "697:11:11",
									"nodeType": "VariableDeclaration",
									"scope": 1967,
									"src": "673:62:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1393,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "673:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "4d494e5445525f524f4c45",
												"id": 1395,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "721:13:11",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
													"typeString": "literal_string \"MINTER_ROLE\""
												},
												"value": "MINTER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
													"typeString": "literal_string \"MINTER_ROLE\""
												}
											],
											"id": 1394,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "711:9:11",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1396,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "711:24:11",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "e63ab1e9",
									"id": 1402,
									"mutability": "constant",
									"name": "PAUSER_ROLE",
									"nameLocation": "765:11:11",
									"nodeType": "VariableDeclaration",
									"scope": 1967,
									"src": "741:62:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1398,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "741:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5041555345525f524f4c45",
												"id": 1400,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "789:13:11",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
													"typeString": "literal_string \"PAUSER_ROLE\""
												},
												"value": "PAUSER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
													"typeString": "literal_string \"PAUSER_ROLE\""
												}
											],
											"id": 1399,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "779:9:11",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1401,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "779:24:11",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "282c51f3",
									"id": 1407,
									"mutability": "constant",
									"name": "BURNER_ROLE",
									"nameLocation": "833:11:11",
									"nodeType": "VariableDeclaration",
									"scope": 1967,
									"src": "809:62:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1403,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "809:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "4255524e45525f524f4c45",
												"id": 1405,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "857:13:11",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848",
													"typeString": "literal_string \"BURNER_ROLE\""
												},
												"value": "BURNER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848",
													"typeString": "literal_string \"BURNER_ROLE\""
												}
											],
											"id": 1404,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "847:9:11",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1406,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "847:24:11",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a2309ff8",
									"id": 1409,
									"mutability": "mutable",
									"name": "totalMinted",
									"nameLocation": "946:11:11",
									"nodeType": "VariableDeclaration",
									"scope": 1967,
									"src": "931:26:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1408,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "931:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "35ab5f64",
									"id": 1411,
									"mutability": "mutable",
									"name": "totalBurnedAmount",
									"nameLocation": "978:17:11",
									"nodeType": "VariableDeclaration",
									"scope": 1967,
									"src": "963:32:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1410,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "963:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "969cd201f68f120baff2bf3c59bc3b534434e08b69a71a14ab85cb79cd3b63e4",
									"id": 1419,
									"name": "TokensMinted",
									"nameLocation": "1052:12:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1081:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1419,
												"src": "1065:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1065:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1093:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1419,
												"src": "1085:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1085:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1417,
												"indexed": true,
												"mutability": "mutable",
												"name": "minter",
												"nameLocation": "1117:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1419,
												"src": "1101:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1101:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1064:60:11"
									},
									"src": "1046:79:11"
								},
								{
									"anonymous": false,
									"eventSelector": "08009940fb138ae33fbb70c10b643e840c71f1654344cc173975a815e117e687",
									"id": 1427,
									"name": "TokensBurned",
									"nameLocation": "1136:12:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1165:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "1149:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1149:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1423,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1179:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "1171:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1171:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1425,
												"indexed": true,
												"mutability": "mutable",
												"name": "burner",
												"nameLocation": "1203:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "1187:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1148:62:11"
									},
									"src": "1130:81:11"
								},
								{
									"errorSelector": "1f2a2005",
									"id": 1429,
									"name": "ZeroAmount",
									"nameLocation": "1323:10:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1333:2:11"
									},
									"src": "1317:19:11"
								},
								{
									"errorSelector": "d92e233d",
									"id": 1431,
									"name": "ZeroAddress",
									"nameLocation": "1347:11:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:2:11"
									},
									"src": "1341:20:11"
								},
								{
									"errorSelector": "f7693c3d",
									"id": 1437,
									"name": "InvalidAddress",
									"nameLocation": "1372:14:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "provided",
												"nameLocation": "1395:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "1387:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1387:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "1412:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "1405:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1434,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1405:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1386:33:11"
									},
									"src": "1366:54:11"
								},
								{
									"errorSelector": "a4f39665",
									"id": 1441,
									"name": "UnauthorizedMinter",
									"nameLocation": "1467:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "1494:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "1486:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1486:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1485:16:11"
									},
									"src": "1461:41:11"
								},
								{
									"errorSelector": "5936416f",
									"id": 1445,
									"name": "UnauthorizedBurner",
									"nameLocation": "1513:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "1540:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "1532:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1532:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1531:16:11"
									},
									"src": "1507:41:11"
								},
								{
									"errorSelector": "ae3b56d5",
									"id": 1449,
									"name": "UnauthorizedPauser",
									"nameLocation": "1559:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "1586:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "1578:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1578:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1577:16:11"
									},
									"src": "1553:41:11"
								},
								{
									"errorSelector": "c6e3ab8c",
									"id": 1455,
									"name": "RoleAlreadyGranted",
									"nameLocation": "1605:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1632:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "1624:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1649:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "1641:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1452,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1641:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1623:31:11"
									},
									"src": "1599:56:11"
								},
								{
									"errorSelector": "b6f73c94",
									"id": 1461,
									"name": "RoleNotGranted",
									"nameLocation": "1666:14:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1689:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1461,
												"src": "1681:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1456,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1706:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1461,
												"src": "1698:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1458,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:31:11"
									},
									"src": "1660:52:11"
								},
								{
									"errorSelector": "db42144d",
									"id": 1469,
									"name": "InsufficientBalance",
									"nameLocation": "1761:19:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1789:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1781:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1462,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1781:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "required",
												"nameLocation": "1806:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1798:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1798:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "available",
												"nameLocation": "1824:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "1816:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1816:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1780:54:11"
									},
									"src": "1755:80:11"
								},
								{
									"errorSelector": "f3f09e1b",
									"id": 1475,
									"name": "ExcessiveMintRequest",
									"nameLocation": "1846:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "requested",
												"nameLocation": "1875:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1867:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1867:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "maxAllowed",
												"nameLocation": "1894:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1886:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1866:39:11"
									},
									"src": "1840:66:11"
								},
								{
									"errorSelector": "f74b8668",
									"id": 1481,
									"name": "ExcessiveBurnRequest",
									"nameLocation": "1917:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "requested",
												"nameLocation": "1946:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "1938:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1938:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "available",
												"nameLocation": "1965:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "1957:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1957:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1937:38:11"
									},
									"src": "1911:65:11"
								},
								{
									"errorSelector": "594a20b7",
									"id": 1487,
									"name": "TotalSupplyLimitExceeded",
									"nameLocation": "1987:24:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "newTotal",
												"nameLocation": "2020:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "2012:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1482,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2012:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "maxSupply",
												"nameLocation": "2038:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "2030:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2011:37:11"
									},
									"src": "1981:68:11"
								},
								{
									"errorSelector": "ab35696f",
									"id": 1489,
									"name": "ContractPaused",
									"nameLocation": "2094:14:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2108:2:11"
									},
									"src": "2088:23:11"
								},
								{
									"errorSelector": "dcdde9dd",
									"id": 1491,
									"name": "ContractNotPaused",
									"nameLocation": "2122:17:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1490,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2139:2:11"
									},
									"src": "2116:26:11"
								},
								{
									"errorSelector": "c4ee6a84",
									"id": 1495,
									"name": "InvalidContractState",
									"nameLocation": "2153:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1493,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2181:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "2174:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1492,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2174:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2173:15:11"
									},
									"src": "2147:42:11"
								},
								{
									"errorSelector": "c5f2be51",
									"id": 1497,
									"name": "ReentrancyDetected",
									"nameLocation": "2200:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2218:2:11"
									},
									"src": "2194:27:11"
								},
								{
									"errorSelector": "01f0b138",
									"id": 1501,
									"name": "MathOverflow",
									"nameLocation": "2264:12:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "operation",
												"nameLocation": "2284:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "2277:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1498,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2277:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2276:18:11"
									},
									"src": "2258:37:11"
								},
								{
									"errorSelector": "7d752677",
									"id": 1505,
									"name": "MathUnderflow",
									"nameLocation": "2306:13:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "operation",
												"nameLocation": "2327:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "2320:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1502,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2320:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2319:18:11"
									},
									"src": "2300:38:11"
								},
								{
									"errorSelector": "e6921fc1",
									"id": 1513,
									"name": "MintOperationFailed",
									"nameLocation": "2382:19:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2410:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "2402:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1506,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2402:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2422:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "2414:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2414:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2437:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "2430:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1510,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2430:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2401:43:11"
									},
									"src": "2376:69:11"
								},
								{
									"errorSelector": "ccd6aae4",
									"id": 1521,
									"name": "BurnOperationFailed",
									"nameLocation": "2456:19:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1515,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2484:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2476:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1514,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2476:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2498:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2490:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2490:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2513:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2506:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2506:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2475:45:11"
									},
									"src": "2450:71:11"
								},
								{
									"errorSelector": "b2288a63",
									"id": 1529,
									"name": "TransferOperationFailed",
									"nameLocation": "2532:23:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2564:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "2556:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2556:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1525,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2578:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "2570:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2590:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "2582:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2582:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2555:42:11"
									},
									"src": "2526:72:11"
								},
								{
									"errorSelector": "9ccee998",
									"id": 1533,
									"name": "MintingDisabled",
									"nameLocation": "2643:15:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2666:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "2659:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1530,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2659:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2658:15:11"
									},
									"src": "2637:37:11"
								},
								{
									"errorSelector": "914dc50c",
									"id": 1537,
									"name": "BurningDisabled",
									"nameLocation": "2685:15:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2708:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1537,
												"src": "2701:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1534,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2701:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:15:11"
									},
									"src": "2679:37:11"
								},
								{
									"errorSelector": "472c8146",
									"id": 1545,
									"name": "DailyMintLimitExceeded",
									"nameLocation": "2727:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "minter",
												"nameLocation": "2758:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1545,
												"src": "2750:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1538,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2750:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1541,
												"mutability": "mutable",
												"name": "dailyLimit",
												"nameLocation": "2774:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 1545,
												"src": "2766:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2766:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1543,
												"mutability": "mutable",
												"name": "currentMinted",
												"nameLocation": "2794:13:11",
												"nodeType": "VariableDeclaration",
												"scope": 1545,
												"src": "2786:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1542,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2786:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2749:59:11"
									},
									"src": "2721:88:11"
								},
								{
									"errorSelector": "40922f8c",
									"id": 1551,
									"name": "SuspiciousActivity",
									"nameLocation": "2820:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2847:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "2839:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2839:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "2863:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "2856:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1548,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2856:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2838:32:11"
									},
									"src": "2814:57:11"
								},
								{
									"body": {
										"id": 1642,
										"nodeType": "Block",
										"src": "3070:726:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1568,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1553,
																	"src": "3132:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3126:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1566,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3126:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1569,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3126:11:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1570,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3138:6:11",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3126:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1571,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3148:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3126:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1582,
												"nodeType": "IfStatement",
												"src": "3122:117:11",
												"trueBody": {
													"id": 1581,
													"nodeType": "Block",
													"src": "3151:88:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1576,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3195:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1575,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3187:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1574,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3187:7:11",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1577,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3187:10:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "546f6b656e206e616d652063616e6e6f7420626520656d707479",
																		"id": 1578,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3199:28:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_b77b0f33eded65d9b0a0d899300043137cfceb0094d8cc1a47d96701936113a9",
																			"typeString": "literal_string \"Token name cannot be empty\""
																		},
																		"value": "Token name cannot be empty"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_b77b0f33eded65d9b0a0d899300043137cfceb0094d8cc1a47d96701936113a9",
																			"typeString": "literal_string \"Token name cannot be empty\""
																		}
																	],
																	"id": 1573,
																	"name": "InvalidAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1437,
																	"src": "3172:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (address,string memory) pure returns (error)"
																	}
																},
																"id": 1579,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3172:56:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1580,
															"nodeType": "RevertStatement",
															"src": "3165:63:11"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1585,
																	"name": "symbol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1555,
																	"src": "3258:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1584,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3252:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1583,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3252:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3252:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1587,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3266:6:11",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3252:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1588,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3276:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3252:25:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1599,
												"nodeType": "IfStatement",
												"src": "3248:121:11",
												"trueBody": {
													"id": 1598,
													"nodeType": "Block",
													"src": "3279:90:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1593,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3323:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1592,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3315:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1591,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3315:7:11",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3315:10:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "546f6b656e2073796d626f6c2063616e6e6f7420626520656d707479",
																		"id": 1595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3327:30:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_24b5e1bd765b1cbac9a76fb3de9b99d10df37c7317022ef5a48831438e59bbf6",
																			"typeString": "literal_string \"Token symbol cannot be empty\""
																		},
																		"value": "Token symbol cannot be empty"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_24b5e1bd765b1cbac9a76fb3de9b99d10df37c7317022ef5a48831438e59bbf6",
																			"typeString": "literal_string \"Token symbol cannot be empty\""
																		}
																	],
																	"id": 1590,
																	"name": "InvalidAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1437,
																	"src": "3300:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (address,string memory) pure returns (error)"
																	}
																},
																"id": 1596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3300:58:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1597,
															"nodeType": "RevertStatement",
															"src": "3293:65:11"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1600,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1557,
														"src": "3382:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1603,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3399:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1602,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3391:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1601,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3391:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1604,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3391:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3382:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1610,
												"nodeType": "IfStatement",
												"src": "3378:70:11",
												"trueBody": {
													"id": 1609,
													"nodeType": "Block",
													"src": "3403:45:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1606,
																	"name": "ZeroAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1431,
																	"src": "3424:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1607,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3424:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1608,
															"nodeType": "RevertStatement",
															"src": "3417:20:11"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1611,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1559,
														"src": "3461:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3480:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1613,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3472:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1612,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3472:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1615,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3472:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3461:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1621,
												"nodeType": "IfStatement",
												"src": "3457:72:11",
												"trueBody": {
													"id": 1620,
													"nodeType": "Block",
													"src": "3484:45:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1617,
																	"name": "ZeroAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1431,
																	"src": "3505:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1618,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3505:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1619,
															"nodeType": "RevertStatement",
															"src": "3498:20:11"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1623,
															"name": "DEFAULT_ADMIN_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "3565:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1624,
															"name": "admin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "3585:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1622,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "3554:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 1625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3554:37:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1626,
												"nodeType": "ExpressionStatement",
												"src": "3554:37:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1628,
															"name": "PAUSER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1402,
															"src": "3612:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1629,
															"name": "admin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "3625:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1627,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "3601:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 1630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3601:30:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1631,
												"nodeType": "ExpressionStatement",
												"src": "3601:30:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1633,
															"name": "MINTER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1397,
															"src": "3726:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1634,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "3739:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1632,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "3715:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 1635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3715:32:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1636,
												"nodeType": "ExpressionStatement",
												"src": "3715:32:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1638,
															"name": "BURNER_ROLE",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1407,
															"src": "3768:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1639,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "3781:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1637,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "3757:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) returns (bool)"
														}
													},
													"id": 1640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3757:32:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1641,
												"nodeType": "ExpressionStatement",
												"src": "3757:32:11"
											}
										]
									},
									"id": 1643,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1562,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1553,
													"src": "3056:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 1563,
													"name": "symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1555,
													"src": "3062:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 1564,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1561,
												"name": "ERC20",
												"nameLocations": [
													"3050:5:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1030,
												"src": "3050:5:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "3050:19:11"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2961:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "2947:18:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1552,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2947:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "2989:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "2975:20:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1554,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2975:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "3013:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "3005:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3005:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "3036:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1643,
												"src": "3028:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3028:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2937:112:11"
									},
									"returnParameters": {
										"id": 1565,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3070:0:11"
									},
									"scope": 1967,
									"src": "2926:870:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1763,
										"nodeType": "Block",
										"src": "4168:1313:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1658,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1646,
														"src": "4219:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1661,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4233:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1660,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4225:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1659,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4225:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1662,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4225:10:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4219:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1668,
												"nodeType": "IfStatement",
												"src": "4215:67:11",
												"trueBody": {
													"id": 1667,
													"nodeType": "Block",
													"src": "4237:45:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1664,
																	"name": "ZeroAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1431,
																	"src": "4258:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4258:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1666,
															"nodeType": "RevertStatement",
															"src": "4251:20:11"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1669,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1648,
														"src": "4295:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1670,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4305:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4295:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1676,
												"nodeType": "IfStatement",
												"src": "4291:61:11",
												"trueBody": {
													"id": 1675,
													"nodeType": "Block",
													"src": "4308:44:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1672,
																	"name": "ZeroAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1429,
																	"src": "4329:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1673,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4329:12:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1674,
															"nodeType": "RevertStatement",
															"src": "4322:19:11"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1677,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1646,
														"src": "4439:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"id": 1680,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "4453:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_XPToken_$1967",
																	"typeString": "contract XPToken"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_XPToken_$1967",
																	"typeString": "contract XPToken"
																}
															],
															"id": 1679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4445:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1678,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4445:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1681,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4445:13:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4439:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1689,
												"nodeType": "IfStatement",
												"src": "4435:109:11",
												"trueBody": {
													"id": 1688,
													"nodeType": "Block",
													"src": "4460:84:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1684,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1646,
																		"src": "4496:2:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "43616e6e6f74206d696e7420746f20636f6e747261637420697473656c66",
																		"id": 1685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4500:32:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_72449f64bcbf7e530310652d46d67e0507012fc96fdcafe725d653bc9148403a",
																			"typeString": "literal_string \"Cannot mint to contract itself\""
																		},
																		"value": "Cannot mint to contract itself"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_72449f64bcbf7e530310652d46d67e0507012fc96fdcafe725d653bc9148403a",
																			"typeString": "literal_string \"Cannot mint to contract itself\""
																		}
																	],
																	"id": 1683,
																	"name": "InvalidAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1437,
																	"src": "4481:14:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (address,string memory) pure returns (error)"
																	}
																},
																"id": 1686,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4481:52:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1687,
															"nodeType": "RevertStatement",
															"src": "4474:59:11"
														}
													]
												}
											},
											{
												"assignments": [
													1691
												],
												"declarations": [
													{
														"constant": false,
														"id": 1691,
														"mutability": "mutable",
														"name": "newTotalSupply",
														"nameLocation": "4626:14:11",
														"nodeType": "VariableDeclaration",
														"scope": 1763,
														"src": "4618:22:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1690,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4618:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1696,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1692,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "4643:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1693,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4643:13:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1694,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1648,
														"src": "4659:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4643:22:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4618:47:11"
											},
											{
												"assignments": [
													1698
												],
												"declarations": [
													{
														"constant": false,
														"id": 1698,
														"mutability": "mutable",
														"name": "maxSupply",
														"nameLocation": "4683:9:11",
														"nodeType": "VariableDeclaration",
														"scope": 1763,
														"src": "4675:17:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1697,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4675:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1706,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4700:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1700,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4700:7:11",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1699,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "4695:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4695:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1703,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4709:3:11",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "4695:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "32",
														"id": 1704,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4715:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "4695:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4675:41:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1707,
														"name": "newTotalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1691,
														"src": "4761:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1708,
														"name": "maxSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1698,
														"src": "4778:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4761:26:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1716,
												"nodeType": "IfStatement",
												"src": "4757:115:11",
												"trueBody": {
													"id": 1715,
													"nodeType": "Block",
													"src": "4789:83:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1711,
																		"name": "newTotalSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1691,
																		"src": "4835:14:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1712,
																		"name": "maxSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1698,
																		"src": "4851:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1710,
																	"name": "TotalSupplyLimitExceeded",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1487,
																	"src": "4810:24:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4810:51:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1714,
															"nodeType": "RevertStatement",
															"src": "4803:58:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1717,
														"name": "totalMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1409,
														"src": "4950:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1718,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1648,
														"src": "4965:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4950:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1720,
												"nodeType": "ExpressionStatement",
												"src": "4950:21:11"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 1733,
															"nodeType": "Block",
															"src": "5024:66:11",
															"statements": [
																{
																	"eventCall": {
																		"arguments": [
																			{
																				"id": 1727,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1646,
																				"src": "5056:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1728,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1648,
																				"src": "5060:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"expression": {
																					"id": 1729,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "5068:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1730,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5072:6:11",
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "5068:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1726,
																			"name": "TokensMinted",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1419,
																			"src": "5043:12:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
																				"typeString": "function (address,uint256,address)"
																			}
																		},
																		"id": 1731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5043:36:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1732,
																	"nodeType": "EmitStatement",
																	"src": "5038:41:11"
																}
															]
														},
														"errorName": "",
														"id": 1734,
														"nodeType": "TryCatchClause",
														"src": "5024:66:11"
													},
													{
														"block": {
															"id": 1748,
															"nodeType": "Block",
															"src": "5125:163:11",
															"statements": [
																{
																	"expression": {
																		"id": 1740,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1738,
																			"name": "totalMinted",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1409,
																			"src": "5196:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 1739,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1648,
																			"src": "5211:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5196:21:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1741,
																	"nodeType": "ExpressionStatement",
																	"src": "5196:21:11"
																},
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1743,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1646,
																				"src": "5258:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1744,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1648,
																				"src": "5262:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1745,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1736,
																				"src": "5270:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			],
																			"id": 1742,
																			"name": "MintOperationFailed",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1513,
																			"src": "5238:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$_t_error_$",
																				"typeString": "function (address,uint256,string memory) pure returns (error)"
																			}
																		},
																		"id": 1746,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5238:39:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 1747,
																	"nodeType": "RevertStatement",
																	"src": "5231:46:11"
																}
															]
														},
														"errorName": "Error",
														"id": 1749,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 1737,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 1736,
																	"mutability": "mutable",
																	"name": "reason",
																	"nameLocation": "5117:6:11",
																	"nodeType": "VariableDeclaration",
																	"scope": 1749,
																	"src": "5103:20:11",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string"
																	},
																	"typeName": {
																		"id": 1735,
																		"name": "string",
																		"nodeType": "ElementaryTypeName",
																		"src": "5103:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage_ptr",
																			"typeString": "string"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "5102:22:11"
														},
														"src": "5091:197:11"
													},
													{
														"block": {
															"id": 1760,
															"nodeType": "Block",
															"src": "5295:180:11",
															"statements": [
																{
																	"expression": {
																		"id": 1752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1750,
																			"name": "totalMinted",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1409,
																			"src": "5366:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 1751,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1648,
																			"src": "5381:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5366:21:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1753,
																	"nodeType": "ExpressionStatement",
																	"src": "5366:21:11"
																},
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1755,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1646,
																				"src": "5428:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1756,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1648,
																				"src": "5432:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "556e6b6e6f776e206d696e74696e67206572726f72",
																				"id": 1757,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5440:23:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_8ccd31ca47d2f2b02b47c76d03c42342619e0ba56ffeeb63765064c986a4d16e",
																					"typeString": "literal_string \"Unknown minting error\""
																				},
																				"value": "Unknown minting error"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_stringliteral_8ccd31ca47d2f2b02b47c76d03c42342619e0ba56ffeeb63765064c986a4d16e",
																					"typeString": "literal_string \"Unknown minting error\""
																				}
																			],
																			"id": 1754,
																			"name": "MintOperationFailed",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1513,
																			"src": "5408:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$_t_error_$",
																				"typeString": "function (address,uint256,string memory) pure returns (error)"
																			}
																		},
																		"id": 1758,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5408:56:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 1759,
																	"nodeType": "RevertStatement",
																	"src": "5401:63:11"
																}
															]
														},
														"errorName": "",
														"id": 1761,
														"nodeType": "TryCatchClause",
														"src": "5289:186:11"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"id": 1723,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1646,
															"src": "5012:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1724,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "5016:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1721,
															"name": "this",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967268,
															"src": "4994:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_XPToken_$1967",
																"typeString": "contract XPToken"
															}
														},
														"id": 1722,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4999:12:11",
														"memberName": "_performMint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1789,
														"src": "4994:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256) external"
														}
													},
													"id": 1725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4994:29:11",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1762,
												"nodeType": "TryStatement",
												"src": "4990:485:11"
											}
										]
									},
									"documentation": {
										"id": 1644,
										"nodeType": "StructuredDocumentation",
										"src": "3866:156:11",
										"text": " @dev Mint XP tokens to user when CRIDA is locked\n @param to Address to mint tokens to\n @param amount Amount of tokens to mint"
									},
									"functionSelector": "40c10f19",
									"id": 1764,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1651,
													"name": "MINTER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1397,
													"src": "4105:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1652,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1650,
												"name": "onlyRole",
												"nameLocations": [
													"4096:8:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "4096:8:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4096:21:11"
										},
										{
											"id": 1654,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1653,
												"name": "whenNotPaused",
												"nameLocations": [
													"4127:13:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1197,
												"src": "4127:13:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4127:13:11"
										},
										{
											"id": 1656,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1655,
												"name": "nonReentrant",
												"nameLocations": [
													"4150:12:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1305,
												"src": "4150:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "4150:12:11"
										}
									],
									"name": "mint",
									"nameLocation": "4036:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1646,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4049:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "4041:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1645,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4041:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1648,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4061:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "4053:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4053:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4040:28:11"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4168:0:11"
									},
									"scope": 1967,
									"src": "4027:1454:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1788,
										"nodeType": "Block",
										"src": "5631:106:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1773,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5649:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5653:6:11",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5649:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1777,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "5671:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_XPToken_$1967",
																			"typeString": "contract XPToken"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_XPToken_$1967",
																			"typeString": "contract XPToken"
																		}
																	],
																	"id": 1776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5663:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1775,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5663:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 1778,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5663:13:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5649:27:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c792073656c662d63616c6c20616c6c6f776564",
															"id": 1780,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5678:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_78dd6c5956b0c6bc9ee24fc501f5a07adba5c60505e5809806cf4bee6f4578b4",
																"typeString": "literal_string \"Only self-call allowed\""
															},
															"value": "Only self-call allowed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_78dd6c5956b0c6bc9ee24fc501f5a07adba5c60505e5809806cf4bee6f4578b4",
																"typeString": "literal_string \"Only self-call allowed\""
															}
														],
														"id": 1772,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5641:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5641:62:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1782,
												"nodeType": "ExpressionStatement",
												"src": "5641:62:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1784,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1767,
															"src": "5719:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1785,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1769,
															"src": "5723:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1783,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 870,
														"src": "5713:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5713:17:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1787,
												"nodeType": "ExpressionStatement",
												"src": "5713:17:11"
											}
										]
									},
									"documentation": {
										"id": 1765,
										"nodeType": "StructuredDocumentation",
										"src": "5491:76:11",
										"text": " @dev Internal mint function for error handling separation"
									},
									"functionSelector": "b028d807",
									"id": 1789,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_performMint",
									"nameLocation": "5581:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5602:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1789,
												"src": "5594:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5594:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5614:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1789,
												"src": "5606:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5606:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5593:28:11"
									},
									"returnParameters": {
										"id": 1771,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5631:0:11"
									},
									"scope": 1967,
									"src": "5572:165:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1841,
										"nodeType": "Block",
										"src": "5995:317:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1799,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1792,
														"src": "6009:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1800,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6019:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6009:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1805,
												"nodeType": "IfStatement",
												"src": "6005:36:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1802,
															"name": "ZeroAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1429,
															"src": "6029:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1803,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6029:12:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1804,
													"nodeType": "RevertStatement",
													"src": "6022:19:11"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1807,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6065:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1808,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6069:6:11",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6065:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1806,
															"name": "balanceOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "6055:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view returns (uint256)"
															}
														},
														"id": 1809,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6055:21:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1810,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1792,
														"src": "6079:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6055:30:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1822,
												"nodeType": "IfStatement",
												"src": "6051:105:11",
												"trueBody": {
													"errorCall": {
														"arguments": [
															{
																"expression": {
																	"id": 1813,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6114:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1814,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6118:6:11",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6114:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1815,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1792,
																"src": "6126:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [
																	{
																		"expression": {
																			"id": 1817,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6144:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1818,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6148:6:11",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6144:10:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1816,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 616,
																	"src": "6134:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1819,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6134:21:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1812,
															"name": "InsufficientBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1469,
															"src": "6094:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																"typeString": "function (address,uint256,uint256) pure returns (error)"
															}
														},
														"id": 1820,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6094:62:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1821,
													"nodeType": "RevertStatement",
													"src": "6087:69:11"
												}
											},
											{
												"expression": {
													"id": 1825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1823,
														"name": "totalBurnedAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1411,
														"src": "6175:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1824,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1792,
														"src": "6196:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6175:27:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1826,
												"nodeType": "ExpressionStatement",
												"src": "6175:27:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1828,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6218:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1829,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6222:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6218:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1830,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1792,
															"src": "6230:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1827,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "6212:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6212:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1832,
												"nodeType": "ExpressionStatement",
												"src": "6212:25:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1834,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6274:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6278:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6274:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1836,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1792,
															"src": "6286:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1837,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6294:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6298:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6294:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1833,
														"name": "TokensBurned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "6261:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6261:44:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1840,
												"nodeType": "EmitStatement",
												"src": "6256:49:11"
											}
										]
									},
									"documentation": {
										"id": 1790,
										"nodeType": "StructuredDocumentation",
										"src": "5798:94:11",
										"text": " @dev Burn XP tokens from user\n @param amount Amount of tokens to burn"
									},
									"functionSelector": "42966c68",
									"id": 1842,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1795,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1794,
												"name": "whenNotPaused",
												"nameLocations": [
													"5954:13:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1197,
												"src": "5954:13:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "5954:13:11"
										},
										{
											"id": 1797,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1796,
												"name": "nonReentrant",
												"nameLocations": [
													"5977:12:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1305,
												"src": "5977:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "5977:12:11"
										}
									],
									"name": "burn",
									"nameLocation": "5906:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5919:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1842,
												"src": "5911:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1791,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5911:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5910:16:11"
									},
									"returnParameters": {
										"id": 1798,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5995:0:11"
									},
									"scope": 1967,
									"src": "5897:415:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1894,
										"nodeType": "Block",
										"src": "6641:287:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1857,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "6655:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1858,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6665:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6655:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1863,
												"nodeType": "IfStatement",
												"src": "6651:36:11",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1860,
															"name": "ZeroAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1429,
															"src": "6675:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1861,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6675:12:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1862,
													"nodeType": "RevertStatement",
													"src": "6668:19:11"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1865,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1845,
																"src": "6711:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1864,
															"name": "balanceOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "6701:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view returns (uint256)"
															}
														},
														"id": 1866,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6701:15:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1867,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "6719:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6701:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1877,
												"nodeType": "IfStatement",
												"src": "6697:87:11",
												"trueBody": {
													"errorCall": {
														"arguments": [
															{
																"id": 1870,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1845,
																"src": "6754:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1871,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1847,
																"src": "6760:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1873,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1845,
																		"src": "6778:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1872,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 616,
																	"src": "6768:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6768:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1869,
															"name": "InsufficientBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1469,
															"src": "6734:19:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																"typeString": "function (address,uint256,uint256) pure returns (error)"
															}
														},
														"id": 1875,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6734:50:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1876,
													"nodeType": "RevertStatement",
													"src": "6727:57:11"
												}
											},
											{
												"expression": {
													"id": 1880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1878,
														"name": "totalBurnedAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1411,
														"src": "6803:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1879,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1847,
														"src": "6824:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6803:27:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1881,
												"nodeType": "ExpressionStatement",
												"src": "6803:27:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1883,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1845,
															"src": "6846:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1884,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1847,
															"src": "6852:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1882,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "6840:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6840:19:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1886,
												"nodeType": "ExpressionStatement",
												"src": "6840:19:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1888,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1845,
															"src": "6896:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1889,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1847,
															"src": "6902:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1890,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6910:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1891,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6914:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6910:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1887,
														"name": "TokensBurned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "6883:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6883:38:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1893,
												"nodeType": "EmitStatement",
												"src": "6878:43:11"
											}
										]
									},
									"documentation": {
										"id": 1843,
										"nodeType": "StructuredDocumentation",
										"src": "6322:167:11",
										"text": " @dev Burn XP tokens from specific account (factory use)\n @param from Address to burn tokens from\n @param amount Amount of tokens to burn"
									},
									"functionSelector": "79cc6790",
									"id": 1895,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1850,
													"name": "BURNER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1407,
													"src": "6578:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1851,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1849,
												"name": "onlyRole",
												"nameLocations": [
													"6569:8:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "6569:8:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "6569:21:11"
										},
										{
											"id": 1853,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1852,
												"name": "whenNotPaused",
												"nameLocations": [
													"6600:13:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1197,
												"src": "6600:13:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "6600:13:11"
										},
										{
											"id": 1855,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1854,
												"name": "nonReentrant",
												"nameLocations": [
													"6623:12:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1305,
												"src": "6623:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "6623:12:11"
										}
									],
									"name": "burnFrom",
									"nameLocation": "6503:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6520:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "6512:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6512:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6534:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "6526:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1846,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6526:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6511:30:11"
									},
									"returnParameters": {
										"id": 1856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6641:0:11"
									},
									"scope": 1967,
									"src": "6494:434:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1905,
										"nodeType": "Block",
										"src": "7089:25:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1902,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "7099:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7099:8:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1904,
												"nodeType": "ExpressionStatement",
												"src": "7099:8:11"
											}
										]
									},
									"documentation": {
										"id": 1896,
										"nodeType": "StructuredDocumentation",
										"src": "6987:49:11",
										"text": " @dev Pause contract operations"
									},
									"functionSelector": "8456cb59",
									"id": 1906,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1899,
													"name": "PAUSER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1402,
													"src": "7076:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1900,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1898,
												"name": "onlyRole",
												"nameLocations": [
													"7067:8:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "7067:8:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "7067:21:11"
										}
									],
									"name": "pause",
									"nameLocation": "7050:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7055:2:11"
									},
									"returnParameters": {
										"id": 1901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7089:0:11"
									},
									"scope": 1967,
									"src": "7041:73:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1916,
										"nodeType": "Block",
										"src": "7230:27:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1913,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1271,
														"src": "7240:8:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7240:10:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1915,
												"nodeType": "ExpressionStatement",
												"src": "7240:10:11"
											}
										]
									},
									"documentation": {
										"id": 1907,
										"nodeType": "StructuredDocumentation",
										"src": "7124:51:11",
										"text": " @dev Unpause contract operations"
									},
									"functionSelector": "3f4ba83a",
									"id": 1917,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1910,
													"name": "PAUSER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1402,
													"src": "7217:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1911,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1909,
												"name": "onlyRole",
												"nameLocations": [
													"7208:8:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 40,
												"src": "7208:8:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "7208:21:11"
										}
									],
									"name": "unpause",
									"nameLocation": "7189:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7196:2:11"
									},
									"returnParameters": {
										"id": 1912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7230:0:11"
									},
									"scope": 1967,
									"src": "7180:77:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1926,
										"nodeType": "Block",
										"src": "7440:37:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1923,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 603,
														"src": "7457:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7457:13:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1922,
												"id": 1925,
												"nodeType": "Return",
												"src": "7450:20:11"
											}
										]
									},
									"documentation": {
										"id": 1918,
										"nodeType": "StructuredDocumentation",
										"src": "7315:58:11",
										"text": " @dev Get total XP tokens in circulation"
									},
									"functionSelector": "5cb0c16f",
									"id": 1927,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalInCirculation",
									"nameLocation": "7387:18:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7405:2:11"
									},
									"returnParameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1927,
												"src": "7431:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1920,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7431:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7430:9:11"
									},
									"scope": 1967,
									"src": "7378:99:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1943,
										"nodeType": "Block",
										"src": "7672:71:11",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"id": 1937,
															"name": "totalMinted",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1409,
															"src": "7690:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1938,
															"name": "totalBurnedAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1411,
															"src": "7703:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1939,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 603,
																"src": "7722:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 1940,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7722:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1941,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7689:47:11",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256,uint256)"
													}
												},
												"functionReturnParameters": 1936,
												"id": 1942,
												"nodeType": "Return",
												"src": "7682:54:11"
											}
										]
									},
									"documentation": {
										"id": 1928,
										"nodeType": "StructuredDocumentation",
										"src": "7487:54:11",
										"text": " @dev Get minting/burning statistics"
									},
									"functionSelector": "c59d4847",
									"id": 1944,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStats",
									"nameLocation": "7555:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7563:2:11"
									},
									"returnParameters": {
										"id": 1936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1931,
												"mutability": "mutable",
												"name": "minted",
												"nameLocation": "7606:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "7598:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7598:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1933,
												"mutability": "mutable",
												"name": "burned",
												"nameLocation": "7630:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "7622:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7622:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1935,
												"mutability": "mutable",
												"name": "circulation",
												"nameLocation": "7654:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "7646:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1934,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7646:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7588:83:11"
									},
									"scope": 1967,
									"src": "7546:197:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										837
									],
									"body": {
										"id": 1965,
										"nodeType": "Block",
										"src": "8001:48:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1960,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1947,
															"src": "8025:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1961,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1949,
															"src": "8031:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1962,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1951,
															"src": "8035:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1957,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "8011:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_XPToken_$1967_$",
																"typeString": "type(contract super XPToken)"
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8017:7:11",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 837,
														"src": "8011:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8011:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1964,
												"nodeType": "ExpressionStatement",
												"src": "8011:31:11"
											}
										]
									},
									"documentation": {
										"id": 1945,
										"nodeType": "StructuredDocumentation",
										"src": "7805:68:11",
										"text": " @dev Override transfer to add pause functionality"
									},
									"id": 1966,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1955,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1954,
												"name": "whenNotPaused",
												"nameLocations": [
													"7982:13:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1197,
												"src": "7982:13:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "7982:13:11"
										}
									],
									"name": "_update",
									"nameLocation": "7887:7:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1953,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7964:8:11"
									},
									"parameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7903:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "7895:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7895:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1949,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7917:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "7909:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7909:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7929:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "7921:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7921:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7894:42:11"
									},
									"returnParameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8001:0:11"
									},
									"scope": 1967,
									"src": "7878:171:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1968,
							"src": "551:7500:11",
							"usedErrors": [
								305,
								308,
								390,
								395,
								400,
								409,
								414,
								419,
								1186,
								1189,
								1286,
								1429,
								1431,
								1437,
								1441,
								1445,
								1449,
								1455,
								1461,
								1469,
								1475,
								1481,
								1487,
								1489,
								1491,
								1495,
								1497,
								1501,
								1505,
								1513,
								1521,
								1529,
								1533,
								1537,
								1545,
								1551
							],
							"usedEvents": [
								317,
								326,
								335,
								1042,
								1051,
								1178,
								1183,
								1419,
								1427
							]
						}
					],
					"src": "32:8020:11"
				},
				"id": 11
			}
		}
	}
}